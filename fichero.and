rivate void probarLexer() {
        InformacionLexema c = new InformacionLexema();

        File fichero = new File("fichero.and");
        PrintWriter writer;

        try {
            writer = new PrintWriter(fichero);
            writer.print(txtEditor.getText());
            writer.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }

        Reader reader;
        try {
            reader = new BufferedReader(new FileReader("fichero.and"));
            Lexer lexer = new Lexer(reader);
            String errores = "";
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
//                    for (Simbolos sim : simbolos) {
//                        m.addRow(new Object[]{sim.getComponente(), sim.getLexema(), sim.getLinea()});
//                    }
                    txtErrores.setText(errores);
                    return;
                }

                switch (tokens) {
                    case ARROBA:
                        m.addRow(new Object[]{" arroba", lexer.lexema, (c.linea) + 1});
                        break;
                    case ASIGNACION:
                        m.addRow(new Object[]{"Símbolo de asiganción", lexer.lexema, (c.linea) + 1});
                        break;
                    case CADENA_TEXTO:
                        m.addRow(new Object[]{"Constante de caracter", lexer.lexema, (c.linea) + 1});
                        break;
                    case COMA:
                        m.addRow(new Object[]{"Símbolo de coma ", lexer.lexema, (c.linea) + 1});
                        break;
                    case COMILLA_SIMPLE:
                        m.addRow(new Object[]{"Símbolo de comilla simple ", lexer.lexema, (c.linea) + 1});
                        break;
                    case DESIGUAL:
                        m.addRow(new Object[]{"Símbolo de ", lexer.lexema, (c.linea) + 1});
                        break;
                    case DOS_PUNTOS:
                        m.addRow(new Object[]{"Empieza condicional si", lexer.lexema, (c.linea) + 1});
                        break;
                    case RESERVADA_SI:
                        m.addRow(new Object[]{"Empieza condicional si", lexer.lexema, (c.linea) + 1});
                        break;
                    case RESERVADA_NO:
                        m.addRow(new Object[]{"Empieza condicional no", lexer.lexema, (c.linea) + 1});
                        break;
                    case RESERVADA_PARA:
                        m.addRow(new Object[]{"Empieza ciclo para", lexer.lexema, (c.linea) + 1});
                        break;
                    case RESERVADA_MIENTRAS:
                        m.addRow(new Object[]{"Empieza ciclo mientras", lexer.lexema, (c.linea) + 1});
                        break;
                    case RESERVADA_ENTERO:
                        m.addRow(new Object[]{"Declara variable tipo Entero", lexer.lexema, (c.linea) + 1});
                        break;
                    case RESERVADA_CADENA:
                        m.addRow(new Object[]{"Declara variable tipo Cadena", lexer.lexema, (c.linea) + 1});
                        break;
                    case RESERVADA_BOOLEANO:
                        m.addRow(new Object[]{"Declara variable tipo booleana", lexer.lexema, (c.linea) + 1});
                        break;
                    case RESERVADA_INICIAR:
                        m.addRow(new Object[]{"Iniciar programa", lexer.lexema, (c.linea) + 1});
                        break;
                    case PUNTO_COMA:
                        m.addRow(new Object[]{"Simbolo de fin de sentencia ", lexer.lexema, (c.linea) + 1});
                        break;
                    case IDENTIFICADOR_ARREGLO:
                        m.addRow(new Object[]{"Arreglo.", lexer.lexema, (c.linea) + 1});
                        break;
                    case ERROR:
                        errores = errores + "Error Lexico en linea: " + (c.linea + 1)
                                + ". El símbolo ' " + lexer.lexema + " ' no pertenece al lenguaje\n";
                        errores_lexicos = tr