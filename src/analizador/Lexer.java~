/* The following code was generated by JFlex 1.4.3 on 09/06/21 17:50 */

package analizador;
import java.io.*;
import static analizador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/06/21 17:50 from the specification file
 * <tt>C:/analizador/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\2\0\1\13\22\0\1\13\1\22\3\6\1\23"+
    "\1\7\1\14\1\25\1\26\1\17\1\2\1\32\1\3\1\11\1\20"+
    "\12\1\1\31\1\24\1\30\1\16\1\27\1\6\1\33\3\5\1\5"+
    "\26\5\1\6\1\0\1\6\1\0\1\10\1\6\1\41\1\51\1\40"+
    "\1\42\1\12\1\44\1\54\1\55\1\43\1\53\1\4\1\52\1\47"+
    "\1\34\1\37\1\50\1\57\1\36\1\46\1\35\1\45\1\60\3\4"+
    "\1\56\1\6\1\21\2\6\51\0\1\6\26\0\1\6\u1f59\0\1\0"+
    "\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\1\1\6\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\13\6\2\32\1\3\2\0\1\12"+
    "\2\6\1\33\1\0\1\34\1\1\1\35\1\0\1\6"+
    "\1\0\1\36\1\37\1\40\1\41\1\42\1\0\1\43"+
    "\1\44\15\43\1\45\12\6\1\46\5\6\1\35\1\34"+
    "\1\35\2\12\2\6\1\47\1\35\1\6\1\50\33\43"+
    "\11\6\1\51\6\6\1\12\1\0\2\6\1\35\1\6"+
    "\31\43\1\52\3\43\1\53\1\43\1\54\14\6\1\55"+
    "\2\6\1\12\1\0\2\6\1\35\1\6\7\43\1\56"+
    "\16\43\1\57\2\43\1\60\3\43\1\61\2\6\1\62"+
    "\4\6\1\63\5\6\1\0\2\6\1\35\1\64\12\43"+
    "\1\65\4\43\1\66\6\43\1\67\1\70\1\71\1\72"+
    "\1\6\1\73\11\6\1\74\2\6\1\35\7\43\1\75"+
    "\2\43\1\76\2\43\1\77\5\43\1\100\1\6\1\101"+
    "\1\102\1\6\1\103\1\104\4\6\1\74\2\6\1\35"+
    "\3\43\1\105\1\43\1\106\1\107\1\110\3\43\1\111"+
    "\1\112\3\43\1\113\1\6\1\114\1\6\1\115\1\6"+
    "\1\74\2\6\1\35\2\43\1\116\1\117\1\120\1\121"+
    "\1\122\1\43\1\123\1\43\1\6\1\124\1\125\2\6"+
    "\1\35\3\43\1\126\3\6\1\35\3\43\1\127\2\6"+
    "\1\35\2\43\1\130\2\6\1\35\2\43\2\6\1\35"+
    "\2\43\2\6\1\35\2\43\2\6\1\35\2\43\2\6"+
    "\1\35\2\43\2\6\1\35\2\43\2\6\1\35\2\43"+
    "\2\6\1\35\2\43\2\6\1\35\2\43\2\6\1\35"+
    "\2\43\2\6\1\35\2\43\2\6\1\35\2\43\2\6"+
    "\1\35\2\43\2\6\1\35\2\43\2\6\1\35\2\43"+
    "\2\6\1\35\2\43\2\6\1\35\2\43\2\6\1\35"+
    "\2\43\2\6\1\35\2\43\2\6\1\35\2\43\1\33"+
    "\2\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[491];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0157\0\u0188\0\u01b9\0\61\0\u01ea\0\u021b\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\u024c\0\u027d"+
    "\0\61\0\61\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"+
    "\0\223\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u01ea\0\61\0\61"+
    "\0\61\0\61\0\61\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0620\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0620\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0746\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\61\0\u0ebd\0\u0eee\0\u07a8\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\u15a1\0\u15d2\0\u0e8c\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6"+
    "\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u1ce7\0\u1880\0\u1d18\0\u1d49\0\u1d7a\0\u1880\0\u1dab\0\u17bc"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u17bc\0\u2028\0\u2059\0\u208a"+
    "\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212"+
    "\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u21e1\0\u2307\0\u2338\0\u2369"+
    "\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1"+
    "\0\u2522\0\u2553\0\u2584\0\u21e1\0\u25b5\0\u25e6\0\u21e1\0\u2617"+
    "\0\u2648\0\u2679\0\u211d\0\u26aa\0\u26db\0\u211d\0\u270c\0\u273d"+
    "\0\u276e\0\u279f\0\u211d\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894"+
    "\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2927\0\u2989\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u29ba"+
    "\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u29ba\0\u2c37\0\u2c68\0\u2c99"+
    "\0\u2cca\0\u2cfb\0\u2d2c\0\u29ba\0\u29ba\0\u29ba\0\u29ba\0\u2d5d"+
    "\0\u2927\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4"+
    "\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c"+
    "\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131\0\u303c\0\u3162\0\u3193"+
    "\0\u303c\0\u31c4\0\u31f5\0\u303c\0\u3226\0\u3257\0\u3288\0\u32b9"+
    "\0\u32ea\0\u303c\0\u331b\0\u2fa9\0\u2fa9\0\u334c\0\u2fa9\0\u2fa9"+
    "\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4"+
    "\0\u3505\0\u3536\0\u3567\0\u3536\0\u3598\0\u3536\0\u3536\0\u3536"+
    "\0\u35c9\0\u35fa\0\u362b\0\u3536\0\u3536\0\u365c\0\u368d\0\u36be"+
    "\0\u34a3\0\u36ef\0\u34a3\0\u3720\0\u34a3\0\u3751\0\61\0\u3782"+
    "\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3846\0\u3846\0\u3846\0\u3846"+
    "\0\u3846\0\u3877\0\u3846\0\u38a8\0\u38d9\0\u37b3\0\u37b3\0\u390a"+
    "\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u39ce\0\u3a30\0\u3a61"+
    "\0\u3a92\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3a92\0\u3b87\0\u3bb8"+
    "\0\u3be9\0\u3c1a\0\u3c4b\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f"+
    "\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66\0\u3e97"+
    "\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd\0\u3fee\0\u401f"+
    "\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145\0\u4176\0\u41a7"+
    "\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u432f"+
    "\0\u4360\0\u4391\0\u43c2\0\u43f3\0\u4424\0\u4455\0\u4486\0\u44b7"+
    "\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e\0\u463f"+
    "\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765\0\u4796\0\u47c7"+
    "\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed\0\u491e\0\u494f"+
    "\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75\0\u4aa6\0\u4ad7"+
    "\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd\0\u4c2e\0\u4c5f"+
    "\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85\0\u4db6\0\u4de7"+
    "\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d\0\u4f3e\0\u4f6f"+
    "\0\u4fa0\0\61\0\u080a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[491];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\14\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\3\6\1\35\1\36"+
    "\1\37\1\40\1\41\1\6\1\42\1\43\1\44\1\45"+
    "\6\6\1\46\62\0\1\3\2\0\2\47\3\0\1\12"+
    "\1\50\21\0\25\47\1\0\1\51\7\0\1\52\1\53"+
    "\47\0\1\51\1\0\1\54\5\0\1\52\1\53\47\0"+
    "\1\55\2\0\1\56\1\7\2\57\1\55\1\0\1\56"+
    "\12\0\1\60\6\0\25\56\4\0\2\7\4\0\1\7"+
    "\21\0\25\7\4\0\1\57\1\0\2\10\2\0\1\57"+
    "\21\0\25\57\1\0\1\61\7\0\1\62\50\0\1\63"+
    "\2\64\1\56\1\7\2\57\1\55\1\0\1\56\12\0"+
    "\1\60\6\0\1\65\24\56\14\66\1\67\44\66\16\0"+
    "\1\70\60\0\1\71\60\0\1\72\10\0\1\73\32\0"+
    "\1\74\2\0\1\75\1\76\4\0\1\77\21\0\2\75"+
    "\1\100\1\75\1\101\1\102\1\103\1\104\1\105\1\75"+
    "\1\106\1\75\1\107\1\75\1\110\1\75\1\111\1\112"+
    "\2\75\1\113\1\0\1\55\2\0\1\56\1\7\2\57"+
    "\1\55\1\0\1\56\12\0\1\60\6\0\3\56\1\114"+
    "\5\56\1\115\13\56\1\0\1\55\2\0\1\56\1\7"+
    "\2\57\1\55\1\0\1\56\12\0\1\60\6\0\3\56"+
    "\1\116\1\56\1\117\1\56\1\120\15\56\1\0\1\55"+
    "\2\0\1\56\1\7\2\57\1\55\1\0\1\56\12\0"+
    "\1\60\6\0\2\56\1\121\22\56\1\0\1\55\2\0"+
    "\1\56\1\7\2\57\1\55\1\0\1\122\12\0\1\60"+
    "\6\0\25\56\1\0\1\55\2\0\1\56\1\7\2\57"+
    "\1\55\1\0\1\56\12\0\1\60\6\0\1\123\24\56"+
    "\1\0\1\55\2\0\1\56\1\7\2\57\1\55\1\0"+
    "\1\56\12\0\1\60\6\0\5\56\1\124\1\56\1\125"+
    "\1\56\1\126\13\56\1\0\1\55\2\0\1\56\1\7"+
    "\2\57\1\55\1\0\1\56\12\0\1\60\6\0\7\56"+
    "\1\127\15\56\1\0\1\55\2\0\1\56\1\7\2\57"+
    "\1\55\1\0\1\56\12\0\1\60\6\0\7\56\1\130"+
    "\15\56\1\0\1\55\2\0\1\56\1\7\2\57\1\55"+
    "\1\0\1\56\12\0\1\60\6\0\2\56\1\131\2\56"+
    "\1\132\17\56\1\0\1\55\2\0\1\56\1\7\2\57"+
    "\1\55\1\0\1\56\12\0\1\60\6\0\3\56\1\133"+
    "\21\56\1\0\1\55\2\0\1\56\1\7\2\57\1\55"+
    "\1\0\1\134\12\0\1\60\6\0\25\56\1\0\1\47"+
    "\2\0\2\47\4\0\1\47\21\0\25\47\1\0\1\135"+
    "\2\64\2\47\4\0\1\47\21\0\25\47\1\0\1\136"+
    "\60\0\1\137\2\64\55\0\3\140\1\141\11\140\1\0"+
    "\43\140\1\0\1\142\2\0\1\142\3\0\1\142\1\0"+
    "\1\142\12\0\1\60\6\0\25\142\1\0\1\142\2\0"+
    "\1\143\1\7\2\57\1\142\1\0\1\143\12\0\1\60"+
    "\6\0\25\143\4\0\1\57\1\0\2\57\2\0\1\57"+
    "\21\0\25\57\26\0\1\144\33\0\1\61\7\0\1\62"+
    "\1\53\47\0\1\62\7\0\1\62\50\0\1\145\2\0"+
    "\1\142\3\0\1\142\1\0\1\142\12\0\1\60\6\0"+
    "\25\142\1\0\1\137\60\0\1\142\2\0\1\143\1\7"+
    "\2\57\1\142\1\0\1\143\12\0\1\60\6\0\1\143"+
    "\1\146\23\143\1\0\1\147\2\0\2\147\4\0\1\147"+
    "\21\0\25\147\1\0\1\150\2\0\1\151\1\76\2\0"+
    "\1\150\1\0\1\151\21\0\25\151\4\0\2\76\4\0"+
    "\1\76\21\0\25\76\1\0\1\150\2\0\1\151\1\76"+
    "\2\0\1\150\1\0\1\151\21\0\1\152\11\151\1\153"+
    "\4\151\1\154\5\151\1\0\1\150\2\0\1\151\1\76"+
    "\2\0\1\150\1\0\1\155\21\0\11\151\1\156\13\151"+
    "\1\0\1\150\2\0\1\151\1\76\2\0\1\150\1\0"+
    "\1\151\21\0\5\151\1\157\17\151\1\0\1\150\2\0"+
    "\1\151\1\76\2\0\1\150\1\0\1\151\21\0\1\151"+
    "\1\160\1\161\1\151\1\162\1\151\1\163\5\151\1\164"+
    "\1\165\7\151\1\0\1\150\2\0\1\151\1\76\2\0"+
    "\1\150\1\0\1\166\21\0\7\151\1\167\15\151\1\0"+
    "\1\150\2\0\1\151\1\76\2\0\1\150\1\0\1\151"+
    "\21\0\13\151\1\170\6\151\1\171\2\151\1\0\1\150"+
    "\2\0\1\151\1\76\2\0\1\150\1\0\1\151\21\0"+
    "\7\151\1\172\15\151\1\0\1\150\2\0\1\151\1\76"+
    "\2\0\1\150\1\0\1\173\21\0\25\151\1\0\1\150"+
    "\2\0\1\151\1\76\2\0\1\150\1\0\1\151\21\0"+
    "\5\151\1\174\1\151\1\175\15\151\1\0\1\150\2\0"+
    "\1\151\1\76\2\0\1\150\1\0\1\176\21\0\5\151"+
    "\1\177\17\151\1\0\1\150\2\0\1\151\1\76\2\0"+
    "\1\150\1\0\1\151\21\0\7\151\1\200\15\151\1\0"+
    "\1\150\2\0\1\151\1\76\2\0\1\150\1\0\1\151"+
    "\21\0\5\151\1\201\17\151\1\0\1\150\2\0\1\151"+
    "\1\76\2\0\1\150\1\0\1\151\21\0\7\151\1\202"+
    "\15\151\1\0\1\142\2\0\1\143\1\7\2\57\1\142"+
    "\1\0\1\143\12\0\1\60\6\0\16\143\1\203\6\143"+
    "\1\0\1\142\2\0\1\143\1\7\2\57\1\142\1\0"+
    "\1\143\12\0\1\60\6\0\2\143\1\204\22\143\1\0"+
    "\1\142\2\0\1\143\1\7\2\57\1\142\1\0\1\143"+
    "\12\0\1\60\6\0\2\143\1\205\3\143\1\206\16\143"+
    "\1\0\1\142\2\0\1\143\1\7\2\57\1\142\1\0"+
    "\1\143\12\0\1\60\6\0\4\143\1\207\20\143\1\0"+
    "\1\142\2\0\1\143\1\7\2\57\1\142\1\0\1\143"+
    "\12\0\1\60\6\0\2\143\1\210\22\143\1\0\1\142"+
    "\2\0\1\143\1\7\2\57\1\142\1\0\1\143\12\0"+
    "\1\60\6\0\4\143\1\211\20\143\1\0\1\142\2\0"+
    "\1\143\1\7\2\57\1\142\1\0\1\143\12\0\1\60"+
    "\6\0\7\143\1\212\15\143\1\0\1\142\2\0\1\143"+
    "\1\7\2\57\1\142\1\0\1\143\12\0\1\60\6\0"+
    "\16\143\1\213\6\143\1\0\1\142\2\0\1\143\1\7"+
    "\2\57\1\142\1\0\1\143\12\0\1\60\6\0\1\214"+
    "\24\143\1\0\1\142\2\0\1\143\1\7\2\57\1\142"+
    "\1\0\1\143\12\0\1\60\6\0\1\215\24\143\1\0"+
    "\1\142\2\0\1\143\1\7\2\57\1\142\1\0\1\216"+
    "\12\0\1\60\6\0\25\143\1\0\1\142\2\0\1\143"+
    "\1\7\2\57\1\142\1\0\1\143\12\0\1\60\6\0"+
    "\7\143\1\217\15\143\1\0\1\142\2\0\1\143\1\7"+
    "\2\57\1\142\1\0\1\143\12\0\1\60\6\0\2\143"+
    "\1\220\22\143\1\0\1\142\2\0\1\143\1\7\2\57"+
    "\1\142\1\0\1\143\12\0\1\60\6\0\3\143\1\221"+
    "\21\143\1\0\1\142\2\0\1\143\1\7\2\57\1\142"+
    "\1\0\1\143\12\0\1\60\6\0\2\143\1\222\22\143"+
    "\1\0\1\135\2\0\2\47\4\0\1\47\21\0\25\47"+
    "\1\0\1\136\10\0\1\53\46\0\15\140\1\0\43\140"+
    "\3\141\1\223\11\141\1\224\43\141\1\0\1\225\2\0"+
    "\1\225\3\0\1\225\1\0\1\225\12\0\1\60\6\0"+
    "\25\225\1\0\1\225\2\0\1\226\1\7\2\57\1\225"+
    "\1\0\1\226\12\0\1\60\6\0\25\226\1\0\1\227"+
    "\2\0\1\225\3\0\1\225\1\0\1\225\12\0\1\60"+
    "\6\0\25\225\1\0\1\225\2\0\1\226\1\7\2\57"+
    "\1\225\1\0\1\230\12\0\1\60\6\0\25\226\1\0"+
    "\1\231\2\0\1\231\3\0\1\231\1\0\1\231\21\0"+
    "\25\231\1\0\1\231\2\0\1\232\1\76\2\0\1\231"+
    "\1\0\1\232\21\0\25\232\1\0\1\231\2\0\1\232"+
    "\1\76\2\0\1\231\1\0\1\232\21\0\4\232\1\233"+
    "\20\232\1\0\1\231\2\0\1\232\1\76\2\0\1\231"+
    "\1\0\1\232\21\0\14\232\1\234\10\232\1\0\1\231"+
    "\2\0\1\232\1\76\2\0\1\231\1\0\1\235\21\0"+
    "\25\232\1\0\1\231\2\0\1\232\1\76\2\0\1\231"+
    "\1\0\1\232\21\0\1\232\1\236\16\232\1\237\4\232"+
    "\1\0\1\231\2\0\1\232\1\76\2\0\1\231\1\0"+
    "\1\232\21\0\1\232\1\240\23\232\1\0\1\231\2\0"+
    "\1\232\1\76\2\0\1\231\1\0\1\232\21\0\2\232"+
    "\1\241\11\232\1\242\1\232\1\243\6\232\1\0\1\231"+
    "\2\0\1\232\1\76\2\0\1\231\1\0\1\232\21\0"+
    "\2\232\1\244\22\232\1\0\1\231\2\0\1\232\1\76"+
    "\2\0\1\231\1\0\1\232\21\0\2\232\1\245\22\232"+
    "\1\0\1\231\2\0\1\232\1\76\2\0\1\231\1\0"+
    "\1\246\21\0\25\232\1\0\1\231\2\0\1\232\1\76"+
    "\2\0\1\231\1\0\1\247\21\0\25\232\1\0\1\231"+
    "\2\0\1\232\1\76\2\0\1\231\1\0\1\232\21\0"+
    "\5\232\1\250\17\232\1\0\1\231\2\0\1\232\1\76"+
    "\2\0\1\231\1\0\1\232\21\0\5\232\1\251\17\232"+
    "\1\0\1\231\2\0\1\232\1\76\2\0\1\231\1\0"+
    "\1\232\21\0\1\232\1\252\1\253\22\232\1\0\1\231"+
    "\2\0\1\232\1\76\2\0\1\231\1\0\1\232\21\0"+
    "\2\232\1\254\22\232\1\0\1\231\2\0\1\232\1\76"+
    "\2\0\1\231\1\0\1\232\21\0\14\232\1\255\10\232"+
    "\1\0\1\231\2\0\1\232\1\76\2\0\1\231\1\0"+
    "\1\232\21\0\23\232\1\256\1\232\1\0\1\231\2\0"+
    "\1\232\1\76\2\0\1\231\1\0\1\232\21\0\17\232"+
    "\1\257\5\232\1\0\1\231\2\0\1\232\1\76\2\0"+
    "\1\231\1\0\1\232\21\0\20\232\1\260\4\232\1\0"+
    "\1\231\2\0\1\232\1\76\2\0\1\231\1\0\1\232"+
    "\21\0\2\232\1\261\22\232\1\0\1\231\2\0\1\232"+
    "\1\76\2\0\1\231\1\0\1\232\21\0\1\262\24\232"+
    "\1\0\1\231\2\0\1\232\1\76\2\0\1\231\1\0"+
    "\1\263\21\0\25\232\1\0\1\231\2\0\1\232\1\76"+
    "\2\0\1\231\1\0\1\232\21\0\2\232\1\264\22\232"+
    "\1\0\1\231\2\0\1\232\1\76\2\0\1\231\1\0"+
    "\1\232\21\0\2\232\1\265\22\232\1\0\1\231\2\0"+
    "\1\232\1\76\2\0\1\231\1\0\1\232\21\0\22\232"+
    "\1\266\2\232\1\0\1\231\2\0\1\232\1\76\2\0"+
    "\1\231\1\0\1\232\21\0\6\232\1\267\16\232\1\0"+
    "\1\225\2\0\1\226\1\7\2\57\1\225\1\0\1\226"+
    "\12\0\1\60\6\0\3\226\1\270\21\226\1\0\1\225"+
    "\2\0\1\226\1\7\2\57\1\225\1\0\1\226\12\0"+
    "\1\60\6\0\1\226\1\271\23\226\1\0\1\225\2\0"+
    "\1\226\1\7\2\57\1\225\1\0\1\226\12\0\1\60"+
    "\6\0\5\226\1\272\17\226\1\0\1\225\2\0\1\226"+
    "\1\7\2\57\1\225\1\0\1\273\12\0\1\60\6\0"+
    "\25\226\1\0\1\225\2\0\1\226\1\7\2\57\1\225"+
    "\1\0\1\226\12\0\1\60\6\0\16\226\1\274\6\226"+
    "\1\0\1\225\2\0\1\226\1\7\2\57\1\225\1\0"+
    "\1\275\12\0\1\60\6\0\25\226\1\0\1\225\2\0"+
    "\1\226\1\7\2\57\1\225\1\0\1\226\12\0\1\60"+
    "\6\0\7\226\1\276\6\226\1\277\6\226\1\0\1\225"+
    "\2\0\1\226\1\7\2\57\1\225\1\0\1\226\12\0"+
    "\1\60\6\0\4\226\1\300\20\226\1\0\1\225\2\0"+
    "\1\226\1\7\2\57\1\225\1\0\1\226\12\0\1\60"+
    "\6\0\12\226\1\301\12\226\1\0\1\225\2\0\1\226"+
    "\1\7\2\57\1\225\1\0\1\226\12\0\1\60\6\0"+
    "\4\226\1\302\20\226\1\0\1\225\2\0\1\226\1\7"+
    "\2\57\1\225\1\0\1\226\12\0\1\60\6\0\1\303"+
    "\24\226\1\0\1\225\2\0\1\226\1\7\2\57\1\225"+
    "\1\0\1\226\12\0\1\60\6\0\1\304\24\226\1\0"+
    "\1\225\2\0\1\226\1\7\2\57\1\225\1\0\1\226"+
    "\12\0\1\60\6\0\5\226\1\305\17\226\1\0\1\225"+
    "\2\0\1\226\1\7\2\57\1\225\1\0\1\226\12\0"+
    "\1\60\6\0\16\226\1\306\6\226\1\0\1\225\2\0"+
    "\1\226\1\7\2\57\1\225\1\0\1\226\12\0\1\60"+
    "\6\0\6\226\1\307\16\226\3\141\1\310\11\141\1\224"+
    "\43\141\3\224\1\311\55\224\1\0\1\312\2\0\1\312"+
    "\3\0\1\312\1\0\1\312\12\0\1\60\6\0\25\312"+
    "\1\0\1\312\2\0\1\313\1\7\2\57\1\312\1\0"+
    "\1\313\12\0\1\60\6\0\25\313\1\0\1\314\2\0"+
    "\1\312\3\0\1\312\1\0\1\312\12\0\1\60\6\0"+
    "\25\312\1\0\1\312\2\0\1\313\1\7\2\57\1\312"+
    "\1\0\1\313\12\0\1\60\6\0\2\313\1\315\22\313"+
    "\1\0\1\316\2\0\1\316\3\0\1\316\1\0\1\316"+
    "\21\0\25\316\1\0\1\316\2\0\1\317\1\76\2\0"+
    "\1\316\1\0\1\317\21\0\25\317\1\0\1\316\2\0"+
    "\1\317\1\76\2\0\1\316\1\0\1\320\21\0\25\317"+
    "\1\0\1\316\2\0\1\317\1\76\2\0\1\316\1\0"+
    "\1\321\21\0\25\317\1\0\1\316\2\0\1\317\1\76"+
    "\2\0\1\316\1\0\1\317\21\0\4\317\1\322\20\317"+
    "\1\0\1\316\2\0\1\317\1\76\2\0\1\316\1\0"+
    "\1\317\21\0\3\317\1\323\21\317\1\0\1\316\2\0"+
    "\1\317\1\76\2\0\1\316\1\0\1\317\21\0\2\317"+
    "\1\324\22\317\1\0\1\316\2\0\1\317\1\76\2\0"+
    "\1\316\1\0\1\317\21\0\5\317\1\325\17\317\1\0"+
    "\1\316\2\0\1\317\1\76\2\0\1\316\1\0\1\317"+
    "\21\0\20\317\1\326\4\317\1\0\1\316\2\0\1\317"+
    "\1\76\2\0\1\316\1\0\1\317\21\0\1\317\1\327"+
    "\23\317\1\0\1\316\2\0\1\317\1\76\2\0\1\316"+
    "\1\0\1\317\21\0\7\317\1\330\15\317\1\0\1\316"+
    "\2\0\1\317\1\76\2\0\1\316\1\0\1\317\21\0"+
    "\5\317\1\331\17\317\1\0\1\316\2\0\1\317\1\76"+
    "\2\0\1\316\1\0\1\317\21\0\7\317\1\332\15\317"+
    "\1\0\1\316\2\0\1\317\1\76\2\0\1\316\1\0"+
    "\1\317\21\0\16\317\1\333\6\317\1\0\1\316\2\0"+
    "\1\317\1\76\2\0\1\316\1\0\1\317\21\0\16\317"+
    "\1\334\6\317\1\0\1\316\2\0\1\317\1\76\2\0"+
    "\1\316\1\0\1\317\21\0\20\317\1\335\4\317\1\0"+
    "\1\316\2\0\1\317\1\76\2\0\1\316\1\0\1\317"+
    "\21\0\17\317\1\336\5\317\1\0\1\316\2\0\1\317"+
    "\1\76\2\0\1\316\1\0\1\337\21\0\25\317\1\0"+
    "\1\316\2\0\1\317\1\76\2\0\1\316\1\0\1\340"+
    "\21\0\25\317\1\0\1\316\2\0\1\317\1\76\2\0"+
    "\1\316\1\0\1\341\21\0\25\317\1\0\1\316\2\0"+
    "\1\317\1\76\2\0\1\316\1\0\1\317\21\0\2\317"+
    "\1\342\22\317\1\0\1\316\2\0\1\317\1\76\2\0"+
    "\1\316\1\0\1\317\21\0\11\317\1\343\13\317\1\0"+
    "\1\316\2\0\1\317\1\76\2\0\1\316\1\0\1\317"+
    "\21\0\3\317\1\344\21\317\1\0\1\316\2\0\1\317"+
    "\1\76\2\0\1\316\1\0\1\317\21\0\11\317\1\345"+
    "\13\317\1\0\1\316\2\0\1\317\1\76\2\0\1\316"+
    "\1\0\1\317\21\0\5\317\1\346\17\317\1\0\1\316"+
    "\2\0\1\317\1\76\2\0\1\316\1\0\1\317\21\0"+
    "\2\317\1\347\22\317\1\0\1\316\2\0\1\317\1\76"+
    "\2\0\1\316\1\0\1\317\21\0\20\317\1\350\4\317"+
    "\1\0\1\316\2\0\1\317\1\76\2\0\1\316\1\0"+
    "\1\317\21\0\5\317\1\351\17\317\1\0\1\316\2\0"+
    "\1\317\1\76\2\0\1\316\1\0\1\352\21\0\25\317"+
    "\1\0\1\312\2\0\1\313\1\7\2\57\1\312\1\0"+
    "\1\313\12\0\1\60\6\0\3\313\1\353\21\313\1\0"+
    "\1\312\2\0\1\313\1\7\2\57\1\312\1\0\1\313"+
    "\12\0\1\60\6\0\4\313\1\354\20\313\1\0\1\312"+
    "\2\0\1\313\1\7\2\57\1\312\1\0\1\313\12\0"+
    "\1\60\6\0\1\355\24\313\1\0\1\312\2\0\1\313"+
    "\1\7\2\57\1\312\1\0\1\313\12\0\1\60\6\0"+
    "\3\313\1\356\21\313\1\0\1\312\2\0\1\313\1\7"+
    "\2\57\1\312\1\0\1\313\12\0\1\60\6\0\20\313"+
    "\1\357\4\313\1\0\1\312\2\0\1\313\1\7\2\57"+
    "\1\312\1\0\1\313\12\0\1\60\6\0\13\313\1\360"+
    "\11\313\1\0\1\312\2\0\1\313\1\7\2\57\1\312"+
    "\1\0\1\313\12\0\1\60\6\0\5\313\1\361\17\313"+
    "\1\0\1\312\2\0\1\313\1\7\2\57\1\312\1\0"+
    "\1\313\12\0\1\60\6\0\7\313\1\362\15\313\1\0"+
    "\1\312\2\0\1\313\1\7\2\57\1\312\1\0\1\313"+
    "\12\0\1\60\6\0\3\313\1\363\21\313\1\0\1\312"+
    "\2\0\1\313\1\7\2\57\1\312\1\0\1\313\12\0"+
    "\1\60\6\0\7\313\1\364\15\313\1\0\1\312\2\0"+
    "\1\313\1\7\2\57\1\312\1\0\1\313\12\0\1\60"+
    "\6\0\1\313\1\365\23\313\1\0\1\312\2\0\1\313"+
    "\1\7\2\57\1\312\1\0\1\313\12\0\1\60\6\0"+
    "\4\313\1\366\20\313\1\0\1\312\2\0\1\313\1\7"+
    "\2\57\1\312\1\0\1\367\12\0\1\60\6\0\25\313"+
    "\1\0\1\312\2\0\1\313\1\7\2\57\1\312\1\0"+
    "\1\313\12\0\1\60\6\0\5\313\1\370\17\313\3\141"+
    "\1\140\11\141\1\224\43\141\3\224\1\371\55\224\1\0"+
    "\1\372\2\0\1\372\3\0\1\372\1\0\1\372\12\0"+
    "\1\60\6\0\25\372\1\0\1\372\2\0\1\373\1\7"+
    "\2\57\1\372\1\0\1\373\12\0\1\60\6\0\25\373"+
    "\1\0\1\374\2\0\1\372\3\0\1\372\1\0\1\372"+
    "\12\0\1\60\6\0\25\372\1\0\1\372\2\0\1\373"+
    "\1\7\2\57\1\372\1\0\1\373\12\0\1\60\6\0"+
    "\3\373\1\375\21\373\1\0\1\376\2\0\1\376\3\0"+
    "\1\376\1\0\1\376\21\0\25\376\1\0\1\376\2\0"+
    "\1\377\1\76\2\0\1\376\1\0\1\377\21\0\25\377"+
    "\1\0\1\376\2\0\1\377\1\76\2\0\1\376\1\0"+
    "\1\377\21\0\1\u0100\24\377\1\0\1\376\2\0\1\377"+
    "\1\76\2\0\1\376\1\0\1\377\21\0\2\377\1\u0101"+
    "\22\377\1\0\1\376\2\0\1\377\1\76\2\0\1\376"+
    "\1\0\1\377\21\0\11\377\1\u0102\13\377\1\0\1\376"+
    "\2\0\1\377\1\76\2\0\1\376\1\0\1\377\21\0"+
    "\2\377\1\u0103\22\377\1\0\1\376\2\0\1\377\1\76"+
    "\2\0\1\376\1\0\1\u0104\21\0\25\377\1\0\1\376"+
    "\2\0\1\377\1\76\2\0\1\376\1\0\1\377\21\0"+
    "\5\377\1\u0105\17\377\1\0\1\376\2\0\1\377\1\76"+
    "\2\0\1\376\1\0\1\377\21\0\11\377\1\u0106\13\377"+
    "\1\0\1\376\2\0\1\377\1\76\2\0\1\376\1\0"+
    "\1\377\21\0\15\377\1\u0107\7\377\1\0\1\376\2\0"+
    "\1\377\1\76\2\0\1\376\1\0\1\377\21\0\12\377"+
    "\1\u0108\12\377\1\0\1\376\2\0\1\377\1\76\2\0"+
    "\1\376\1\0\1\377\21\0\15\377\1\u0109\7\377\1\0"+
    "\1\376\2\0\1\377\1\76\2\0\1\376\1\0\1\u010a"+
    "\21\0\25\377\1\0\1\376\2\0\1\377\1\76\2\0"+
    "\1\376\1\0\1\377\21\0\5\377\1\u010b\17\377\1\0"+
    "\1\376\2\0\1\377\1\76\2\0\1\376\1\0\1\377"+
    "\21\0\5\377\1\u010c\17\377\1\0\1\376\2\0\1\377"+
    "\1\76\2\0\1\376\1\0\1\377\21\0\3\377\1\u010d"+
    "\21\377\1\0\1\376\2\0\1\377\1\76\2\0\1\376"+
    "\1\0\1\377\21\0\1\u010e\24\377\1\0\1\376\2\0"+
    "\1\377\1\76\2\0\1\376\1\0\1\377\21\0\4\377"+
    "\1\u010f\20\377\1\0\1\376\2\0\1\377\1\76\2\0"+
    "\1\376\1\0\1\377\21\0\4\377\1\u0110\20\377\1\0"+
    "\1\376\2\0\1\377\1\76\2\0\1\376\1\0\1\377"+
    "\21\0\7\377\1\u0111\15\377\1\0\1\376\2\0\1\377"+
    "\1\76\2\0\1\376\1\0\1\377\21\0\7\377\1\u0112"+
    "\15\377\1\0\1\376\2\0\1\377\1\76\2\0\1\376"+
    "\1\0\1\377\21\0\7\377\1\u0113\15\377\1\0\1\376"+
    "\2\0\1\377\1\76\2\0\1\376\1\0\1\377\21\0"+
    "\24\377\1\u0114\1\0\1\376\2\0\1\377\1\76\2\0"+
    "\1\376\1\0\1\377\21\0\3\377\1\u0115\21\377\1\0"+
    "\1\376\2\0\1\377\1\76\2\0\1\376\1\0\1\377"+
    "\21\0\2\377\1\u0116\22\377\1\0\1\376\2\0\1\377"+
    "\1\76\2\0\1\376\1\0\1\377\21\0\3\377\1\u0117"+
    "\21\377\1\0\1\372\2\0\1\373\1\7\2\57\1\372"+
    "\1\0\1\373\12\0\1\60\6\0\1\373\1\u0118\23\373"+
    "\1\0\1\372\2\0\1\373\1\7\2\57\1\372\1\0"+
    "\1\373\12\0\1\60\6\0\5\373\1\u0119\17\373\1\0"+
    "\1\372\2\0\1\373\1\7\2\57\1\372\1\0\1\373"+
    "\12\0\1\60\6\0\16\373\1\u011a\6\373\1\0\1\372"+
    "\2\0\1\373\1\7\2\57\1\372\1\0\1\373\12\0"+
    "\1\60\6\0\5\373\1\u011b\17\373\1\0\1\372\2\0"+
    "\1\373\1\7\2\57\1\372\1\0\1\373\12\0\1\60"+
    "\6\0\2\373\1\u011c\22\373\1\0\1\372\2\0\1\373"+
    "\1\7\2\57\1\372\1\0\1\373\12\0\1\60\6\0"+
    "\5\373\1\u011d\17\373\1\0\1\372\2\0\1\373\1\7"+
    "\2\57\1\372\1\0\1\373\12\0\1\60\6\0\3\373"+
    "\1\u011e\21\373\1\0\1\372\2\0\1\373\1\7\2\57"+
    "\1\372\1\0\1\373\12\0\1\60\6\0\2\373\1\u011f"+
    "\22\373\1\0\1\372\2\0\1\373\1\7\2\57\1\372"+
    "\1\0\1\373\12\0\1\60\6\0\7\373\1\u0120\15\373"+
    "\1\0\1\372\2\0\1\373\1\7\2\57\1\372\1\0"+
    "\1\373\12\0\1\60\6\0\5\373\1\u0121\17\373\1\0"+
    "\1\372\2\0\1\373\1\7\2\57\1\372\1\0\1\373"+
    "\12\0\1\60\6\0\6\373\1\u0122\16\373\3\224\1\u0123"+
    "\55\224\1\0\1\u0124\2\0\1\u0124\3\0\1\u0124\1\0"+
    "\1\u0124\12\0\1\60\6\0\25\u0124\1\0\1\u0124\2\0"+
    "\1\u0125\1\7\2\57\1\u0124\1\0\1\u0125\12\0\1\60"+
    "\6\0\25\u0125\1\0\1\u0126\2\0\1\u0124\3\0\1\u0124"+
    "\1\0\1\u0124\12\0\1\60\6\0\25\u0124\1\0\1\u0127"+
    "\2\0\1\u0127\3\0\1\u0127\1\0\1\u0127\21\0\25\u0127"+
    "\1\0\1\u0127\2\0\1\u0128\1\76\2\0\1\u0127\1\0"+
    "\1\u0128\21\0\25\u0128\1\0\1\u0127\2\0\1\u0128\1\76"+
    "\2\0\1\u0127\1\0\1\u0128\21\0\6\u0128\1\u0129\16\u0128"+
    "\1\0\1\u0127\2\0\1\u0128\1\76\2\0\1\u0127\1\0"+
    "\1\u0128\21\0\5\u0128\1\u012a\17\u0128\1\0\1\u0127\2\0"+
    "\1\u0128\1\76\2\0\1\u0127\1\0\1\u0128\21\0\1\u0128"+
    "\1\u012b\23\u0128\1\0\1\u0127\2\0\1\u0128\1\76\2\0"+
    "\1\u0127\1\0\1\u0128\21\0\1\u012c\24\u0128\1\0\1\u0127"+
    "\2\0\1\u0128\1\76\2\0\1\u0127\1\0\1\u0128\21\0"+
    "\12\u0128\1\u012d\12\u0128\1\0\1\u0127\2\0\1\u0128\1\76"+
    "\2\0\1\u0127\1\0\1\u0128\21\0\2\u0128\1\u012e\22\u0128"+
    "\1\0\1\u0127\2\0\1\u0128\1\76\2\0\1\u0127\1\0"+
    "\1\u0128\21\0\2\u0128\1\u012f\22\u0128\1\0\1\u0127\2\0"+
    "\1\u0128\1\76\2\0\1\u0127\1\0\1\u0128\21\0\2\u0128"+
    "\1\u0130\22\u0128\1\0\1\u0127\2\0\1\u0128\1\76\2\0"+
    "\1\u0127\1\0\1\u0128\21\0\5\u0128\1\u0131\17\u0128\1\0"+
    "\1\u0127\2\0\1\u0128\1\76\2\0\1\u0127\1\0\1\u0128"+
    "\21\0\2\u0128\1\u0132\22\u0128\1\0\1\u0127\2\0\1\u0128"+
    "\1\76\2\0\1\u0127\1\0\1\u0128\21\0\1\u0133\24\u0128"+
    "\1\0\1\u0127\2\0\1\u0128\1\76\2\0\1\u0127\1\0"+
    "\1\u0128\21\0\2\u0128\1\u0134\22\u0128\1\0\1\u0127\2\0"+
    "\1\u0128\1\76\2\0\1\u0127\1\0\1\u0135\21\0\25\u0128"+
    "\1\0\1\u0127\2\0\1\u0128\1\76\2\0\1\u0127\1\0"+
    "\1\u0128\21\0\21\u0128\1\u0136\3\u0128\1\0\1\u0127\2\0"+
    "\1\u0128\1\76\2\0\1\u0127\1\0\1\u0128\21\0\4\u0128"+
    "\1\u0137\20\u0128\1\0\1\u0127\2\0\1\u0128\1\76\2\0"+
    "\1\u0127\1\0\1\u0128\21\0\13\u0128\1\u0138\11\u0128\1\0"+
    "\1\u0127\2\0\1\u0128\1\76\2\0\1\u0127\1\0\1\u0139"+
    "\21\0\25\u0128\1\0\1\u0127\2\0\1\u0128\1\76\2\0"+
    "\1\u0127\1\0\1\u0128\21\0\2\u0128\1\u013a\22\u0128\1\0"+
    "\1\u0124\2\0\1\u0125\1\7\2\57\1\u0124\1\0\1\u013b"+
    "\12\0\1\60\6\0\25\u0125\1\0\1\u0124\2\0\1\u0125"+
    "\1\7\2\57\1\u0124\1\0\1\u0125\12\0\1\60\6\0"+
    "\3\u0125\1\u013c\21\u0125\1\0\1\u0124\2\0\1\u0125\1\7"+
    "\2\57\1\u0124\1\0\1\u0125\12\0\1\60\6\0\16\u0125"+
    "\1\u013d\6\u0125\1\0\1\u0124\2\0\1\u0125\1\7\2\57"+
    "\1\u0124\1\0\1\u0125\12\0\1\60\6\0\5\u0125\1\u013e"+
    "\17\u0125\1\0\1\u0124\2\0\1\u0125\1\7\2\57\1\u0124"+
    "\1\0\1\u0125\12\0\1\60\6\0\2\u0125\1\u013f\22\u0125"+
    "\1\0\1\u0124\2\0\1\u0125\1\7\2\57\1\u0124\1\0"+
    "\1\u0125\12\0\1\60\6\0\1\u0140\24\u0125\1\0\1\u0124"+
    "\2\0\1\u0125\1\7\2\57\1\u0124\1\0\1\u0125\12\0"+
    "\1\60\6\0\5\u0125\1\u0141\17\u0125\1\0\1\u0124\2\0"+
    "\1\u0125\1\7\2\57\1\u0124\1\0\1\u0125\12\0\1\60"+
    "\6\0\14\u0125\1\u0142\10\u0125\1\0\1\u0124\2\0\1\u0125"+
    "\1\7\2\57\1\u0124\1\0\1\u0125\12\0\1\60\6\0"+
    "\1\u0143\24\u0125\1\0\1\u0124\2\0\1\u0125\1\7\2\57"+
    "\1\u0124\1\0\1\u0144\12\0\1\60\6\0\25\u0125\3\0"+
    "\1\u0145\56\0\1\u0146\2\0\1\u0146\3\0\1\u0146\1\0"+
    "\1\u0146\12\0\1\60\6\0\25\u0146\1\0\1\u0146\2\0"+
    "\1\u0147\1\7\2\57\1\u0146\1\0\1\u0147\12\0\1\60"+
    "\6\0\25\u0147\1\0\1\u0148\2\0\1\u0146\3\0\1\u0146"+
    "\1\0\1\u0146\12\0\1\60\6\0\25\u0146\1\0\1\u0149"+
    "\2\0\1\u0149\3\0\1\u0149\1\0\1\u0149\21\0\25\u0149"+
    "\1\0\1\u0149\2\0\1\u014a\1\76\2\0\1\u0149\1\0"+
    "\1\u014a\21\0\25\u014a\1\0\1\u0149\2\0\1\u014a\1\76"+
    "\2\0\1\u0149\1\0\1\u014b\21\0\25\u014a\1\0\1\u0149"+
    "\2\0\1\u014a\1\76\2\0\1\u0149\1\0\1\u014a\21\0"+
    "\2\u014a\1\u014c\22\u014a\1\0\1\u0149\2\0\1\u014a\1\76"+
    "\2\0\1\u0149\1\0\1\u014a\21\0\5\u014a\1\u014d\17\u014a"+
    "\1\0\1\u0149\2\0\1\u014a\1\76\2\0\1\u0149\1\0"+
    "\1\u014a\21\0\3\u014a\1\u014e\21\u014a\1\0\1\u0149\2\0"+
    "\1\u014a\1\76\2\0\1\u0149\1\0\1\u014a\21\0\5\u014a"+
    "\1\u014f\17\u014a\1\0\1\u0149\2\0\1\u014a\1\76\2\0"+
    "\1\u0149\1\0\1\u014a\21\0\5\u014a\1\u0150\17\u014a\1\0"+
    "\1\u0149\2\0\1\u014a\1\76\2\0\1\u0149\1\0\1\u014a"+
    "\21\0\5\u014a\1\u0151\17\u014a\1\0\1\u0149\2\0\1\u014a"+
    "\1\76\2\0\1\u0149\1\0\1\u014a\21\0\5\u014a\1\u0152"+
    "\17\u014a\1\0\1\u0149\2\0\1\u014a\1\76\2\0\1\u0149"+
    "\1\0\1\u014a\21\0\1\u014a\1\u0153\23\u014a\1\0\1\u0149"+
    "\2\0\1\u014a\1\76\2\0\1\u0149\1\0\1\u014a\21\0"+
    "\2\u014a\1\u0154\22\u014a\1\0\1\u0149\2\0\1\u014a\1\76"+
    "\2\0\1\u0149\1\0\1\u014a\21\0\5\u014a\1\u0155\17\u014a"+
    "\1\0\1\u0149\2\0\1\u014a\1\76\2\0\1\u0149\1\0"+
    "\1\u014a\21\0\7\u014a\1\u0156\15\u014a\1\0\1\u0149\2\0"+
    "\1\u014a\1\76\2\0\1\u0149\1\0\1\u014a\21\0\7\u014a"+
    "\1\u0157\15\u014a\1\0\1\u0149\2\0\1\u014a\1\76\2\0"+
    "\1\u0149\1\0\1\u014a\21\0\2\u014a\1\u0158\22\u014a\1\0"+
    "\1\u0146\2\0\1\u0147\1\7\2\57\1\u0146\1\0\1\u0147"+
    "\12\0\1\60\6\0\2\u0147\1\u0159\22\u0147\1\0\1\u0146"+
    "\2\0\1\u0147\1\7\2\57\1\u0146\1\0\1\u0147\12\0"+
    "\1\60\6\0\4\u0147\1\u015a\20\u0147\1\0\1\u0146\2\0"+
    "\1\u0147\1\7\2\57\1\u0146\1\0\1\u0147\12\0\1\60"+
    "\6\0\12\u0147\1\u015b\12\u0147\1\0\1\u0146\2\0\1\u0147"+
    "\1\7\2\57\1\u0146\1\0\1\u0147\12\0\1\60\6\0"+
    "\5\u0147\1\u015c\17\u0147\1\0\1\u0146\2\0\1\u0147\1\7"+
    "\2\57\1\u0146\1\0\1\u0147\12\0\1\60\6\0\3\u0147"+
    "\1\u015d\21\u0147\1\0\1\u0146\2\0\1\u0147\1\7\2\57"+
    "\1\u0146\1\0\1\u0147\12\0\1\60\6\0\2\u0147\1\u015e"+
    "\22\u0147\3\0\1\u015f\56\0\1\u0160\2\0\1\u0160\3\0"+
    "\1\u0160\1\0\1\u0160\12\0\1\60\6\0\25\u0160\1\0"+
    "\1\u0160\2\0\1\u0161\1\7\2\57\1\u0160\1\0\1\u0161"+
    "\12\0\1\60\6\0\25\u0161\1\0\1\u0162\2\0\1\u0160"+
    "\3\0\1\u0160\1\0\1\u0160\12\0\1\60\6\0\25\u0160"+
    "\1\0\1\u0163\2\0\1\u0163\3\0\1\u0163\1\0\1\u0163"+
    "\21\0\25\u0163\1\0\1\u0163\2\0\1\u0164\1\76\2\0"+
    "\1\u0163\1\0\1\u0164\21\0\25\u0164\1\0\1\u0163\2\0"+
    "\1\u0164\1\76\2\0\1\u0163\1\0\1\u0164\21\0\2\u0164"+
    "\1\u0165\22\u0164\1\0\1\u0163\2\0\1\u0164\1\76\2\0"+
    "\1\u0163\1\0\1\u0164\21\0\2\u0164\1\u0166\22\u0164\1\0"+
    "\1\u0163\2\0\1\u0164\1\76\2\0\1\u0163\1\0\1\u0164"+
    "\21\0\2\u0164\1\u0167\22\u0164\1\0\1\u0163\2\0\1\u0164"+
    "\1\76\2\0\1\u0163\1\0\1\u0164\21\0\2\u0164\1\u0168"+
    "\22\u0164\1\0\1\u0163\2\0\1\u0164\1\76\2\0\1\u0163"+
    "\1\0\1\u0169\21\0\25\u0164\1\0\1\u0163\2\0\1\u0164"+
    "\1\76\2\0\1\u0163\1\0\1\u0164\21\0\3\u0164\1\u016a"+
    "\21\u0164\1\0\1\u0163\2\0\1\u0164\1\76\2\0\1\u0163"+
    "\1\0\1\u0164\21\0\2\u0164\1\u016b\22\u0164\1\0\1\u0163"+
    "\2\0\1\u0164\1\76\2\0\1\u0163\1\0\1\u0164\21\0"+
    "\6\u0164\1\u016c\16\u0164\1\0\1\u0160\2\0\1\u0161\1\7"+
    "\2\57\1\u0160\1\0\1\u0161\12\0\1\60\6\0\7\u0161"+
    "\1\u016d\15\u0161\1\0\1\u0160\2\0\1\u0161\1\7\2\57"+
    "\1\u0160\1\0\1\u0161\12\0\1\60\6\0\16\u0161\1\u016e"+
    "\6\u0161\1\0\1\u0160\2\0\1\u0161\1\7\2\57\1\u0160"+
    "\1\0\1\u0161\12\0\1\60\6\0\3\u0161\1\u016f\21\u0161"+
    "\1\0\1\u0170\2\0\1\u0170\3\0\1\u0170\1\0\1\u0170"+
    "\12\0\1\60\6\0\25\u0170\1\0\1\u0170\2\0\1\u0171"+
    "\1\7\2\57\1\u0170\1\0\1\u0171\12\0\1\60\6\0"+
    "\25\u0171\1\0\1\u0172\2\0\1\u0170\3\0\1\u0170\1\0"+
    "\1\u0170\12\0\1\60\6\0\25\u0170\1\0\1\u0173\2\0"+
    "\1\u0173\3\0\1\u0173\1\0\1\u0173\21\0\25\u0173\1\0"+
    "\1\u0173\2\0\1\u0174\1\76\2\0\1\u0173\1\0\1\u0174"+
    "\21\0\25\u0174\1\0\1\u0173\2\0\1\u0174\1\76\2\0"+
    "\1\u0173\1\0\1\u0174\21\0\1\u0175\24\u0174\1\0\1\u0173"+
    "\2\0\1\u0174\1\76\2\0\1\u0173\1\0\1\u0174\21\0"+
    "\5\u0174\1\u0176\17\u0174\1\0\1\u0170\2\0\1\u0171\1\7"+
    "\2\57\1\u0170\1\0\1\u0171\12\0\1\60\6\0\3\u0171"+
    "\1\u0177\21\u0171\1\0\1\u0178\2\0\1\u0178\3\0\1\u0178"+
    "\1\0\1\u0178\12\0\1\60\6\0\25\u0178\1\0\1\u0178"+
    "\2\0\1\u0179\1\7\2\57\1\u0178\1\0\1\u0179\12\0"+
    "\1\60\6\0\25\u0179\1\0\1\u017a\2\0\1\u0178\3\0"+
    "\1\u0178\1\0\1\u0178\12\0\1\60\6\0\25\u0178\1\0"+
    "\1\u017b\2\0\1\u017b\3\0\1\u017b\1\0\1\u017b\21\0"+
    "\25\u017b\1\0\1\u017b\2\0\1\u017c\1\76\2\0\1\u017b"+
    "\1\0\1\u017c\21\0\25\u017c\1\0\1\u017b\2\0\1\u017c"+
    "\1\76\2\0\1\u017b\1\0\1\u017c\21\0\5\u017c\1\u017d"+
    "\17\u017c\1\0\1\u0178\2\0\1\u0179\1\7\2\57\1\u0178"+
    "\1\0\1\u0179\12\0\1\60\6\0\1\u017e\24\u0179\1\0"+
    "\1\u017f\2\0\1\u017f\3\0\1\u017f\1\0\1\u017f\12\0"+
    "\1\60\6\0\25\u017f\1\0\1\u017f\2\0\1\u0180\1\7"+
    "\2\57\1\u017f\1\0\1\u0180\12\0\1\60\6\0\25\u0180"+
    "\1\0\1\u0181\2\0\1\u017f\3\0\1\u017f\1\0\1\u017f"+
    "\12\0\1\60\6\0\25\u017f\1\0\1\u0182\2\0\1\u0182"+
    "\3\0\1\u0182\1\0\1\u0182\21\0\25\u0182\1\0\1\u0182"+
    "\2\0\1\u0183\1\76\2\0\1\u0182\1\0\1\u0183\21\0"+
    "\25\u0183\1\0\1\u0182\2\0\1\u0183\1\76\2\0\1\u0182"+
    "\1\0\1\u0183\21\0\2\u0183\1\u0184\22\u0183\1\0\1\u0185"+
    "\2\0\1\u0185\3\0\1\u0185\1\0\1\u0185\12\0\1\60"+
    "\6\0\25\u0185\1\0\1\u0185\2\0\1\u0186\1\7\2\57"+
    "\1\u0185\1\0\1\u0186\12\0\1\60\6\0\25\u0186\1\0"+
    "\1\u0187\2\0\1\u0185\3\0\1\u0185\1\0\1\u0185\12\0"+
    "\1\60\6\0\25\u0185\1\0\1\u0188\2\0\1\u0188\3\0"+
    "\1\u0188\1\0\1\u0188\21\0\25\u0188\1\0\1\u0188\2\0"+
    "\1\u0189\1\76\2\0\1\u0188\1\0\1\u0189\21\0\25\u0189"+
    "\1\0\1\u018a\2\0\1\u018a\3\0\1\u018a\1\0\1\u018a"+
    "\12\0\1\60\6\0\25\u018a\1\0\1\u018a\2\0\1\u018b"+
    "\1\7\2\57\1\u018a\1\0\1\u018b\12\0\1\60\6\0"+
    "\25\u018b\1\0\1\u018c\2\0\1\u018a\3\0\1\u018a\1\0"+
    "\1\u018a\12\0\1\60\6\0\25\u018a\1\0\1\u018d\2\0"+
    "\1\u018d\3\0\1\u018d\1\0\1\u018d\21\0\25\u018d\1\0"+
    "\1\u018d\2\0\1\u018e\1\76\2\0\1\u018d\1\0\1\u018e"+
    "\21\0\25\u018e\1\0\1\u018f\2\0\1\u018f\3\0\1\u018f"+
    "\1\0\1\u018f\12\0\1\60\6\0\25\u018f\1\0\1\u018f"+
    "\2\0\1\u0190\1\7\2\57\1\u018f\1\0\1\u0190\12\0"+
    "\1\60\6\0\25\u0190\1\0\1\u0191\2\0\1\u018f\3\0"+
    "\1\u018f\1\0\1\u018f\12\0\1\60\6\0\25\u018f\1\0"+
    "\1\u0192\2\0\1\u0192\3\0\1\u0192\1\0\1\u0192\21\0"+
    "\25\u0192\1\0\1\u0192\2\0\1\u0193\1\76\2\0\1\u0192"+
    "\1\0\1\u0193\21\0\25\u0193\1\0\1\u0194\2\0\1\u0194"+
    "\3\0\1\u0194\1\0\1\u0194\12\0\1\60\6\0\25\u0194"+
    "\1\0\1\u0194\2\0\1\u0195\1\7\2\57\1\u0194\1\0"+
    "\1\u0195\12\0\1\60\6\0\25\u0195\1\0\1\u0196\2\0"+
    "\1\u0194\3\0\1\u0194\1\0\1\u0194\12\0\1\60\6\0"+
    "\25\u0194\1\0\1\u0197\2\0\1\u0197\3\0\1\u0197\1\0"+
    "\1\u0197\21\0\25\u0197\1\0\1\u0197\2\0\1\u0198\1\76"+
    "\2\0\1\u0197\1\0\1\u0198\21\0\25\u0198\1\0\1\u0199"+
    "\2\0\1\u0199\3\0\1\u0199\1\0\1\u0199\12\0\1\60"+
    "\6\0\25\u0199\1\0\1\u0199\2\0\1\u019a\1\7\2\57"+
    "\1\u0199\1\0\1\u019a\12\0\1\60\6\0\25\u019a\1\0"+
    "\1\u019b\2\0\1\u0199\3\0\1\u0199\1\0\1\u0199\12\0"+
    "\1\60\6\0\25\u0199\1\0\1\u019c\2\0\1\u019c\3\0"+
    "\1\u019c\1\0\1\u019c\21\0\25\u019c\1\0\1\u019c\2\0"+
    "\1\u019d\1\76\2\0\1\u019c\1\0\1\u019d\21\0\25\u019d"+
    "\1\0\1\u019e\2\0\1\u019e\3\0\1\u019e\1\0\1\u019e"+
    "\12\0\1\60\6\0\25\u019e\1\0\1\u019e\2\0\1\u019f"+
    "\1\7\2\57\1\u019e\1\0\1\u019f\12\0\1\60\6\0"+
    "\25\u019f\1\0\1\u01a0\2\0\1\u019e\3\0\1\u019e\1\0"+
    "\1\u019e\12\0\1\60\6\0\25\u019e\1\0\1\u01a1\2\0"+
    "\1\u01a1\3\0\1\u01a1\1\0\1\u01a1\21\0\25\u01a1\1\0"+
    "\1\u01a1\2\0\1\u01a2\1\76\2\0\1\u01a1\1\0\1\u01a2"+
    "\21\0\25\u01a2\1\0\1\u01a3\2\0\1\u01a3\3\0\1\u01a3"+
    "\1\0\1\u01a3\12\0\1\60\6\0\25\u01a3\1\0\1\u01a3"+
    "\2\0\1\u01a4\1\7\2\57\1\u01a3\1\0\1\u01a4\12\0"+
    "\1\60\6\0\25\u01a4\1\0\1\u01a5\2\0\1\u01a3\3\0"+
    "\1\u01a3\1\0\1\u01a3\12\0\1\60\6\0\25\u01a3\1\0"+
    "\1\u01a6\2\0\1\u01a6\3\0\1\u01a6\1\0\1\u01a6\21\0"+
    "\25\u01a6\1\0\1\u01a6\2\0\1\u01a7\1\76\2\0\1\u01a6"+
    "\1\0\1\u01a7\21\0\25\u01a7\1\0\1\u01a8\2\0\1\u01a8"+
    "\3\0\1\u01a8\1\0\1\u01a8\12\0\1\60\6\0\25\u01a8"+
    "\1\0\1\u01a8\2\0\1\u01a9\1\7\2\57\1\u01a8\1\0"+
    "\1\u01a9\12\0\1\60\6\0\25\u01a9\1\0\1\u01aa\2\0"+
    "\1\u01a8\3\0\1\u01a8\1\0\1\u01a8\12\0\1\60\6\0"+
    "\25\u01a8\1\0\1\u01ab\2\0\1\u01ab\3\0\1\u01ab\1\0"+
    "\1\u01ab\21\0\25\u01ab\1\0\1\u01ab\2\0\1\u01ac\1\76"+
    "\2\0\1\u01ab\1\0\1\u01ac\21\0\25\u01ac\1\0\1\u01ad"+
    "\2\0\1\u01ad\3\0\1\u01ad\1\0\1\u01ad\12\0\1\60"+
    "\6\0\25\u01ad\1\0\1\u01ad\2\0\1\u01ae\1\7\2\57"+
    "\1\u01ad\1\0\1\u01ae\12\0\1\60\6\0\25\u01ae\1\0"+
    "\1\u01af\2\0\1\u01ad\3\0\1\u01ad\1\0\1\u01ad\12\0"+
    "\1\60\6\0\25\u01ad\1\0\1\u01b0\2\0\1\u01b0\3\0"+
    "\1\u01b0\1\0\1\u01b0\21\0\25\u01b0\1\0\1\u01b0\2\0"+
    "\1\u01b1\1\76\2\0\1\u01b0\1\0\1\u01b1\21\0\25\u01b1"+
    "\1\0\1\u01b2\2\0\1\u01b2\3\0\1\u01b2\1\0\1\u01b2"+
    "\12\0\1\60\6\0\25\u01b2\1\0\1\u01b2\2\0\1\u01b3"+
    "\1\7\2\57\1\u01b2\1\0\1\u01b3\12\0\1\60\6\0"+
    "\25\u01b3\1\0\1\u01b4\2\0\1\u01b2\3\0\1\u01b2\1\0"+
    "\1\u01b2\12\0\1\60\6\0\25\u01b2\1\0\1\u01b5\2\0"+
    "\1\u01b5\3\0\1\u01b5\1\0\1\u01b5\21\0\25\u01b5\1\0"+
    "\1\u01b5\2\0\1\u01b6\1\76\2\0\1\u01b5\1\0\1\u01b6"+
    "\21\0\25\u01b6\1\0\1\u01b7\2\0\1\u01b7\3\0\1\u01b7"+
    "\1\0\1\u01b7\12\0\1\60\6\0\25\u01b7\1\0\1\u01b7"+
    "\2\0\1\u01b8\1\7\2\57\1\u01b7\1\0\1\u01b8\12\0"+
    "\1\60\6\0\25\u01b8\1\0\1\u01b9\2\0\1\u01b7\3\0"+
    "\1\u01b7\1\0\1\u01b7\12\0\1\60\6\0\25\u01b7\1\0"+
    "\1\u01ba\2\0\1\u01ba\3\0\1\u01ba\1\0\1\u01ba\21\0"+
    "\25\u01ba\1\0\1\u01ba\2\0\1\u01bb\1\76\2\0\1\u01ba"+
    "\1\0\1\u01bb\21\0\25\u01bb\1\0\1\u01bc\2\0\1\u01bc"+
    "\3\0\1\u01bc\1\0\1\u01bc\12\0\1\60\6\0\25\u01bc"+
    "\1\0\1\u01bc\2\0\1\u01bd\1\7\2\57\1\u01bc\1\0"+
    "\1\u01bd\12\0\1\60\6\0\25\u01bd\1\0\1\u01be\2\0"+
    "\1\u01bc\3\0\1\u01bc\1\0\1\u01bc\12\0\1\60\6\0"+
    "\25\u01bc\1\0\1\u01bf\2\0\1\u01bf\3\0\1\u01bf\1\0"+
    "\1\u01bf\21\0\25\u01bf\1\0\1\u01bf\2\0\1\u01c0\1\76"+
    "\2\0\1\u01bf\1\0\1\u01c0\21\0\25\u01c0\1\0\1\u01c1"+
    "\2\0\1\u01c1\3\0\1\u01c1\1\0\1\u01c1\12\0\1\60"+
    "\6\0\25\u01c1\1\0\1\u01c1\2\0\1\u01c2\1\7\2\57"+
    "\1\u01c1\1\0\1\u01c2\12\0\1\60\6\0\25\u01c2\1\0"+
    "\1\u01c3\2\0\1\u01c1\3\0\1\u01c1\1\0\1\u01c1\12\0"+
    "\1\60\6\0\25\u01c1\1\0\1\u01c4\2\0\1\u01c4\3\0"+
    "\1\u01c4\1\0\1\u01c4\21\0\25\u01c4\1\0\1\u01c4\2\0"+
    "\1\u01c5\1\76\2\0\1\u01c4\1\0\1\u01c5\21\0\25\u01c5"+
    "\1\0\1\u01c6\2\0\1\u01c6\3\0\1\u01c6\1\0\1\u01c6"+
    "\12\0\1\60\6\0\25\u01c6\1\0\1\u01c6\2\0\1\u01c7"+
    "\1\7\2\57\1\u01c6\1\0\1\u01c7\12\0\1\60\6\0"+
    "\25\u01c7\1\0\1\u01c8\2\0\1\u01c6\3\0\1\u01c6\1\0"+
    "\1\u01c6\12\0\1\60\6\0\25\u01c6\1\0\1\u01c9\2\0"+
    "\1\u01c9\3\0\1\u01c9\1\0\1\u01c9\21\0\25\u01c9\1\0"+
    "\1\u01c9\2\0\1\u01ca\1\76\2\0\1\u01c9\1\0\1\u01ca"+
    "\21\0\25\u01ca\1\0\1\u01cb\2\0\1\u01cb\3\0\1\u01cb"+
    "\1\0\1\u01cb\12\0\1\60\6\0\25\u01cb\1\0\1\u01cb"+
    "\2\0\1\u01cc\1\7\2\57\1\u01cb\1\0\1\u01cc\12\0"+
    "\1\60\6\0\25\u01cc\1\0\1\u01cd\2\0\1\u01cb\3\0"+
    "\1\u01cb\1\0\1\u01cb\12\0\1\60\6\0\25\u01cb\1\0"+
    "\1\u01ce\2\0\1\u01ce\3\0\1\u01ce\1\0\1\u01ce\21\0"+
    "\25\u01ce\1\0\1\u01ce\2\0\1\u01cf\1\76\2\0\1\u01ce"+
    "\1\0\1\u01cf\21\0\25\u01cf\1\0\1\u01d0\2\0\1\u01d0"+
    "\3\0\1\u01d0\1\0\1\u01d0\12\0\1\60\6\0\25\u01d0"+
    "\1\0\1\u01d0\2\0\1\u01d1\1\7\2\57\1\u01d0\1\0"+
    "\1\u01d1\12\0\1\60\6\0\25\u01d1\1\0\1\u01d2\2\0"+
    "\1\u01d0\3\0\1\u01d0\1\0\1\u01d0\12\0\1\60\6\0"+
    "\25\u01d0\1\0\1\u01d3\2\0\1\u01d3\3\0\1\u01d3\1\0"+
    "\1\u01d3\21\0\25\u01d3\1\0\1\u01d3\2\0\1\u01d4\1\76"+
    "\2\0\1\u01d3\1\0\1\u01d4\21\0\25\u01d4\1\0\1\u01d5"+
    "\2\0\1\u01d5\3\0\1\u01d5\1\0\1\u01d5\12\0\1\60"+
    "\6\0\25\u01d5\1\0\1\u01d5\2\0\1\u01d6\1\7\2\57"+
    "\1\u01d5\1\0\1\u01d6\12\0\1\60\6\0\25\u01d6\1\0"+
    "\1\u01d7\2\0\1\u01d5\3\0\1\u01d5\1\0\1\u01d5\12\0"+
    "\1\60\6\0\25\u01d5\1\0\1\u01d8\2\0\1\u01d8\3\0"+
    "\1\u01d8\1\0\1\u01d8\21\0\25\u01d8\1\0\1\u01d8\2\0"+
    "\1\u01d9\1\76\2\0\1\u01d8\1\0\1\u01d9\21\0\25\u01d9"+
    "\1\0\1\u01da\2\0\1\u01da\3\0\1\u01da\1\0\1\u01da"+
    "\12\0\1\60\6\0\25\u01da\1\0\1\u01da\2\0\1\u01db"+
    "\1\7\2\57\1\u01da\1\0\1\u01db\12\0\1\60\6\0"+
    "\25\u01db\1\0\1\u01dc\2\0\1\u01da\3\0\1\u01da\1\0"+
    "\1\u01da\12\0\1\60\6\0\25\u01da\1\0\1\u01dd\2\0"+
    "\1\u01dd\3\0\1\u01dd\1\0\1\u01dd\21\0\25\u01dd\1\0"+
    "\1\u01dd\2\0\1\u01de\1\76\2\0\1\u01dd\1\0\1\u01de"+
    "\21\0\25\u01de\1\0\1\u01df\2\0\1\u01df\3\0\1\u01df"+
    "\1\0\1\u01df\12\0\1\60\6\0\25\u01df\1\0\1\u01df"+
    "\2\0\1\u01e0\1\7\2\57\1\u01df\1\0\1\u01e0\12\0"+
    "\1\60\6\0\25\u01e0\1\0\1\u01e1\2\0\1\u01df\3\0"+
    "\1\u01df\1\0\1\u01df\12\0\1\60\6\0\25\u01df\1\0"+
    "\1\u01e2\2\0\1\u01e2\3\0\1\u01e2\1\0\1\u01e2\21\0"+
    "\25\u01e2\1\0\1\u01e2\2\0\1\u01e3\1\76\2\0\1\u01e2"+
    "\1\0\1\u01e3\21\0\25\u01e3\1\0\1\u01e4\2\0\1\u01e4"+
    "\3\0\1\u01e4\1\0\1\u01e4\12\0\1\60\6\0\25\u01e4"+
    "\1\0\1\u01e4\2\0\1\u01e5\1\7\2\57\1\u01e4\1\0"+
    "\1\u01e5\12\0\1\60\6\0\25\u01e5\1\0\1\u01e6\2\0"+
    "\1\u01e4\3\0\1\u01e4\1\0\1\u01e4\12\0\1\60\6\0"+
    "\25\u01e4\1\0\1\u01e7\2\0\1\u01e7\3\0\1\u01e7\1\0"+
    "\1\u01e7\21\0\25\u01e7\1\0\1\u01e7\2\0\1\u01e8\1\76"+
    "\2\0\1\u01e7\1\0\1\u01e8\21\0\25\u01e8\25\0\1\60"+
    "\37\0\1\u01e9\1\7\2\57\2\0\1\u01e9\12\0\1\60"+
    "\6\0\25\u01e9\1\0\1\137\23\0\1\60\34\0\1\u01ea"+
    "\2\0\1\u01ea\3\0\1\u01ea\1\0\1\u01ea\21\0\25\u01ea"+
    "\1\0\1\u01ea\2\0\1\u01eb\1\76\2\0\1\u01ea\1\0"+
    "\1\u01eb\21\0\25\u01eb\4\0\1\u01e9\1\7\2\57\2\0"+
    "\1\u01e9\21\0\25\u01e9";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20433];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\11\1\1\11\2\1\10\11\2\1\2\11"+
    "\17\1\2\0\4\1\1\0\3\1\1\0\1\1\1\0"+
    "\5\11\1\0\47\1\1\11\57\1\1\0\64\1\1\0"+
    "\57\1\1\0\145\1\1\11\212\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[491];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;
    modelos.InformacionLexema c = new modelos.InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARRIBA;
          }
        case 89: break;
        case 15: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_O;
          }
        case 90: break;
        case 24: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMA;
          }
        case 91: break;
        case 48: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LEER;
          }
        case 92: break;
        case 3: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO;
          }
        case 93: break;
        case 67: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_INICIAR;
          }
        case 94: break;
        case 7: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_MAYUS;
          }
        case 95: break;
        case 53: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ATRAS;
          }
        case 96: break;
        case 72: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CAPTURA;
          }
        case 97: break;
        case 39: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR_ARREGLO;
          }
        case 98: break;
        case 4: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MAS;
          }
        case 99: break;
        case 6: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR;
          }
        case 100: break;
        case 63: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_APAGAR;
          }
        case 101: break;
        case 34: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DESIGUAL;
          }
        case 102: break;
        case 38: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SI;
          }
        case 103: break;
        case 64: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SEGUIR;
          }
        case 104: break;
        case 10: 
          { /*Ignore*/
          }
        case 105: break;
        case 59: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CADENA;
          }
        case 106: break;
        case 85: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VERDADERO;
          }
        case 107: break;
        case 57: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_GIRAR;
          }
        case 108: break;
        case 82: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ADELANTE;
          }
        case 109: break;
        case 22: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR;
          }
        case 110: break;
        case 41: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIN;
          }
        case 111: break;
        case 19: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_IZQ;
          }
        case 112: break;
        case 61: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARGAR;
          }
        case 113: break;
        case 21: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR;
          }
        case 114: break;
        case 14: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_DIVISION;
          }
        case 115: break;
        case 69: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ESPERAR;
          }
        case 116: break;
        case 44: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NULO;
          }
        case 117: break;
        case 66: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECIMAL;
          }
        case 118: break;
        case 51: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FALSO;
          }
        case 119: break;
        case 50: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CICLO;
          }
        case 120: break;
        case 76: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_MIENTRAS;
          }
        case 121: break;
        case 49: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CORTO;
          }
        case 122: break;
        case 54: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ABAJO;
          }
        case 123: break;
        case 37: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NO;
          }
        case 124: break;
        case 9: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_Y;
          }
        case 125: break;
        case 11: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMILLA_SIMPLE;
          }
        case 126: break;
        case 55: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARAV;
          }
        case 127: break;
        case 35: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA;
          }
        case 128: break;
        case 88: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DIRECCIONAR;
          }
        case 129: break;
        case 68: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FUNCION;
          }
        case 130: break;
        case 79: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_EJECUTAR;
          }
        case 131: break;
        case 52: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENTERO;
          }
        case 132: break;
        case 58: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VIDEO;
          }
        case 133: break;
        case 45: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARA;
          }
        case 134: break;
        case 42: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PIN;
          }
        case 135: break;
        case 80: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CALIBRAR;
          }
        case 136: break;
        case 77: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_BOOLEANO;
          }
        case 137: break;
        case 27: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ID_CON_SIMBOLOS;
          }
        case 138: break;
        case 47: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIJO;
          }
        case 139: break;
        case 16: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_NEGACION;
          }
        case 140: break;
        case 46: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RUTA;
          }
        case 141: break;
        case 5: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MENOS;
          }
        case 142: break;
        case 43: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_HAZ;
          }
        case 143: break;
        case 17: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MODULO;
          }
        case 144: break;
        case 29: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_EXPONENTE;
          }
        case 145: break;
        case 81: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ACELERAR;
          }
        case 146: break;
        case 2: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR;
          }
        case 147: break;
        case 20: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_DER;
          }
        case 148: break;
        case 30: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return CADENA_TEXTO;
          }
        case 149: break;
        case 73: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DETENER;
          }
        case 150: break;
        case 70: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RETORNO;
          }
        case 151: break;
        case 33: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR_IGUAL;
          }
        case 152: break;
        case 87: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECLARACION;
          }
        case 153: break;
        case 36: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA_MAYUS;
          }
        case 154: break;
        case 65: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARREGLO;
          }
        case 155: break;
        case 74: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DERECHA;
          }
        case 156: break;
        case 12: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ASIGNACION;
          }
        case 157: break;
        case 84: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PRINCIPAL;
          }
        case 158: break;
        case 1: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_PUNTOS;
          }
        case 159: break;
        case 86: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IZQUIERDA;
          }
        case 160: break;
        case 26: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ID_NUM;
          }
        case 161: break;
        case 78: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENCENDER;
          }
        case 162: break;
        case 28: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_DECIMAL;
          }
        case 163: break;
        case 56: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LARGO;
          }
        case 164: break;
        case 71: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_REGRESA;
          }
        case 165: break;
        case 32: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR_IGUAL;
          }
        case 166: break;
        case 31: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_IGUALDAD;
          }
        case 167: break;
        case 23: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DOS_PUNTOS;
          }
        case 168: break;
        case 83: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IMPRIMIR;
          }
        case 169: break;
        case 13: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_POR;
          }
        case 170: break;
        case 8: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return SNP;
          }
        case 171: break;
        case 75: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARACTER;
          }
        case 172: break;
        case 18: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PUNTO_COMA;
          }
        case 173: break;
        case 40: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA_NUM;
          }
        case 174: break;
        case 25: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ARROBA;
          }
        case 175: break;
        case 60: 
          { 
          }
        case 176: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
