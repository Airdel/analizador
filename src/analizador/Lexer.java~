/* The following code was generated by JFlex 1.4.3 on 26/05/21 19:43 */

package analizador;
import java.io.*;
import static analizador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/05/21 19:43 from the specification file
 * <tt>C:/analizador/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\13\2\0\1\11\22\0\1\11\1\21\3\0\1\22"+
    "\1\17\1\12\1\24\1\25\1\15\1\2\1\31\1\3\1\7\1\16"+
    "\12\1\1\30\1\23\1\27\1\14\1\26\1\0\1\32\32\5\4\0"+
    "\1\6\1\0\1\40\1\50\1\37\1\41\1\10\1\43\1\53\1\54"+
    "\1\42\1\52\1\4\1\51\1\46\1\33\1\36\1\47\1\56\1\35"+
    "\1\45\1\34\1\44\1\57\3\4\1\55\1\0\1\20\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\17\5\1\1\1\0\1\1\1\2\1\0\1\6"+
    "\1\5\1\0\1\27\1\30\1\0\3\5\1\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\25\5\1\37\13\5"+
    "\2\30\2\6\1\5\1\40\1\0\1\30\34\5\1\41"+
    "\6\5\1\42\4\5\1\43\2\5\1\6\1\0\1\5"+
    "\1\40\1\30\4\5\1\44\2\5\1\45\27\5\1\46"+
    "\4\5\1\47\1\5\1\50\4\5\1\6\1\0\1\5"+
    "\1\30\6\5\1\51\5\5\1\52\1\53\5\5\1\54"+
    "\10\5\1\55\4\5\1\56\1\5\1\57\1\60\1\5"+
    "\1\61\1\0\1\5\1\30\1\62\6\5\1\63\1\64"+
    "\3\5\1\65\2\5\1\66\11\5\1\67\4\5\1\70"+
    "\1\5\1\30\1\5\1\71\1\5\1\72\1\73\1\5"+
    "\1\74\1\5\1\75\2\5\1\76\1\77\1\100\2\5"+
    "\1\101\2\5\1\102\4\5\1\70\1\5\1\30\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\2\5\1\111\1\5"+
    "\1\112\1\5\1\113\1\5\1\70\1\5\1\30\2\5"+
    "\1\114\1\115\1\116\1\5\1\30\3\5\1\30\1\117"+
    "\1\120\1\5\1\30\1\5\1\30\1\5\1\30\1\5"+
    "\1\30\1\5\1\30\1\5\1\30\1\5\1\30\1\5"+
    "\1\30\1\5\1\30\1\5\1\30\1\5\1\30\1\5"+
    "\1\30\1\5\1\30\1\5\1\30\1\5\1\30\1\5"+
    "\1\30\1\5\1\30\1\5\1\30\1\5\1\30\1\5"+
    "\1\30\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\60\0\u01b0\0\u01e0\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\u0210\0\u0240\0\60"+
    "\0\60\0\60\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0540\0\u0150\0\u0570\0\220\0\u05a0\0\u05d0\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u01b0"+
    "\0\60\0\60\0\60\0\60\0\60\0\u0600\0\u0780\0\u07b0"+
    "\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930"+
    "\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0"+
    "\0\u0ae0\0\u0b10\0\u0b40\0\u0600\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80"+
    "\0\u06c0\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u13e0\0\u0e10\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1500\0\u0e10\0\u1530\0\u1560\0\u1590\0\u15c0\0\u0e10"+
    "\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740"+
    "\0\u1770\0\u17a0\0\u17d0\0\u16b0\0\u1800\0\u1830\0\u16b0\0\u1860"+
    "\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u16b0\0\u1cb0"+
    "\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u16b0\0\u1dd0\0\u1e00"+
    "\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80"+
    "\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u1ef0\0\u2070\0\u20a0\0\u20d0"+
    "\0\u2100\0\u2130\0\u1ef0\0\u1ef0\0\u2160\0\u2190\0\u21c0\0\u21f0"+
    "\0\u2220\0\u1ef0\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340"+
    "\0\u2370\0\u23a0\0\u1ef0\0\u23d0\0\u2400\0\u2430\0\u2460\0\u1ef0"+
    "\0\u2490\0\u1ef0\0\u1ef0\0\u24c0\0\u1ef0\0\u24f0\0\u2520\0\u2550"+
    "\0\u2520\0\u2580\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u2670\0\u2520"+
    "\0\u2520\0\u26a0\0\u26d0\0\u2700\0\u2520\0\u2730\0\u2760\0\u2520"+
    "\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0"+
    "\0\u2910\0\u2520\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30"+
    "\0\u2a60\0\u2a90\0\u2a30\0\u2ac0\0\u2a30\0\u2a30\0\u2af0\0\u2a30"+
    "\0\u2b20\0\u2a30\0\u2b50\0\u2b80\0\u2a30\0\u2a30\0\u2a30\0\u2bb0"+
    "\0\u2be0\0\u2a30\0\u2c10\0\u2c40\0\u2a30\0\u2c70\0\u2ca0\0\u2cd0"+
    "\0\u2d00\0\u2d30\0\u2d60\0\u2d90\0\u2d60\0\u2d60\0\u2d60\0\u2d60"+
    "\0\u2d60\0\u2d60\0\u2dc0\0\u2df0\0\u2d60\0\u2e20\0\u2d60\0\u2e50"+
    "\0\u2d60\0\u2e80\0\60\0\u2eb0\0\u2ee0\0\u2f10\0\u2f40\0\u2eb0"+
    "\0\u2eb0\0\u2eb0\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060"+
    "\0\u3030\0\u3030\0\u3090\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180"+
    "\0\u31b0\0\u31e0\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300"+
    "\0\u3330\0\u3360\0\u3390\0\u33c0\0\u33f0\0\u3420\0\u3450\0\u3480"+
    "\0\u34b0\0\u34e0\0\u3510\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600"+
    "\0\u3630\0\u3660\0\u3690\0\u36c0\0\u36f0\0\u3720\0\u3750\0\u3780"+
    "\0\u37b0\0\u37e0\0\u0540";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\1\12\1\13\1\12\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\6\1\34\1\6\1\35\1\36"+
    "\1\37\1\40\1\41\1\6\1\42\1\43\1\44\1\45"+
    "\1\46\1\6\1\47\1\50\2\6\1\51\61\0\1\3"+
    "\2\0\3\52\1\53\1\54\22\0\25\52\1\0\1\55"+
    "\5\0\1\53\1\56\50\0\1\55\1\0\1\57\3\0"+
    "\1\53\1\56\50\0\1\60\2\0\1\60\1\52\1\60"+
    "\1\61\1\60\22\0\25\60\1\0\1\52\2\0\3\52"+
    "\1\61\1\52\22\0\25\52\1\0\1\62\57\0\1\63"+
    "\2\64\1\60\1\52\1\60\1\61\1\60\22\0\1\65"+
    "\11\60\1\66\4\60\1\67\5\60\12\70\1\71\45\70"+
    "\14\0\1\72\57\0\1\73\57\0\1\74\11\0\1\75"+
    "\32\0\1\60\2\0\1\60\1\52\1\60\1\61\1\60"+
    "\22\0\3\60\1\76\5\60\1\77\13\60\1\0\1\60"+
    "\2\0\1\60\1\52\1\60\1\61\1\100\22\0\11\60"+
    "\1\101\13\60\1\0\1\60\2\0\1\60\1\52\1\60"+
    "\1\61\1\60\22\0\3\60\1\102\1\60\1\103\1\60"+
    "\1\104\15\60\1\0\1\60\2\0\1\60\1\52\1\60"+
    "\1\61\1\60\22\0\1\60\1\105\1\106\1\60\1\107"+
    "\1\60\1\110\5\60\1\111\1\112\7\60\1\0\1\60"+
    "\2\0\1\60\1\52\1\60\1\61\1\113\22\0\7\60"+
    "\1\114\15\60\1\0\1\60\2\0\1\60\1\52\1\60"+
    "\1\61\1\60\22\0\1\115\12\60\1\116\6\60\1\117"+
    "\2\60\1\0\1\60\2\0\1\60\1\52\1\60\1\61"+
    "\1\60\22\0\5\60\1\120\1\60\1\121\1\60\1\122"+
    "\13\60\1\0\1\60\2\0\1\60\1\52\1\60\1\61"+
    "\1\123\22\0\7\60\1\124\15\60\1\0\1\60\2\0"+
    "\1\60\1\52\1\60\1\61\1\60\22\0\7\60\1\125"+
    "\15\60\1\0\1\60\2\0\1\60\1\52\1\60\1\61"+
    "\1\60\22\0\2\60\1\126\2\60\1\127\1\60\1\130"+
    "\15\60\1\0\1\60\2\0\1\60\1\52\1\60\1\61"+
    "\1\60\22\0\3\60\1\131\21\60\1\0\1\60\2\0"+
    "\1\60\1\52\1\60\1\61\1\132\22\0\5\60\1\133"+
    "\17\60\1\0\1\60\2\0\1\60\1\52\1\60\1\61"+
    "\1\60\22\0\7\60\1\134\15\60\1\0\1\60\2\0"+
    "\1\60\1\52\1\60\1\61\1\60\22\0\5\60\1\135"+
    "\17\60\1\0\1\60\2\0\1\60\1\52\1\60\1\61"+
    "\1\136\22\0\7\60\1\137\15\60\1\0\1\52\2\0"+
    "\3\52\1\0\1\52\22\0\25\52\1\0\1\140\2\64"+
    "\3\52\1\0\1\52\22\0\25\52\1\0\1\141\2\64"+
    "\54\0\3\142\1\143\7\142\1\0\44\142\1\0\1\144"+
    "\2\0\1\144\1\52\1\144\1\0\1\144\22\0\25\144"+
    "\4\0\3\145\1\0\1\145\22\0\25\145\1\0\1\62"+
    "\5\0\1\146\1\56\50\0\1\147\2\0\1\144\1\52"+
    "\1\144\1\0\1\144\22\0\25\144\1\0\1\141\57\0"+
    "\1\144\2\0\1\144\1\52\1\144\1\0\1\144\22\0"+
    "\1\144\1\150\2\144\1\151\20\144\1\0\1\144\2\0"+
    "\1\144\1\52\1\144\1\0\1\144\22\0\14\144\1\152"+
    "\10\144\1\0\1\144\2\0\1\144\1\52\1\144\1\0"+
    "\1\153\22\0\25\144\1\0\1\144\2\0\1\144\1\52"+
    "\1\144\1\0\1\144\22\0\16\144\1\154\6\144\1\0"+
    "\1\144\2\0\1\144\1\52\1\144\1\0\1\144\22\0"+
    "\1\144\1\155\16\144\1\156\4\144\1\0\1\144\2\0"+
    "\1\144\1\52\1\144\1\0\1\144\22\0\1\144\1\157"+
    "\23\144\1\0\1\144\2\0\1\144\1\52\1\144\1\0"+
    "\1\144\22\0\2\144\1\160\22\144\1\0\1\144\2\0"+
    "\1\144\1\52\1\144\1\0\1\144\22\0\2\144\1\161"+
    "\3\144\1\162\5\144\1\163\1\144\1\164\6\144\1\0"+
    "\1\144\2\0\1\144\1\52\1\144\1\0\1\144\22\0"+
    "\4\144\1\165\20\144\1\0\1\144\2\0\1\144\1\52"+
    "\1\144\1\0\1\144\22\0\2\144\1\166\22\144\1\0"+
    "\1\144\2\0\1\144\1\52\1\144\1\0\1\144\22\0"+
    "\2\144\1\167\22\144\1\0\1\144\2\0\1\144\1\52"+
    "\1\144\1\0\1\170\22\0\25\144\1\0\1\144\2\0"+
    "\1\144\1\52\1\144\1\0\1\171\22\0\25\144\1\0"+
    "\1\144\2\0\1\144\1\52\1\144\1\0\1\144\22\0"+
    "\5\144\1\172\17\144\1\0\1\144\2\0\1\144\1\52"+
    "\1\144\1\0\1\144\22\0\5\144\1\173\17\144\1\0"+
    "\1\144\2\0\1\144\1\52\1\144\1\0\1\144\22\0"+
    "\1\144\1\174\1\175\1\144\1\176\20\144\1\0\1\144"+
    "\2\0\1\144\1\52\1\144\1\0\1\144\22\0\2\144"+
    "\1\177\22\144\1\0\1\144\2\0\1\144\1\52\1\144"+
    "\1\0\1\144\22\0\7\144\1\200\15\144\1\0\1\144"+
    "\2\0\1\144\1\52\1\144\1\0\1\144\22\0\14\144"+
    "\1\201\10\144\1\0\1\144\2\0\1\144\1\52\1\144"+
    "\1\0\1\144\22\0\23\144\1\202\1\144\1\0\1\144"+
    "\2\0\1\144\1\52\1\144\1\0\1\144\22\0\16\144"+
    "\1\203\6\144\1\0\1\144\2\0\1\144\1\52\1\144"+
    "\1\0\1\144\22\0\1\204\16\144\1\205\5\144\1\0"+
    "\1\144\2\0\1\144\1\52\1\144\1\0\1\144\22\0"+
    "\1\206\24\144\1\0\1\144\2\0\1\144\1\52\1\144"+
    "\1\0\1\144\22\0\20\144\1\207\4\144\1\0\1\144"+
    "\2\0\1\144\1\52\1\144\1\0\1\210\22\0\25\144"+
    "\1\0\1\144\2\0\1\144\1\52\1\144\1\0\1\144"+
    "\22\0\7\144\1\211\15\144\1\0\1\144\2\0\1\144"+
    "\1\52\1\144\1\0\1\144\22\0\2\144\1\212\22\144"+
    "\1\0\1\144\2\0\1\144\1\52\1\144\1\0\1\144"+
    "\22\0\1\213\24\144\1\0\1\144\2\0\1\144\1\52"+
    "\1\144\1\0\1\144\22\0\3\144\1\214\21\144\1\0"+
    "\1\144\2\0\1\144\1\52\1\144\1\0\1\215\22\0"+
    "\25\144\1\0\1\144\2\0\1\144\1\52\1\144\1\0"+
    "\1\144\22\0\2\144\1\216\22\144\1\0\1\144\2\0"+
    "\1\144\1\52\1\144\1\0\1\144\22\0\2\144\1\217"+
    "\22\144\1\0\1\144\2\0\1\144\1\52\1\144\1\0"+
    "\1\144\22\0\22\144\1\220\2\144\1\0\1\144\2\0"+
    "\1\144\1\52\1\144\1\0\1\144\22\0\2\144\1\221"+
    "\22\144\1\0\1\144\2\0\1\144\1\52\1\144\1\0"+
    "\1\144\22\0\6\144\1\222\16\144\1\0\1\140\2\0"+
    "\3\52\1\0\1\52\22\0\25\52\13\142\1\0\44\142"+
    "\3\143\1\223\7\143\1\224\44\143\1\0\1\225\2\0"+
    "\1\225\1\52\1\225\1\0\1\225\22\0\25\225\7\0"+
    "\1\61\51\0\1\226\57\0\1\227\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\25\225\1\0\1\225\2\0"+
    "\1\225\1\52\1\225\1\0\1\230\22\0\25\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\231\22\0"+
    "\25\225\1\0\1\225\2\0\1\225\1\52\1\225\1\0"+
    "\1\232\22\0\25\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\4\225\1\233\20\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\3\225\1\234\21\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\3\225\1\235\21\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\2\225\1\236\22\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\5\225\1\237\17\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\1\225\1\240\23\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\5\225\1\241\12\225\1\242"+
    "\4\225\1\0\1\225\2\0\1\225\1\52\1\225\1\0"+
    "\1\243\22\0\25\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\1\225\1\244\23\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\7\225\1\245\15\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\16\225\1\246\6\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\5\225\1\247\17\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\250\22\0\7\225\1\251\15\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\16\225\1\252\6\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\16\225\1\253\6\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\20\225\1\254\4\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\17\225\1\255\5\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\256\22\0"+
    "\25\225\1\0\1\225\2\0\1\225\1\52\1\225\1\0"+
    "\1\257\22\0\25\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\7\225\1\260\6\225\1\261"+
    "\6\225\1\0\1\225\2\0\1\225\1\52\1\225\1\0"+
    "\1\262\22\0\25\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\4\225\1\263\20\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\2\225\1\264\22\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\11\225\1\265\13\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\12\225\1\266\12\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\3\225\1\267\21\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\4\225\1\270\20\225\1\0\1\225\2\0\1\225\1\52"+
    "\1\225\1\0\1\225\22\0\11\225\1\271\13\225\1\0"+
    "\1\225\2\0\1\225\1\52\1\225\1\0\1\225\22\0"+
    "\1\272\24\225\1\0\1\225\2\0\1\225\1\52\1\225"+
    "\1\0\1\225\22\0\1\273\24\225\1\0\1\225\2\0"+
    "\1\225\1\52\1\225\1\0\1\225\22\0\5\225\1\274"+
    "\17\225\1\0\1\225\2\0\1\225\1\52\1\225\1\0"+
    "\1\225\22\0\16\225\1\275\6\225\1\0\1\225\2\0"+
    "\1\225\1\52\1\225\1\0\1\225\22\0\2\225\1\276"+
    "\22\225\1\0\1\225\2\0\1\225\1\52\1\225\1\0"+
    "\1\225\22\0\20\225\1\277\4\225\1\0\1\225\2\0"+
    "\1\225\1\52\1\225\1\0\1\225\22\0\5\225\1\300"+
    "\17\225\1\0\1\225\2\0\1\225\1\52\1\225\1\0"+
    "\1\225\22\0\6\225\1\301\16\225\1\0\1\225\2\0"+
    "\1\225\1\52\1\225\1\0\1\302\22\0\25\225\3\143"+
    "\1\303\7\143\1\224\44\143\3\224\1\304\54\224\1\0"+
    "\1\305\2\0\1\305\1\52\1\305\1\0\1\305\22\0"+
    "\25\305\1\0\1\226\5\0\1\146\51\0\1\306\2\0"+
    "\1\305\1\52\1\305\1\0\1\305\22\0\25\305\1\0"+
    "\1\305\2\0\1\305\1\52\1\305\1\0\1\305\22\0"+
    "\2\305\1\307\22\305\1\0\1\305\2\0\1\305\1\52"+
    "\1\305\1\0\1\305\22\0\1\310\24\305\1\0\1\305"+
    "\2\0\1\305\1\52\1\305\1\0\1\305\22\0\2\305"+
    "\1\311\22\305\1\0\1\305\2\0\1\305\1\52\1\305"+
    "\1\0\1\305\22\0\11\305\1\312\13\305\1\0\1\305"+
    "\2\0\1\305\1\52\1\305\1\0\1\305\22\0\2\305"+
    "\1\313\22\305\1\0\1\305\2\0\1\305\1\52\1\305"+
    "\1\0\1\314\22\0\25\305\1\0\1\305\2\0\1\305"+
    "\1\52\1\305\1\0\1\305\22\0\3\305\1\315\21\305"+
    "\1\0\1\305\2\0\1\305\1\52\1\305\1\0\1\305"+
    "\22\0\4\305\1\316\20\305\1\0\1\305\2\0\1\305"+
    "\1\52\1\305\1\0\1\305\22\0\5\305\1\317\17\305"+
    "\1\0\1\305\2\0\1\305\1\52\1\305\1\0\1\305"+
    "\22\0\1\320\24\305\1\0\1\305\2\0\1\305\1\52"+
    "\1\305\1\0\1\305\22\0\11\305\1\321\13\305\1\0"+
    "\1\305\2\0\1\305\1\52\1\305\1\0\1\305\22\0"+
    "\15\305\1\322\7\305\1\0\1\305\2\0\1\305\1\52"+
    "\1\305\1\0\1\305\22\0\3\305\1\323\21\305\1\0"+
    "\1\305\2\0\1\305\1\52\1\305\1\0\1\305\22\0"+
    "\12\305\1\324\12\305\1\0\1\305\2\0\1\305\1\52"+
    "\1\305\1\0\1\305\22\0\20\305\1\325\4\305\1\0"+
    "\1\305\2\0\1\305\1\52\1\305\1\0\1\305\22\0"+
    "\15\305\1\326\7\305\1\0\1\305\2\0\1\305\1\52"+
    "\1\305\1\0\1\327\22\0\25\305\1\0\1\305\2\0"+
    "\1\305\1\52\1\305\1\0\1\305\22\0\5\305\1\330"+
    "\17\305\1\0\1\305\2\0\1\305\1\52\1\305\1\0"+
    "\1\305\22\0\5\305\1\331\17\305\1\0\1\305\2\0"+
    "\1\305\1\52\1\305\1\0\1\305\22\0\3\305\1\332"+
    "\21\305\1\0\1\305\2\0\1\305\1\52\1\305\1\0"+
    "\1\305\22\0\1\333\24\305\1\0\1\305\2\0\1\305"+
    "\1\52\1\305\1\0\1\305\22\0\4\305\1\334\20\305"+
    "\1\0\1\305\2\0\1\305\1\52\1\305\1\0\1\305"+
    "\22\0\13\305\1\335\11\305\1\0\1\305\2\0\1\305"+
    "\1\52\1\305\1\0\1\305\22\0\5\305\1\336\17\305"+
    "\1\0\1\305\2\0\1\305\1\52\1\305\1\0\1\305"+
    "\22\0\4\305\1\337\20\305\1\0\1\305\2\0\1\305"+
    "\1\52\1\305\1\0\1\305\22\0\7\305\1\340\15\305"+
    "\1\0\1\305\2\0\1\305\1\52\1\305\1\0\1\305"+
    "\22\0\7\305\1\341\15\305\1\0\1\305\2\0\1\305"+
    "\1\52\1\305\1\0\1\305\22\0\7\305\1\342\15\305"+
    "\1\0\1\305\2\0\1\305\1\52\1\305\1\0\1\305"+
    "\22\0\3\305\1\343\21\305\1\0\1\305\2\0\1\305"+
    "\1\52\1\305\1\0\1\305\22\0\7\305\1\344\15\305"+
    "\1\0\1\305\2\0\1\305\1\52\1\305\1\0\1\305"+
    "\22\0\7\305\1\345\15\305\1\0\1\305\2\0\1\305"+
    "\1\52\1\305\1\0\1\305\22\0\1\305\1\346\23\305"+
    "\1\0\1\305\2\0\1\305\1\52\1\305\1\0\1\305"+
    "\22\0\4\305\1\347\20\305\1\0\1\305\2\0\1\305"+
    "\1\52\1\305\1\0\1\305\22\0\24\305\1\350\1\0"+
    "\1\305\2\0\1\305\1\52\1\305\1\0\1\351\22\0"+
    "\25\305\1\0\1\305\2\0\1\305\1\52\1\305\1\0"+
    "\1\305\22\0\3\305\1\352\21\305\1\0\1\305\2\0"+
    "\1\305\1\52\1\305\1\0\1\305\22\0\2\305\1\353"+
    "\22\305\1\0\1\305\2\0\1\305\1\52\1\305\1\0"+
    "\1\305\22\0\5\305\1\354\17\305\1\0\1\305\2\0"+
    "\1\305\1\52\1\305\1\0\1\305\22\0\3\305\1\355"+
    "\21\305\3\143\1\142\7\143\1\224\44\143\3\224\1\356"+
    "\54\224\1\0\1\357\2\0\1\357\1\52\1\357\1\0"+
    "\1\357\22\0\25\357\1\0\1\360\2\0\1\357\1\52"+
    "\1\357\1\0\1\357\22\0\25\357\1\0\1\357\2\0"+
    "\1\357\1\52\1\357\1\0\1\357\22\0\3\357\1\361"+
    "\21\357\1\0\1\357\2\0\1\357\1\52\1\357\1\0"+
    "\1\357\22\0\6\357\1\362\16\357\1\0\1\357\2\0"+
    "\1\357\1\52\1\357\1\0\1\357\22\0\5\357\1\363"+
    "\17\357\1\0\1\357\2\0\1\357\1\52\1\357\1\0"+
    "\1\357\22\0\1\357\1\364\23\357\1\0\1\357\2\0"+
    "\1\357\1\52\1\357\1\0\1\357\22\0\1\365\24\357"+
    "\1\0\1\357\2\0\1\357\1\52\1\357\1\0\1\357"+
    "\22\0\12\357\1\366\12\357\1\0\1\357\2\0\1\357"+
    "\1\52\1\357\1\0\1\357\22\0\1\357\1\367\23\357"+
    "\1\0\1\357\2\0\1\357\1\52\1\357\1\0\1\357"+
    "\22\0\2\357\1\370\22\357\1\0\1\357\2\0\1\357"+
    "\1\52\1\357\1\0\1\357\22\0\5\357\1\371\17\357"+
    "\1\0\1\357\2\0\1\357\1\52\1\357\1\0\1\357"+
    "\22\0\2\357\1\372\22\357\1\0\1\357\2\0\1\357"+
    "\1\52\1\357\1\0\1\357\22\0\2\357\1\373\22\357"+
    "\1\0\1\357\2\0\1\357\1\52\1\357\1\0\1\357"+
    "\22\0\16\357\1\374\6\357\1\0\1\357\2\0\1\357"+
    "\1\52\1\357\1\0\1\357\22\0\5\357\1\375\17\357"+
    "\1\0\1\357\2\0\1\357\1\52\1\357\1\0\1\357"+
    "\22\0\2\357\1\376\22\357\1\0\1\357\2\0\1\357"+
    "\1\52\1\357\1\0\1\357\22\0\1\377\24\357\1\0"+
    "\1\357\2\0\1\357\1\52\1\357\1\0\1\357\22\0"+
    "\2\357\1\u0100\22\357\1\0\1\357\2\0\1\357\1\52"+
    "\1\357\1\0\1\u0101\22\0\25\357\1\0\1\357\2\0"+
    "\1\357\1\52\1\357\1\0\1\357\22\0\21\357\1\u0102"+
    "\3\357\1\0\1\357\2\0\1\357\1\52\1\357\1\0"+
    "\1\357\22\0\5\357\1\u0103\17\357\1\0\1\357\2\0"+
    "\1\357\1\52\1\357\1\0\1\357\22\0\2\357\1\u0104"+
    "\22\357\1\0\1\357\2\0\1\357\1\52\1\357\1\0"+
    "\1\357\22\0\4\357\1\u0105\20\357\1\0\1\357\2\0"+
    "\1\357\1\52\1\357\1\0\1\357\22\0\5\357\1\u0106"+
    "\17\357\1\0\1\357\2\0\1\357\1\52\1\357\1\0"+
    "\1\357\22\0\13\357\1\u0107\11\357\1\0\1\357\2\0"+
    "\1\357\1\52\1\357\1\0\1\u0108\22\0\25\357\1\0"+
    "\1\357\2\0\1\357\1\52\1\357\1\0\1\357\22\0"+
    "\3\357\1\u0109\21\357\1\0\1\357\2\0\1\357\1\52"+
    "\1\357\1\0\1\357\22\0\2\357\1\u010a\22\357\1\0"+
    "\1\357\2\0\1\357\1\52\1\357\1\0\1\357\22\0"+
    "\2\357\1\u010b\22\357\1\0\1\357\2\0\1\357\1\52"+
    "\1\357\1\0\1\357\22\0\7\357\1\u010c\15\357\1\0"+
    "\1\357\2\0\1\357\1\52\1\357\1\0\1\357\22\0"+
    "\5\357\1\u010d\17\357\1\0\1\357\2\0\1\357\1\52"+
    "\1\357\1\0\1\357\22\0\6\357\1\u010e\16\357\3\224"+
    "\1\u010f\54\224\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110"+
    "\1\0\1\u0110\22\0\25\u0110\1\0\1\u0111\2\0\1\u0110"+
    "\1\52\1\u0110\1\0\1\u0110\22\0\25\u0110\1\0\1\u0110"+
    "\2\0\1\u0110\1\52\1\u0110\1\0\1\u0112\22\0\25\u0110"+
    "\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110\1\0\1\u0110"+
    "\22\0\2\u0110\1\u0113\22\u0110\1\0\1\u0110\2\0\1\u0110"+
    "\1\52\1\u0110\1\0\1\u0110\22\0\5\u0110\1\u0114\17\u0110"+
    "\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110\1\0\1\u0110"+
    "\22\0\3\u0110\1\u0115\21\u0110\1\0\1\u0110\2\0\1\u0110"+
    "\1\52\1\u0110\1\0\1\u0110\22\0\5\u0110\1\u0116\17\u0110"+
    "\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110\1\0\1\u0117"+
    "\22\0\25\u0110\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110"+
    "\1\0\1\u0110\22\0\5\u0110\1\u0118\17\u0110\1\0\1\u0110"+
    "\2\0\1\u0110\1\52\1\u0110\1\0\1\u0110\22\0\5\u0110"+
    "\1\u0119\17\u0110\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110"+
    "\1\0\1\u0110\22\0\3\u0110\1\u011a\21\u0110\1\0\1\u0110"+
    "\2\0\1\u0110\1\52\1\u0110\1\0\1\u0110\22\0\5\u0110"+
    "\1\u011b\17\u0110\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110"+
    "\1\0\1\u0110\22\0\1\u0110\1\u011c\23\u0110\1\0\1\u0110"+
    "\2\0\1\u0110\1\52\1\u0110\1\0\1\u0110\22\0\2\u0110"+
    "\1\u011d\22\u0110\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110"+
    "\1\0\1\u0110\22\0\5\u0110\1\u011e\17\u0110\1\0\1\u0110"+
    "\2\0\1\u0110\1\52\1\u0110\1\0\1\u0110\22\0\16\u0110"+
    "\1\u011f\6\u0110\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110"+
    "\1\0\1\u0110\22\0\5\u0110\1\u0120\17\u0110\1\0\1\u0110"+
    "\2\0\1\u0110\1\52\1\u0110\1\0\1\u0110\22\0\7\u0110"+
    "\1\u0121\15\u0110\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110"+
    "\1\0\1\u0110\22\0\2\u0110\1\u0122\22\u0110\1\0\1\u0110"+
    "\2\0\1\u0110\1\52\1\u0110\1\0\1\u0110\22\0\7\u0110"+
    "\1\u0123\15\u0110\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110"+
    "\1\0\1\u0110\22\0\2\u0110\1\u0124\22\u0110\1\0\1\u0110"+
    "\2\0\1\u0110\1\52\1\u0110\1\0\1\u0110\22\0\1\u0125"+
    "\24\u0110\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110\1\0"+
    "\1\u0110\22\0\5\u0110\1\u0126\17\u0110\1\0\1\u0110\2\0"+
    "\1\u0110\1\52\1\u0110\1\0\1\u0110\22\0\14\u0110\1\u0127"+
    "\10\u0110\1\0\1\u0110\2\0\1\u0110\1\52\1\u0110\1\0"+
    "\1\u0110\22\0\1\u0128\24\u0110\1\0\1\u0110\2\0\1\u0110"+
    "\1\52\1\u0110\1\0\1\u0129\22\0\25\u0110\3\0\1\u012a"+
    "\55\0\1\u012b\2\0\1\u012b\1\52\1\u012b\1\0\1\u012b"+
    "\22\0\25\u012b\1\0\1\u012c\2\0\1\u012b\1\52\1\u012b"+
    "\1\0\1\u012b\22\0\25\u012b\1\0\1\u012b\2\0\1\u012b"+
    "\1\52\1\u012b\1\0\1\u012b\22\0\2\u012b\1\u012d\22\u012b"+
    "\1\0\1\u012b\2\0\1\u012b\1\52\1\u012b\1\0\1\u012b"+
    "\22\0\2\u012b\1\u012e\22\u012b\1\0\1\u012b\2\0\1\u012b"+
    "\1\52\1\u012b\1\0\1\u012b\22\0\2\u012b\1\u012f\22\u012b"+
    "\1\0\1\u012b\2\0\1\u012b\1\52\1\u012b\1\0\1\u012b"+
    "\22\0\2\u012b\1\u0130\22\u012b\1\0\1\u012b\2\0\1\u012b"+
    "\1\52\1\u012b\1\0\1\u012b\22\0\2\u012b\1\u0131\22\u012b"+
    "\1\0\1\u012b\2\0\1\u012b\1\52\1\u012b\1\0\1\u0132"+
    "\22\0\25\u012b\1\0\1\u012b\2\0\1\u012b\1\52\1\u012b"+
    "\1\0\1\u012b\22\0\4\u012b\1\u0133\20\u012b\1\0\1\u012b"+
    "\2\0\1\u012b\1\52\1\u012b\1\0\1\u012b\22\0\3\u012b"+
    "\1\u0134\21\u012b\1\0\1\u012b\2\0\1\u012b\1\52\1\u012b"+
    "\1\0\1\u012b\22\0\2\u012b\1\u0135\22\u012b\1\0\1\u012b"+
    "\2\0\1\u012b\1\52\1\u012b\1\0\1\u012b\22\0\6\u012b"+
    "\1\u0136\16\u012b\1\0\1\u012b\2\0\1\u012b\1\52\1\u012b"+
    "\1\0\1\u012b\22\0\12\u012b\1\u0137\12\u012b\1\0\1\u012b"+
    "\2\0\1\u012b\1\52\1\u012b\1\0\1\u012b\22\0\5\u012b"+
    "\1\u0138\17\u012b\1\0\1\u012b\2\0\1\u012b\1\52\1\u012b"+
    "\1\0\1\u012b\22\0\3\u012b\1\u0139\21\u012b\1\0\1\u012b"+
    "\2\0\1\u012b\1\52\1\u012b\1\0\1\u012b\22\0\2\u012b"+
    "\1\u013a\22\u012b\3\0\1\u013b\55\0\1\u013c\2\0\1\u013c"+
    "\1\52\1\u013c\1\0\1\u013c\22\0\25\u013c\1\0\1\u013d"+
    "\2\0\1\u013c\1\52\1\u013c\1\0\1\u013c\22\0\25\u013c"+
    "\1\0\1\u013c\2\0\1\u013c\1\52\1\u013c\1\0\1\u013c"+
    "\22\0\7\u013c\1\u013e\15\u013c\1\0\1\u013c\2\0\1\u013c"+
    "\1\52\1\u013c\1\0\1\u013c\22\0\1\u013f\24\u013c\1\0"+
    "\1\u013c\2\0\1\u013c\1\52\1\u013c\1\0\1\u013c\22\0"+
    "\5\u013c\1\u0140\17\u013c\1\0\1\u013c\2\0\1\u013c\1\52"+
    "\1\u013c\1\0\1\u013c\22\0\16\u013c\1\u0141\6\u013c\1\0"+
    "\1\u013c\2\0\1\u013c\1\52\1\u013c\1\0\1\u013c\22\0"+
    "\3\u013c\1\u0142\21\u013c\1\0\1\u0143\2\0\1\u0143\1\52"+
    "\1\u0143\1\0\1\u0143\22\0\25\u0143\1\0\1\u0144\2\0"+
    "\1\u0143\1\52\1\u0143\1\0\1\u0143\22\0\25\u0143\1\0"+
    "\1\u0143\2\0\1\u0143\1\52\1\u0143\1\0\1\u0143\22\0"+
    "\3\u0143\1\u0145\21\u0143\1\0\1\u0143\2\0\1\u0143\1\52"+
    "\1\u0143\1\0\1\u0143\22\0\5\u0143\1\u0146\17\u0143\1\0"+
    "\1\u0147\2\0\1\u0147\1\52\1\u0147\1\0\1\u0147\22\0"+
    "\25\u0147\1\0\1\u0148\2\0\1\u0147\1\52\1\u0147\1\0"+
    "\1\u0147\22\0\25\u0147\1\0\1\u0147\2\0\1\u0147\1\52"+
    "\1\u0147\1\0\1\u0147\22\0\1\u0149\24\u0147\1\0\1\u0147"+
    "\2\0\1\u0147\1\52\1\u0147\1\0\1\u0147\22\0\2\u0147"+
    "\1\u014a\22\u0147\1\0\1\u014b\2\0\1\u014b\1\52\1\u014b"+
    "\1\0\1\u014b\22\0\25\u014b\1\0\1\u014c\2\0\1\u014b"+
    "\1\52\1\u014b\1\0\1\u014b\22\0\25\u014b\1\0\1\u014d"+
    "\2\0\1\u014d\1\52\1\u014d\1\0\1\u014d\22\0\25\u014d"+
    "\1\0\1\u014e\2\0\1\u014d\1\52\1\u014d\1\0\1\u014d"+
    "\22\0\25\u014d\1\0\1\u014f\2\0\1\u014f\1\52\1\u014f"+
    "\1\0\1\u014f\22\0\25\u014f\1\0\1\u0150\2\0\1\u014f"+
    "\1\52\1\u014f\1\0\1\u014f\22\0\25\u014f\1\0\1\u0151"+
    "\2\0\1\u0151\1\52\1\u0151\1\0\1\u0151\22\0\25\u0151"+
    "\1\0\1\u0152\2\0\1\u0151\1\52\1\u0151\1\0\1\u0151"+
    "\22\0\25\u0151\1\0\1\u0153\2\0\1\u0153\1\52\1\u0153"+
    "\1\0\1\u0153\22\0\25\u0153\1\0\1\u0154\2\0\1\u0153"+
    "\1\52\1\u0153\1\0\1\u0153\22\0\25\u0153\1\0\1\u0155"+
    "\2\0\1\u0155\1\52\1\u0155\1\0\1\u0155\22\0\25\u0155"+
    "\1\0\1\u0156\2\0\1\u0155\1\52\1\u0155\1\0\1\u0155"+
    "\22\0\25\u0155\1\0\1\u0157\2\0\1\u0157\1\52\1\u0157"+
    "\1\0\1\u0157\22\0\25\u0157\1\0\1\u0158\2\0\1\u0157"+
    "\1\52\1\u0157\1\0\1\u0157\22\0\25\u0157\1\0\1\u0159"+
    "\2\0\1\u0159\1\52\1\u0159\1\0\1\u0159\22\0\25\u0159"+
    "\1\0\1\u015a\2\0\1\u0159\1\52\1\u0159\1\0\1\u0159"+
    "\22\0\25\u0159\1\0\1\u015b\2\0\1\u015b\1\52\1\u015b"+
    "\1\0\1\u015b\22\0\25\u015b\1\0\1\u015c\2\0\1\u015b"+
    "\1\52\1\u015b\1\0\1\u015b\22\0\25\u015b\1\0\1\u015d"+
    "\2\0\1\u015d\1\52\1\u015d\1\0\1\u015d\22\0\25\u015d"+
    "\1\0\1\u015e\2\0\1\u015d\1\52\1\u015d\1\0\1\u015d"+
    "\22\0\25\u015d\1\0\1\u015f\2\0\1\u015f\1\52\1\u015f"+
    "\1\0\1\u015f\22\0\25\u015f\1\0\1\u0160\2\0\1\u015f"+
    "\1\52\1\u015f\1\0\1\u015f\22\0\25\u015f\1\0\1\u0161"+
    "\2\0\1\u0161\1\52\1\u0161\1\0\1\u0161\22\0\25\u0161"+
    "\1\0\1\u0162\2\0\1\u0161\1\52\1\u0161\1\0\1\u0161"+
    "\22\0\25\u0161\1\0\1\u0163\2\0\1\u0163\1\52\1\u0163"+
    "\1\0\1\u0163\22\0\25\u0163\1\0\1\u0164\2\0\1\u0163"+
    "\1\52\1\u0163\1\0\1\u0163\22\0\25\u0163\1\0\1\u0165"+
    "\2\0\1\u0165\1\52\1\u0165\1\0\1\u0165\22\0\25\u0165"+
    "\1\0\1\u0166\2\0\1\u0165\1\52\1\u0165\1\0\1\u0165"+
    "\22\0\25\u0165\1\0\1\u0167\2\0\1\u0167\1\52\1\u0167"+
    "\1\0\1\u0167\22\0\25\u0167\1\0\1\u0168\2\0\1\u0167"+
    "\1\52\1\u0167\1\0\1\u0167\22\0\25\u0167\1\0\1\u0169"+
    "\2\0\1\u0169\1\52\1\u0169\1\0\1\u0169\22\0\25\u0169"+
    "\1\0\1\u016a\2\0\1\u0169\1\52\1\u0169\1\0\1\u0169"+
    "\22\0\25\u0169\1\0\1\u016b\2\0\1\u016b\1\52\1\u016b"+
    "\1\0\1\u016b\22\0\25\u016b\1\0\1\u016c\2\0\1\u016b"+
    "\1\52\1\u016b\1\0\1\u016b\22\0\25\u016b\1\0\1\u016d"+
    "\2\0\1\u016d\1\52\1\u016d\1\0\1\u016d\22\0\25\u016d"+
    "\1\0\1\u016e\2\0\1\u016d\1\52\1\u016d\1\0\1\u016d"+
    "\22\0\25\u016d\1\0\1\u016f\2\0\1\u016f\1\52\1\u016f"+
    "\1\0\1\u016f\22\0\25\u016f\1\0\1\u0170\2\0\1\u016f"+
    "\1\52\1\u016f\1\0\1\u016f\22\0\25\u016f\1\0\1\u0171"+
    "\2\0\1\u0171\1\52\1\u0171\1\0\1\u0171\22\0\25\u0171"+
    "\1\0\1\u0172\2\0\1\u0171\1\52\1\u0171\1\0\1\u0171"+
    "\22\0\25\u0171\1\0\1\u0173\2\0\1\u0173\1\52\1\u0173"+
    "\1\0\1\u0173\22\0\25\u0173\1\0\1\140\2\0\1\u0173"+
    "\1\52\1\u0173\1\0\1\u0173\22\0\25\u0173";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\2\1\11\11\2\1\3\11"+
    "\20\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\3\1\1\0\5\11\50\1\1\0\55\1\1\0\57\1"+
    "\1\0\51\1\1\0\114\1\1\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;
    modelos.InformacionLexema c = new modelos.InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARRIBA;
          }
        case 81: break;
        case 12: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_O;
          }
        case 82: break;
        case 21: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMA;
          }
        case 83: break;
        case 40: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LEER;
          }
        case 84: break;
        case 2: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO;
          }
        case 85: break;
        case 65: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_INICIAR;
          }
        case 86: break;
        case 43: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ATRAS;
          }
        case 87: break;
        case 60: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CAPTURA;
          }
        case 88: break;
        case 3: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MAS;
          }
        case 89: break;
        case 5: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR;
          }
        case 90: break;
        case 54: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_APAGAR;
          }
        case 91: break;
        case 29: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DESIGUAL;
          }
        case 92: break;
        case 31: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SI;
          }
        case 93: break;
        case 55: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SEGUIR;
          }
        case 94: break;
        case 6: 
          { /*Ignore*/
          }
        case 95: break;
        case 52: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CADENA;
          }
        case 96: break;
        case 78: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VERDADERO;
          }
        case 97: break;
        case 48: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_GIRAR;
          }
        case 98: break;
        case 72: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ADELANTE;
          }
        case 99: break;
        case 19: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR;
          }
        case 100: break;
        case 33: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIN;
          }
        case 101: break;
        case 16: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_IZQ;
          }
        case 102: break;
        case 51: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARGAR;
          }
        case 103: break;
        case 18: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR;
          }
        case 104: break;
        case 10: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_DIVISION;
          }
        case 105: break;
        case 57: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ESPERAR;
          }
        case 106: break;
        case 36: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NULO;
          }
        case 107: break;
        case 64: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECIMAL;
          }
        case 108: break;
        case 45: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FALSO;
          }
        case 109: break;
        case 42: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CICLO;
          }
        case 110: break;
        case 74: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_MIENTRAS;
          }
        case 111: break;
        case 41: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CORTO;
          }
        case 112: break;
        case 44: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ABAJO;
          }
        case 113: break;
        case 30: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NO;
          }
        case 114: break;
        case 11: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_Y;
          }
        case 115: break;
        case 7: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMILLA_SIMPLE;
          }
        case 116: break;
        case 46: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARAV;
          }
        case 117: break;
        case 28: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR_QUE;
          }
        case 118: break;
        case 80: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DIRECCIONAR;
          }
        case 119: break;
        case 66: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FUNCION;
          }
        case 120: break;
        case 68: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_EJECUTAR;
          }
        case 121: break;
        case 50: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENTERO;
          }
        case 122: break;
        case 49: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VIDEO;
          }
        case 123: break;
        case 39: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARA;
          }
        case 124: break;
        case 34: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PIN;
          }
        case 125: break;
        case 70: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CALIBRAR;
          }
        case 126: break;
        case 75: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_BOOLEANO;
          }
        case 127: break;
        case 38: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIJO;
          }
        case 128: break;
        case 13: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_NEGACION;
          }
        case 129: break;
        case 37: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RUTA;
          }
        case 130: break;
        case 4: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MENOS;
          }
        case 131: break;
        case 35: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_HAZ;
          }
        case 132: break;
        case 14: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MODULO;
          }
        case 133: break;
        case 24: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_EXPONENTE;
          }
        case 134: break;
        case 71: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ACELERAR;
          }
        case 135: break;
        case 1: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR;
          }
        case 136: break;
        case 17: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_DER;
          }
        case 137: break;
        case 25: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return CADENA_TEXTO;
          }
        case 138: break;
        case 62: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DETENER;
          }
        case 139: break;
        case 58: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RETORNO;
          }
        case 140: break;
        case 27: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR_QUE;
          }
        case 141: break;
        case 79: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECLARACION;
          }
        case 142: break;
        case 61: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARREGLO;
          }
        case 143: break;
        case 63: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DERECHA;
          }
        case 144: break;
        case 8: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ASIGNACION;
          }
        case 145: break;
        case 77: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PRINCIPAL;
          }
        case 146: break;
        case 32: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_PUNTOS;
          }
        case 147: break;
        case 76: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IZQUIERDA;
          }
        case 148: break;
        case 67: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENCENDER;
          }
        case 149: break;
        case 23: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_DECIMAL;
          }
        case 150: break;
        case 47: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LARGO;
          }
        case 151: break;
        case 59: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_REGRESA;
          }
        case 152: break;
        case 26: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_IGUALDAD;
          }
        case 153: break;
        case 20: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DOS_PUNTOS;
          }
        case 154: break;
        case 73: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IMPRIMIR;
          }
        case 155: break;
        case 9: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_POR;
          }
        case 156: break;
        case 15: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PUNTO_COMA;
          }
        case 157: break;
        case 69: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARACTER;
          }
        case 158: break;
        case 22: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ARROBA;
          }
        case 159: break;
        case 56: 
          { 
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
