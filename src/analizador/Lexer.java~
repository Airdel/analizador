/* The following code was generated by JFlex 1.4.3 on 23/05/21 13:52 */

package analizador;
import java.io.*;
import static analizador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/05/21 13:52 from the specification file
 * <tt>C:/analizador/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\12\2\0\1\11\22\0\1\11\4\0\1\20\1\16"+
    "\1\0\1\22\1\23\1\14\1\2\1\0\1\3\1\7\1\15\12\1"+
    "\1\26\1\21\1\25\1\13\1\24\1\0\1\27\32\5\4\0\1\6"+
    "\1\0\1\35\1\45\1\34\1\36\1\10\1\40\1\50\1\51\1\37"+
    "\1\47\1\4\1\46\1\43\1\30\1\33\1\44\1\53\1\32\1\42"+
    "\1\31\1\41\1\54\3\4\1\52\1\0\1\17\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\17\5\1\0"+
    "\1\1\1\2\1\0\1\6\1\5\1\24\1\25\1\0"+
    "\3\5\1\26\1\27\1\30\1\31\25\5\1\32\13\5"+
    "\2\25\1\5\1\25\34\5\1\33\6\5\1\34\4\5"+
    "\1\35\3\5\1\25\4\5\1\36\2\5\1\37\27\5"+
    "\1\40\4\5\1\41\1\5\1\42\5\5\1\25\6\5"+
    "\1\43\5\5\1\44\1\45\5\5\1\46\10\5\1\47"+
    "\4\5\1\50\1\5\1\51\1\52\1\5\1\53\1\5"+
    "\1\25\1\54\6\5\1\55\1\56\3\5\1\57\2\5"+
    "\1\60\11\5\1\61\5\5\1\25\1\5\1\62\1\5"+
    "\1\63\1\64\1\5\1\65\1\5\1\66\2\5\1\67"+
    "\1\70\1\71\2\5\1\72\2\5\1\73\5\5\1\25"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\2\5\1\102"+
    "\1\5\1\103\1\5\1\104\2\5\1\25\2\5\1\105"+
    "\1\106\1\107\1\5\1\25\3\5\1\25\1\110\1\111"+
    "\1\5\1\25\1\5\1\25\1\5\1\25\1\5\1\25"+
    "\1\5\1\25\1\5\1\25\1\5\1\25\1\5\1\25"+
    "\1\5\1\25\1\5\1\25\1\5\1\25\1\5\1\25"+
    "\1\5\1\25\1\5\1\25\1\5\1\25\1\5\1\25"+
    "\1\5\1\25\1\5\1\25\1\5\1\25\1\5\1\25"+
    "\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\55\0\u0195\0\55\0\55\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\u01c2\0\u01ef\0\55\0\55\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u013b\0\u04bf"+
    "\0\207\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\55\0\55\0\55\0\u0546\0\u0681\0\u06ae"+
    "\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0546\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9"+
    "\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21"+
    "\0\u05cd\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4"+
    "\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c"+
    "\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u0c4e"+
    "\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u0c4e\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u0c4e\0\u1356\0\u1383\0\u13b0\0\u13dd"+
    "\0\u140a\0\u1437\0\u1464\0\u1491\0\u13b0\0\u14be\0\u14eb\0\u13b0"+
    "\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653"+
    "\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u13b0"+
    "\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u13b0\0\u1a31"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99"+
    "\0\u1bc6\0\u1bf3\0\u1c20\0\u1ae5\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4"+
    "\0\u1d01\0\u1ae5\0\u1ae5\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2"+
    "\0\u1ae5\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d"+
    "\0\u1f4a\0\u1ae5\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u1ae5\0\u202b"+
    "\0\u1ae5\0\u1ae5\0\u2058\0\u1ae5\0\u2085\0\u20b2\0\u2085\0\u20df"+
    "\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u2085\0\u2085\0\u21ed"+
    "\0\u221a\0\u2247\0\u2085\0\u2274\0\u22a1\0\u2085\0\u22ce\0\u22fb"+
    "\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2085"+
    "\0\u2463\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u2517"+
    "\0\u259e\0\u2517\0\u2517\0\u25cb\0\u2517\0\u25f8\0\u2517\0\u2625"+
    "\0\u2652\0\u2517\0\u2517\0\u2517\0\u267f\0\u26ac\0\u2517\0\u26d9"+
    "\0\u2706\0\u2517\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814"+
    "\0\u27e7\0\u27e7\0\u27e7\0\u27e7\0\u27e7\0\u27e7\0\u2841\0\u286e"+
    "\0\u27e7\0\u289b\0\u27e7\0\u28c8\0\u27e7\0\u28f5\0\u2922\0\u294f"+
    "\0\u297c\0\u29a9\0\u2922\0\u2922\0\u2922\0\u29d6\0\u2a03\0\u2a30"+
    "\0\u2a5d\0\u2a8a\0\u2ab7\0\u2a8a\0\u2a8a\0\u2ae4\0\u2b11\0\u2b3e"+
    "\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6"+
    "\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1\0\u2e0e"+
    "\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49\0\u2f76"+
    "\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1\0\u30de"+
    "\0\u310b\0\u3138\0\u3165\0\u3192\0\u31bf\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\2\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\6"+
    "\1\31\1\6\1\32\1\33\1\34\1\35\1\36\1\6"+
    "\1\37\1\40\1\41\1\42\1\43\1\6\1\44\1\45"+
    "\2\6\1\46\56\0\1\3\2\0\3\7\1\47\1\50"+
    "\17\0\25\7\1\0\1\51\5\0\1\47\1\52\45\0"+
    "\1\51\1\0\1\53\3\0\1\47\1\52\45\0\1\54"+
    "\2\0\1\54\1\7\1\54\1\0\1\54\17\0\25\54"+
    "\1\0\1\7\2\0\3\7\1\0\1\7\17\0\25\7"+
    "\1\0\1\55\54\0\1\56\2\57\1\54\1\7\1\54"+
    "\1\0\1\54\17\0\1\60\11\54\1\61\4\54\1\62"+
    "\5\54\13\0\1\63\54\0\1\64\54\0\1\65\42\0"+
    "\1\54\2\0\1\54\1\7\1\54\1\0\1\54\17\0"+
    "\3\54\1\66\5\54\1\67\13\54\1\0\1\54\2\0"+
    "\1\54\1\7\1\54\1\0\1\70\17\0\11\54\1\71"+
    "\13\54\1\0\1\54\2\0\1\54\1\7\1\54\1\0"+
    "\1\54\17\0\3\54\1\72\1\54\1\73\1\54\1\74"+
    "\15\54\1\0\1\54\2\0\1\54\1\7\1\54\1\0"+
    "\1\54\17\0\1\54\1\75\1\76\1\54\1\77\1\54"+
    "\1\100\5\54\1\101\1\102\7\54\1\0\1\54\2\0"+
    "\1\54\1\7\1\54\1\0\1\103\17\0\7\54\1\104"+
    "\15\54\1\0\1\54\2\0\1\54\1\7\1\54\1\0"+
    "\1\54\17\0\1\105\12\54\1\106\6\54\1\107\2\54"+
    "\1\0\1\54\2\0\1\54\1\7\1\54\1\0\1\54"+
    "\17\0\5\54\1\110\1\54\1\111\1\54\1\112\13\54"+
    "\1\0\1\54\2\0\1\54\1\7\1\54\1\0\1\113"+
    "\17\0\7\54\1\114\15\54\1\0\1\54\2\0\1\54"+
    "\1\7\1\54\1\0\1\54\17\0\7\54\1\115\15\54"+
    "\1\0\1\54\2\0\1\54\1\7\1\54\1\0\1\54"+
    "\17\0\2\54\1\116\2\54\1\117\1\54\1\120\15\54"+
    "\1\0\1\54\2\0\1\54\1\7\1\54\1\0\1\54"+
    "\17\0\3\54\1\121\21\54\1\0\1\54\2\0\1\54"+
    "\1\7\1\54\1\0\1\122\17\0\5\54\1\123\17\54"+
    "\1\0\1\54\2\0\1\54\1\7\1\54\1\0\1\54"+
    "\17\0\7\54\1\124\15\54\1\0\1\54\2\0\1\54"+
    "\1\7\1\54\1\0\1\54\17\0\5\54\1\125\17\54"+
    "\1\0\1\54\2\0\1\54\1\7\1\54\1\0\1\126"+
    "\17\0\7\54\1\127\15\54\1\0\1\130\2\57\3\7"+
    "\1\0\1\7\17\0\25\7\1\0\1\131\2\57\51\0"+
    "\12\53\1\0\42\53\1\0\1\132\2\0\1\132\1\7"+
    "\1\132\1\0\1\132\17\0\25\132\1\0\1\55\6\0"+
    "\1\52\45\0\1\133\2\0\1\132\1\7\1\132\1\0"+
    "\1\132\17\0\25\132\1\0\1\131\54\0\1\132\2\0"+
    "\1\132\1\7\1\132\1\0\1\132\17\0\1\132\1\134"+
    "\2\132\1\135\20\132\1\0\1\132\2\0\1\132\1\7"+
    "\1\132\1\0\1\132\17\0\14\132\1\136\10\132\1\0"+
    "\1\132\2\0\1\132\1\7\1\132\1\0\1\137\17\0"+
    "\25\132\1\0\1\132\2\0\1\132\1\7\1\132\1\0"+
    "\1\132\17\0\16\132\1\140\6\132\1\0\1\132\2\0"+
    "\1\132\1\7\1\132\1\0\1\132\17\0\1\132\1\141"+
    "\16\132\1\142\4\132\1\0\1\132\2\0\1\132\1\7"+
    "\1\132\1\0\1\132\17\0\1\132\1\143\23\132\1\0"+
    "\1\132\2\0\1\132\1\7\1\132\1\0\1\132\17\0"+
    "\2\132\1\144\22\132\1\0\1\132\2\0\1\132\1\7"+
    "\1\132\1\0\1\132\17\0\2\132\1\145\3\132\1\146"+
    "\5\132\1\147\1\132\1\150\6\132\1\0\1\132\2\0"+
    "\1\132\1\7\1\132\1\0\1\132\17\0\4\132\1\151"+
    "\20\132\1\0\1\132\2\0\1\132\1\7\1\132\1\0"+
    "\1\132\17\0\2\132\1\152\22\132\1\0\1\132\2\0"+
    "\1\132\1\7\1\132\1\0\1\132\17\0\2\132\1\153"+
    "\22\132\1\0\1\132\2\0\1\132\1\7\1\132\1\0"+
    "\1\154\17\0\25\132\1\0\1\132\2\0\1\132\1\7"+
    "\1\132\1\0\1\155\17\0\25\132\1\0\1\132\2\0"+
    "\1\132\1\7\1\132\1\0\1\132\17\0\5\132\1\156"+
    "\17\132\1\0\1\132\2\0\1\132\1\7\1\132\1\0"+
    "\1\132\17\0\5\132\1\157\17\132\1\0\1\132\2\0"+
    "\1\132\1\7\1\132\1\0\1\132\17\0\1\132\1\160"+
    "\1\161\1\132\1\162\20\132\1\0\1\132\2\0\1\132"+
    "\1\7\1\132\1\0\1\132\17\0\2\132\1\163\22\132"+
    "\1\0\1\132\2\0\1\132\1\7\1\132\1\0\1\132"+
    "\17\0\7\132\1\164\15\132\1\0\1\132\2\0\1\132"+
    "\1\7\1\132\1\0\1\132\17\0\14\132\1\165\10\132"+
    "\1\0\1\132\2\0\1\132\1\7\1\132\1\0\1\132"+
    "\17\0\23\132\1\166\1\132\1\0\1\132\2\0\1\132"+
    "\1\7\1\132\1\0\1\132\17\0\16\132\1\167\6\132"+
    "\1\0\1\132\2\0\1\132\1\7\1\132\1\0\1\132"+
    "\17\0\1\170\16\132\1\171\5\132\1\0\1\132\2\0"+
    "\1\132\1\7\1\132\1\0\1\132\17\0\1\172\24\132"+
    "\1\0\1\132\2\0\1\132\1\7\1\132\1\0\1\132"+
    "\17\0\20\132\1\173\4\132\1\0\1\132\2\0\1\132"+
    "\1\7\1\132\1\0\1\174\17\0\25\132\1\0\1\132"+
    "\2\0\1\132\1\7\1\132\1\0\1\132\17\0\7\132"+
    "\1\175\15\132\1\0\1\132\2\0\1\132\1\7\1\132"+
    "\1\0\1\132\17\0\2\132\1\176\22\132\1\0\1\132"+
    "\2\0\1\132\1\7\1\132\1\0\1\132\17\0\1\177"+
    "\24\132\1\0\1\132\2\0\1\132\1\7\1\132\1\0"+
    "\1\132\17\0\3\132\1\200\21\132\1\0\1\132\2\0"+
    "\1\132\1\7\1\132\1\0\1\201\17\0\25\132\1\0"+
    "\1\132\2\0\1\132\1\7\1\132\1\0\1\132\17\0"+
    "\2\132\1\202\22\132\1\0\1\132\2\0\1\132\1\7"+
    "\1\132\1\0\1\132\17\0\2\132\1\203\22\132\1\0"+
    "\1\132\2\0\1\132\1\7\1\132\1\0\1\132\17\0"+
    "\22\132\1\204\2\132\1\0\1\132\2\0\1\132\1\7"+
    "\1\132\1\0\1\132\17\0\2\132\1\205\22\132\1\0"+
    "\1\132\2\0\1\132\1\7\1\132\1\0\1\132\17\0"+
    "\6\132\1\206\16\132\1\0\1\130\2\0\3\7\1\0"+
    "\1\7\17\0\25\7\1\0\1\207\2\0\1\207\1\7"+
    "\1\207\1\0\1\207\17\0\25\207\1\0\1\210\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\25\207\1\0"+
    "\1\207\2\0\1\207\1\7\1\207\1\0\1\211\17\0"+
    "\25\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\212\17\0\25\207\1\0\1\207\2\0\1\207\1\7"+
    "\1\207\1\0\1\213\17\0\25\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\4\207\1\214"+
    "\20\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\3\207\1\215\21\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\3\207\1\216"+
    "\21\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\2\207\1\217\22\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\5\207\1\220"+
    "\17\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\1\207\1\221\23\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\5\207\1\222"+
    "\12\207\1\223\4\207\1\0\1\207\2\0\1\207\1\7"+
    "\1\207\1\0\1\224\17\0\25\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\1\207\1\225"+
    "\23\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\7\207\1\226\15\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\16\207\1\227"+
    "\6\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\5\207\1\230\17\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\231\17\0\7\207\1\232"+
    "\15\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\16\207\1\233\6\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\16\207\1\234"+
    "\6\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\20\207\1\235\4\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\17\207\1\236"+
    "\5\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\237\17\0\25\207\1\0\1\207\2\0\1\207\1\7"+
    "\1\207\1\0\1\240\17\0\25\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\7\207\1\241"+
    "\6\207\1\242\6\207\1\0\1\207\2\0\1\207\1\7"+
    "\1\207\1\0\1\243\17\0\25\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\4\207\1\244"+
    "\20\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\2\207\1\245\22\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\11\207\1\246"+
    "\13\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\12\207\1\247\12\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\3\207\1\250"+
    "\21\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\4\207\1\251\20\207\1\0\1\207\2\0"+
    "\1\207\1\7\1\207\1\0\1\207\17\0\11\207\1\252"+
    "\13\207\1\0\1\207\2\0\1\207\1\7\1\207\1\0"+
    "\1\207\17\0\1\253\24\207\1\0\1\207\2\0\1\207"+
    "\1\7\1\207\1\0\1\207\17\0\1\254\24\207\1\0"+
    "\1\207\2\0\1\207\1\7\1\207\1\0\1\207\17\0"+
    "\5\207\1\255\17\207\1\0\1\207\2\0\1\207\1\7"+
    "\1\207\1\0\1\207\17\0\16\207\1\256\6\207\1\0"+
    "\1\207\2\0\1\207\1\7\1\207\1\0\1\207\17\0"+
    "\2\207\1\257\22\207\1\0\1\207\2\0\1\207\1\7"+
    "\1\207\1\0\1\207\17\0\20\207\1\260\4\207\1\0"+
    "\1\207\2\0\1\207\1\7\1\207\1\0\1\207\17\0"+
    "\5\207\1\261\17\207\1\0\1\207\2\0\1\207\1\7"+
    "\1\207\1\0\1\207\17\0\6\207\1\262\16\207\1\0"+
    "\1\207\2\0\1\207\1\7\1\207\1\0\1\263\17\0"+
    "\25\207\1\0\1\264\2\0\1\264\1\7\1\264\1\0"+
    "\1\264\17\0\25\264\1\0\1\265\2\0\1\264\1\7"+
    "\1\264\1\0\1\264\17\0\25\264\1\0\1\264\2\0"+
    "\1\264\1\7\1\264\1\0\1\264\17\0\2\264\1\266"+
    "\22\264\1\0\1\264\2\0\1\264\1\7\1\264\1\0"+
    "\1\264\17\0\1\267\24\264\1\0\1\264\2\0\1\264"+
    "\1\7\1\264\1\0\1\264\17\0\2\264\1\270\22\264"+
    "\1\0\1\264\2\0\1\264\1\7\1\264\1\0\1\264"+
    "\17\0\11\264\1\271\13\264\1\0\1\264\2\0\1\264"+
    "\1\7\1\264\1\0\1\264\17\0\2\264\1\272\22\264"+
    "\1\0\1\264\2\0\1\264\1\7\1\264\1\0\1\273"+
    "\17\0\25\264\1\0\1\264\2\0\1\264\1\7\1\264"+
    "\1\0\1\264\17\0\3\264\1\274\21\264\1\0\1\264"+
    "\2\0\1\264\1\7\1\264\1\0\1\264\17\0\4\264"+
    "\1\275\20\264\1\0\1\264\2\0\1\264\1\7\1\264"+
    "\1\0\1\264\17\0\5\264\1\276\17\264\1\0\1\264"+
    "\2\0\1\264\1\7\1\264\1\0\1\264\17\0\1\277"+
    "\24\264\1\0\1\264\2\0\1\264\1\7\1\264\1\0"+
    "\1\264\17\0\11\264\1\300\13\264\1\0\1\264\2\0"+
    "\1\264\1\7\1\264\1\0\1\264\17\0\15\264\1\301"+
    "\7\264\1\0\1\264\2\0\1\264\1\7\1\264\1\0"+
    "\1\264\17\0\3\264\1\302\21\264\1\0\1\264\2\0"+
    "\1\264\1\7\1\264\1\0\1\264\17\0\12\264\1\303"+
    "\12\264\1\0\1\264\2\0\1\264\1\7\1\264\1\0"+
    "\1\264\17\0\20\264\1\304\4\264\1\0\1\264\2\0"+
    "\1\264\1\7\1\264\1\0\1\264\17\0\15\264\1\305"+
    "\7\264\1\0\1\264\2\0\1\264\1\7\1\264\1\0"+
    "\1\306\17\0\25\264\1\0\1\264\2\0\1\264\1\7"+
    "\1\264\1\0\1\264\17\0\5\264\1\307\17\264\1\0"+
    "\1\264\2\0\1\264\1\7\1\264\1\0\1\264\17\0"+
    "\5\264\1\310\17\264\1\0\1\264\2\0\1\264\1\7"+
    "\1\264\1\0\1\264\17\0\3\264\1\311\21\264\1\0"+
    "\1\264\2\0\1\264\1\7\1\264\1\0\1\264\17\0"+
    "\1\312\24\264\1\0\1\264\2\0\1\264\1\7\1\264"+
    "\1\0\1\264\17\0\4\264\1\313\20\264\1\0\1\264"+
    "\2\0\1\264\1\7\1\264\1\0\1\264\17\0\13\264"+
    "\1\314\11\264\1\0\1\264\2\0\1\264\1\7\1\264"+
    "\1\0\1\264\17\0\5\264\1\315\17\264\1\0\1\264"+
    "\2\0\1\264\1\7\1\264\1\0\1\264\17\0\4\264"+
    "\1\316\20\264\1\0\1\264\2\0\1\264\1\7\1\264"+
    "\1\0\1\264\17\0\7\264\1\317\15\264\1\0\1\264"+
    "\2\0\1\264\1\7\1\264\1\0\1\264\17\0\7\264"+
    "\1\320\15\264\1\0\1\264\2\0\1\264\1\7\1\264"+
    "\1\0\1\264\17\0\7\264\1\321\15\264\1\0\1\264"+
    "\2\0\1\264\1\7\1\264\1\0\1\264\17\0\3\264"+
    "\1\322\21\264\1\0\1\264\2\0\1\264\1\7\1\264"+
    "\1\0\1\264\17\0\7\264\1\323\15\264\1\0\1\264"+
    "\2\0\1\264\1\7\1\264\1\0\1\264\17\0\7\264"+
    "\1\324\15\264\1\0\1\264\2\0\1\264\1\7\1\264"+
    "\1\0\1\264\17\0\1\264\1\325\23\264\1\0\1\264"+
    "\2\0\1\264\1\7\1\264\1\0\1\264\17\0\4\264"+
    "\1\326\20\264\1\0\1\264\2\0\1\264\1\7\1\264"+
    "\1\0\1\264\17\0\24\264\1\327\1\0\1\264\2\0"+
    "\1\264\1\7\1\264\1\0\1\330\17\0\25\264\1\0"+
    "\1\264\2\0\1\264\1\7\1\264\1\0\1\264\17\0"+
    "\3\264\1\331\21\264\1\0\1\264\2\0\1\264\1\7"+
    "\1\264\1\0\1\264\17\0\2\264\1\332\22\264\1\0"+
    "\1\264\2\0\1\264\1\7\1\264\1\0\1\264\17\0"+
    "\5\264\1\333\17\264\1\0\1\264\2\0\1\264\1\7"+
    "\1\264\1\0\1\264\17\0\3\264\1\334\21\264\1\0"+
    "\1\335\2\0\1\335\1\7\1\335\1\0\1\335\17\0"+
    "\25\335\1\0\1\336\2\0\1\335\1\7\1\335\1\0"+
    "\1\335\17\0\25\335\1\0\1\335\2\0\1\335\1\7"+
    "\1\335\1\0\1\335\17\0\3\335\1\337\21\335\1\0"+
    "\1\335\2\0\1\335\1\7\1\335\1\0\1\335\17\0"+
    "\6\335\1\340\16\335\1\0\1\335\2\0\1\335\1\7"+
    "\1\335\1\0\1\335\17\0\5\335\1\341\17\335\1\0"+
    "\1\335\2\0\1\335\1\7\1\335\1\0\1\335\17\0"+
    "\1\335\1\342\23\335\1\0\1\335\2\0\1\335\1\7"+
    "\1\335\1\0\1\335\17\0\1\343\24\335\1\0\1\335"+
    "\2\0\1\335\1\7\1\335\1\0\1\335\17\0\12\335"+
    "\1\344\12\335\1\0\1\335\2\0\1\335\1\7\1\335"+
    "\1\0\1\335\17\0\1\335\1\345\23\335\1\0\1\335"+
    "\2\0\1\335\1\7\1\335\1\0\1\335\17\0\2\335"+
    "\1\346\22\335\1\0\1\335\2\0\1\335\1\7\1\335"+
    "\1\0\1\335\17\0\5\335\1\347\17\335\1\0\1\335"+
    "\2\0\1\335\1\7\1\335\1\0\1\335\17\0\2\335"+
    "\1\350\22\335\1\0\1\335\2\0\1\335\1\7\1\335"+
    "\1\0\1\335\17\0\2\335\1\351\22\335\1\0\1\335"+
    "\2\0\1\335\1\7\1\335\1\0\1\335\17\0\16\335"+
    "\1\352\6\335\1\0\1\335\2\0\1\335\1\7\1\335"+
    "\1\0\1\335\17\0\5\335\1\353\17\335\1\0\1\335"+
    "\2\0\1\335\1\7\1\335\1\0\1\335\17\0\2\335"+
    "\1\354\22\335\1\0\1\335\2\0\1\335\1\7\1\335"+
    "\1\0\1\335\17\0\1\355\24\335\1\0\1\335\2\0"+
    "\1\335\1\7\1\335\1\0\1\335\17\0\2\335\1\356"+
    "\22\335\1\0\1\335\2\0\1\335\1\7\1\335\1\0"+
    "\1\357\17\0\25\335\1\0\1\335\2\0\1\335\1\7"+
    "\1\335\1\0\1\335\17\0\21\335\1\360\3\335\1\0"+
    "\1\335\2\0\1\335\1\7\1\335\1\0\1\335\17\0"+
    "\5\335\1\361\17\335\1\0\1\335\2\0\1\335\1\7"+
    "\1\335\1\0\1\335\17\0\2\335\1\362\22\335\1\0"+
    "\1\335\2\0\1\335\1\7\1\335\1\0\1\335\17\0"+
    "\4\335\1\363\20\335\1\0\1\335\2\0\1\335\1\7"+
    "\1\335\1\0\1\335\17\0\5\335\1\364\17\335\1\0"+
    "\1\335\2\0\1\335\1\7\1\335\1\0\1\335\17\0"+
    "\13\335\1\365\11\335\1\0\1\335\2\0\1\335\1\7"+
    "\1\335\1\0\1\366\17\0\25\335\1\0\1\335\2\0"+
    "\1\335\1\7\1\335\1\0\1\335\17\0\3\335\1\367"+
    "\21\335\1\0\1\335\2\0\1\335\1\7\1\335\1\0"+
    "\1\335\17\0\2\335\1\370\22\335\1\0\1\335\2\0"+
    "\1\335\1\7\1\335\1\0\1\335\17\0\2\335\1\371"+
    "\22\335\1\0\1\335\2\0\1\335\1\7\1\335\1\0"+
    "\1\335\17\0\7\335\1\372\15\335\1\0\1\335\2\0"+
    "\1\335\1\7\1\335\1\0\1\335\17\0\5\335\1\373"+
    "\17\335\1\0\1\335\2\0\1\335\1\7\1\335\1\0"+
    "\1\335\17\0\6\335\1\374\16\335\1\0\1\375\2\0"+
    "\1\375\1\7\1\375\1\0\1\375\17\0\25\375\1\0"+
    "\1\376\2\0\1\375\1\7\1\375\1\0\1\375\17\0"+
    "\25\375\1\0\1\375\2\0\1\375\1\7\1\375\1\0"+
    "\1\377\17\0\25\375\1\0\1\375\2\0\1\375\1\7"+
    "\1\375\1\0\1\375\17\0\2\375\1\u0100\22\375\1\0"+
    "\1\375\2\0\1\375\1\7\1\375\1\0\1\375\17\0"+
    "\5\375\1\u0101\17\375\1\0\1\375\2\0\1\375\1\7"+
    "\1\375\1\0\1\375\17\0\3\375\1\u0102\21\375\1\0"+
    "\1\375\2\0\1\375\1\7\1\375\1\0\1\375\17\0"+
    "\5\375\1\u0103\17\375\1\0\1\375\2\0\1\375\1\7"+
    "\1\375\1\0\1\u0104\17\0\25\375\1\0\1\375\2\0"+
    "\1\375\1\7\1\375\1\0\1\375\17\0\5\375\1\u0105"+
    "\17\375\1\0\1\375\2\0\1\375\1\7\1\375\1\0"+
    "\1\375\17\0\5\375\1\u0106\17\375\1\0\1\375\2\0"+
    "\1\375\1\7\1\375\1\0\1\375\17\0\3\375\1\u0107"+
    "\21\375\1\0\1\375\2\0\1\375\1\7\1\375\1\0"+
    "\1\375\17\0\5\375\1\u0108\17\375\1\0\1\375\2\0"+
    "\1\375\1\7\1\375\1\0\1\375\17\0\1\375\1\u0109"+
    "\23\375\1\0\1\375\2\0\1\375\1\7\1\375\1\0"+
    "\1\375\17\0\2\375\1\u010a\22\375\1\0\1\375\2\0"+
    "\1\375\1\7\1\375\1\0\1\375\17\0\5\375\1\u010b"+
    "\17\375\1\0\1\375\2\0\1\375\1\7\1\375\1\0"+
    "\1\375\17\0\16\375\1\u010c\6\375\1\0\1\375\2\0"+
    "\1\375\1\7\1\375\1\0\1\375\17\0\5\375\1\u010d"+
    "\17\375\1\0\1\375\2\0\1\375\1\7\1\375\1\0"+
    "\1\375\17\0\7\375\1\u010e\15\375\1\0\1\375\2\0"+
    "\1\375\1\7\1\375\1\0\1\375\17\0\2\375\1\u010f"+
    "\22\375\1\0\1\375\2\0\1\375\1\7\1\375\1\0"+
    "\1\375\17\0\7\375\1\u0110\15\375\1\0\1\375\2\0"+
    "\1\375\1\7\1\375\1\0\1\375\17\0\2\375\1\u0111"+
    "\22\375\1\0\1\375\2\0\1\375\1\7\1\375\1\0"+
    "\1\375\17\0\1\u0112\24\375\1\0\1\375\2\0\1\375"+
    "\1\7\1\375\1\0\1\375\17\0\5\375\1\u0113\17\375"+
    "\1\0\1\375\2\0\1\375\1\7\1\375\1\0\1\375"+
    "\17\0\14\375\1\u0114\10\375\1\0\1\375\2\0\1\375"+
    "\1\7\1\375\1\0\1\375\17\0\1\u0115\24\375\1\0"+
    "\1\375\2\0\1\375\1\7\1\375\1\0\1\u0116\17\0"+
    "\25\375\1\0\1\u0117\2\0\1\u0117\1\7\1\u0117\1\0"+
    "\1\u0117\17\0\25\u0117\1\0\1\u0118\2\0\1\u0117\1\7"+
    "\1\u0117\1\0\1\u0117\17\0\25\u0117\1\0\1\u0117\2\0"+
    "\1\u0117\1\7\1\u0117\1\0\1\u0117\17\0\2\u0117\1\u0119"+
    "\22\u0117\1\0\1\u0117\2\0\1\u0117\1\7\1\u0117\1\0"+
    "\1\u0117\17\0\2\u0117\1\u011a\22\u0117\1\0\1\u0117\2\0"+
    "\1\u0117\1\7\1\u0117\1\0\1\u0117\17\0\2\u0117\1\u011b"+
    "\22\u0117\1\0\1\u0117\2\0\1\u0117\1\7\1\u0117\1\0"+
    "\1\u0117\17\0\2\u0117\1\u011c\22\u0117\1\0\1\u0117\2\0"+
    "\1\u0117\1\7\1\u0117\1\0\1\u0117\17\0\2\u0117\1\u011d"+
    "\22\u0117\1\0\1\u0117\2\0\1\u0117\1\7\1\u0117\1\0"+
    "\1\u011e\17\0\25\u0117\1\0\1\u0117\2\0\1\u0117\1\7"+
    "\1\u0117\1\0\1\u0117\17\0\4\u0117\1\u011f\20\u0117\1\0"+
    "\1\u0117\2\0\1\u0117\1\7\1\u0117\1\0\1\u0117\17\0"+
    "\3\u0117\1\u0120\21\u0117\1\0\1\u0117\2\0\1\u0117\1\7"+
    "\1\u0117\1\0\1\u0117\17\0\2\u0117\1\u0121\22\u0117\1\0"+
    "\1\u0117\2\0\1\u0117\1\7\1\u0117\1\0\1\u0117\17\0"+
    "\6\u0117\1\u0122\16\u0117\1\0\1\u0117\2\0\1\u0117\1\7"+
    "\1\u0117\1\0\1\u0117\17\0\12\u0117\1\u0123\12\u0117\1\0"+
    "\1\u0117\2\0\1\u0117\1\7\1\u0117\1\0\1\u0117\17\0"+
    "\5\u0117\1\u0124\17\u0117\1\0\1\u0117\2\0\1\u0117\1\7"+
    "\1\u0117\1\0\1\u0117\17\0\3\u0117\1\u0125\21\u0117\1\0"+
    "\1\u0117\2\0\1\u0117\1\7\1\u0117\1\0\1\u0117\17\0"+
    "\2\u0117\1\u0126\22\u0117\1\0\1\u0127\2\0\1\u0127\1\7"+
    "\1\u0127\1\0\1\u0127\17\0\25\u0127\1\0\1\u0128\2\0"+
    "\1\u0127\1\7\1\u0127\1\0\1\u0127\17\0\25\u0127\1\0"+
    "\1\u0127\2\0\1\u0127\1\7\1\u0127\1\0\1\u0127\17\0"+
    "\7\u0127\1\u0129\15\u0127\1\0\1\u0127\2\0\1\u0127\1\7"+
    "\1\u0127\1\0\1\u0127\17\0\1\u012a\24\u0127\1\0\1\u0127"+
    "\2\0\1\u0127\1\7\1\u0127\1\0\1\u0127\17\0\5\u0127"+
    "\1\u012b\17\u0127\1\0\1\u0127\2\0\1\u0127\1\7\1\u0127"+
    "\1\0\1\u0127\17\0\16\u0127\1\u012c\6\u0127\1\0\1\u0127"+
    "\2\0\1\u0127\1\7\1\u0127\1\0\1\u0127\17\0\3\u0127"+
    "\1\u012d\21\u0127\1\0\1\u012e\2\0\1\u012e\1\7\1\u012e"+
    "\1\0\1\u012e\17\0\25\u012e\1\0\1\u012f\2\0\1\u012e"+
    "\1\7\1\u012e\1\0\1\u012e\17\0\25\u012e\1\0\1\u012e"+
    "\2\0\1\u012e\1\7\1\u012e\1\0\1\u012e\17\0\3\u012e"+
    "\1\u0130\21\u012e\1\0\1\u012e\2\0\1\u012e\1\7\1\u012e"+
    "\1\0\1\u012e\17\0\5\u012e\1\u0131\17\u012e\1\0\1\u0132"+
    "\2\0\1\u0132\1\7\1\u0132\1\0\1\u0132\17\0\25\u0132"+
    "\1\0\1\u0133\2\0\1\u0132\1\7\1\u0132\1\0\1\u0132"+
    "\17\0\25\u0132\1\0\1\u0132\2\0\1\u0132\1\7\1\u0132"+
    "\1\0\1\u0132\17\0\1\u0134\24\u0132\1\0\1\u0132\2\0"+
    "\1\u0132\1\7\1\u0132\1\0\1\u0132\17\0\2\u0132\1\u0135"+
    "\22\u0132\1\0\1\u0136\2\0\1\u0136\1\7\1\u0136\1\0"+
    "\1\u0136\17\0\25\u0136\1\0\1\u0137\2\0\1\u0136\1\7"+
    "\1\u0136\1\0\1\u0136\17\0\25\u0136\1\0\1\u0138\2\0"+
    "\1\u0138\1\7\1\u0138\1\0\1\u0138\17\0\25\u0138\1\0"+
    "\1\u0139\2\0\1\u0138\1\7\1\u0138\1\0\1\u0138\17\0"+
    "\25\u0138\1\0\1\u013a\2\0\1\u013a\1\7\1\u013a\1\0"+
    "\1\u013a\17\0\25\u013a\1\0\1\u013b\2\0\1\u013a\1\7"+
    "\1\u013a\1\0\1\u013a\17\0\25\u013a\1\0\1\u013c\2\0"+
    "\1\u013c\1\7\1\u013c\1\0\1\u013c\17\0\25\u013c\1\0"+
    "\1\u013d\2\0\1\u013c\1\7\1\u013c\1\0\1\u013c\17\0"+
    "\25\u013c\1\0\1\u013e\2\0\1\u013e\1\7\1\u013e\1\0"+
    "\1\u013e\17\0\25\u013e\1\0\1\u013f\2\0\1\u013e\1\7"+
    "\1\u013e\1\0\1\u013e\17\0\25\u013e\1\0\1\u0140\2\0"+
    "\1\u0140\1\7\1\u0140\1\0\1\u0140\17\0\25\u0140\1\0"+
    "\1\u0141\2\0\1\u0140\1\7\1\u0140\1\0\1\u0140\17\0"+
    "\25\u0140\1\0\1\u0142\2\0\1\u0142\1\7\1\u0142\1\0"+
    "\1\u0142\17\0\25\u0142\1\0\1\u0143\2\0\1\u0142\1\7"+
    "\1\u0142\1\0\1\u0142\17\0\25\u0142\1\0\1\u0144\2\0"+
    "\1\u0144\1\7\1\u0144\1\0\1\u0144\17\0\25\u0144\1\0"+
    "\1\u0145\2\0\1\u0144\1\7\1\u0144\1\0\1\u0144\17\0"+
    "\25\u0144\1\0\1\u0146\2\0\1\u0146\1\7\1\u0146\1\0"+
    "\1\u0146\17\0\25\u0146\1\0\1\u0147\2\0\1\u0146\1\7"+
    "\1\u0146\1\0\1\u0146\17\0\25\u0146\1\0\1\u0148\2\0"+
    "\1\u0148\1\7\1\u0148\1\0\1\u0148\17\0\25\u0148\1\0"+
    "\1\u0149\2\0\1\u0148\1\7\1\u0148\1\0\1\u0148\17\0"+
    "\25\u0148\1\0\1\u014a\2\0\1\u014a\1\7\1\u014a\1\0"+
    "\1\u014a\17\0\25\u014a\1\0\1\u014b\2\0\1\u014a\1\7"+
    "\1\u014a\1\0\1\u014a\17\0\25\u014a\1\0\1\u014c\2\0"+
    "\1\u014c\1\7\1\u014c\1\0\1\u014c\17\0\25\u014c\1\0"+
    "\1\u014d\2\0\1\u014c\1\7\1\u014c\1\0\1\u014c\17\0"+
    "\25\u014c\1\0\1\u014e\2\0\1\u014e\1\7\1\u014e\1\0"+
    "\1\u014e\17\0\25\u014e\1\0\1\u014f\2\0\1\u014e\1\7"+
    "\1\u014e\1\0\1\u014e\17\0\25\u014e\1\0\1\u0150\2\0"+
    "\1\u0150\1\7\1\u0150\1\0\1\u0150\17\0\25\u0150\1\0"+
    "\1\u0151\2\0\1\u0150\1\7\1\u0150\1\0\1\u0150\17\0"+
    "\25\u0150\1\0\1\u0152\2\0\1\u0152\1\7\1\u0152\1\0"+
    "\1\u0152\17\0\25\u0152\1\0\1\u0153\2\0\1\u0152\1\7"+
    "\1\u0152\1\0\1\u0152\17\0\25\u0152\1\0\1\u0154\2\0"+
    "\1\u0154\1\7\1\u0154\1\0\1\u0154\17\0\25\u0154\1\0"+
    "\1\u0155\2\0\1\u0154\1\7\1\u0154\1\0\1\u0154\17\0"+
    "\25\u0154\1\0\1\u0156\2\0\1\u0156\1\7\1\u0156\1\0"+
    "\1\u0156\17\0\25\u0156\1\0\1\u0157\2\0\1\u0156\1\7"+
    "\1\u0156\1\0\1\u0156\17\0\25\u0156\1\0\1\u0158\2\0"+
    "\1\u0158\1\7\1\u0158\1\0\1\u0158\17\0\25\u0158\1\0"+
    "\1\u0159\2\0\1\u0158\1\7\1\u0158\1\0\1\u0158\17\0"+
    "\25\u0158\1\0\1\u015a\2\0\1\u015a\1\7\1\u015a\1\0"+
    "\1\u015a\17\0\25\u015a\1\0\1\u015b\2\0\1\u015a\1\7"+
    "\1\u015a\1\0\1\u015a\17\0\25\u015a\1\0\1\u015c\2\0"+
    "\1\u015c\1\7\1\u015c\1\0\1\u015c\17\0\25\u015c\1\0"+
    "\1\u015d\2\0\1\u015c\1\7\1\u015c\1\0\1\u015c\17\0"+
    "\25\u015c\1\0\1\u015e\2\0\1\u015e\1\7\1\u015e\1\0"+
    "\1\u015e\17\0\25\u015e\1\0\1\130\2\0\1\u015e\1\7"+
    "\1\u015e\1\0\1\u015e\17\0\25\u015e";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12780];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\1\1\10\11\2\1\2\11"+
    "\17\1\1\0\2\1\1\0\4\1\1\0\3\1\3\11"+
    "\u0129\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;
    modelos.InformacionLexema c = new modelos.InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { c.linea=yyline; lexema=yytext(); return DOS_PUNTOS;
          }
        case 74: break;
        case 25: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_NO;
          }
        case 75: break;
        case 27: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_FIN;
          }
        case 76: break;
        case 20: 
          { c.linea=yyline; lexema=yytext(); return NUMERO_DECIMAL;
          }
        case 77: break;
        case 13: 
          { c.linea=yyline; lexema=yytext(); return PUNTO_COMA;
          }
        case 78: break;
        case 19: 
          { c.linea=yyline; lexema=yytext(); return ARROBA;
          }
        case 79: break;
        case 73: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_DIRECCIONAR;
          }
        case 80: break;
        case 70: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_PRINCIPAL;
          }
        case 81: break;
        case 42: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_GIRAR;
          }
        case 82: break;
        case 69: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_IZQUIERDA;
          }
        case 83: break;
        case 57: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_DECIMAL;
          }
        case 84: break;
        case 21: 
          { c.linea=yyline; lexema=yytext(); return NUMERO_EXPONENTE;
          }
        case 85: break;
        case 65: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_ADELANTE;
          }
        case 86: break;
        case 11: 
          { c.linea=yyline; lexema=yytext(); return OPERADOR_O;
          }
        case 87: break;
        case 2: 
          { c.linea=yyline; lexema=yytext(); return NUMERO;
          }
        case 88: break;
        case 59: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_FUNCION;
          }
        case 89: break;
        case 39: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_FALSO;
          }
        case 90: break;
        case 36: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_CICLO;
          }
        case 91: break;
        case 35: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_CORTO;
          }
        case 92: break;
        case 6: 
          { /*Ignore*/
          }
        case 93: break;
        case 38: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_ABAJO;
          }
        case 94: break;
        case 34: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_LEER;
          }
        case 95: break;
        case 67: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_MIENTRAS;
          }
        case 96: break;
        case 28: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_PIN;
          }
        case 97: break;
        case 61: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_EJECUTAR;
          }
        case 98: break;
        case 51: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_RETORNO;
          }
        case 99: break;
        case 1: 
          { c.linea=yyline; lexema=yytext(); return ERROR;
          }
        case 100: break;
        case 72: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_DECLARACION;
          }
        case 101: break;
        case 40: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_PARAV;
          }
        case 102: break;
        case 29: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_HAZ;
          }
        case 103: break;
        case 63: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_CALIBRAR;
          }
        case 104: break;
        case 68: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_BOOLEANO;
          }
        case 105: break;
        case 43: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_VIDEO;
          }
        case 106: break;
        case 55: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_DETENER;
          }
        case 107: break;
        case 47: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_ARRIBA;
          }
        case 108: break;
        case 12: 
          { c.linea=yyline; lexema=yytext(); return OPERADOR_MODULO;
          }
        case 109: break;
        case 14: 
          { c.linea=yyline; lexema=yytext(); return PARENTESIS_IZQ;
          }
        case 110: break;
        case 54: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_ARREGLO;
          }
        case 111: break;
        case 10: 
          { c.linea=yyline; lexema=yytext(); return OPERADOR_Y;
          }
        case 112: break;
        case 8: 
          { c.linea=yyline; lexema=yytext(); return OPERADOR_POR;
          }
        case 113: break;
        case 56: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_DERECHA;
          }
        case 114: break;
        case 64: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_ACELERAR;
          }
        case 115: break;
        case 30: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_NULO;
          }
        case 116: break;
        case 71: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_VERDADERO;
          }
        case 117: break;
        case 46: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_CADENA;
          }
        case 118: break;
        case 48: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_APAGAR;
          }
        case 119: break;
        case 52: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_REGRESA;
          }
        case 120: break;
        case 22: 
          { c.linea=yyline; lexema=yytext(); return OPERADOR_IGUALDAD;
          }
        case 121: break;
        case 45: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_CARGAR;
          }
        case 122: break;
        case 60: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_ENCENDER;
          }
        case 123: break;
        case 49: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_SEGUIR;
          }
        case 124: break;
        case 41: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_LARGO;
          }
        case 125: break;
        case 3: 
          { c.linea=yyline; lexema=yytext(); return OPERADOR_MAS;
          }
        case 126: break;
        case 24: 
          { c.linea=yyline; lexema=yytext(); return MENOR_QUE;
          }
        case 127: break;
        case 53: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_CAPTURA;
          }
        case 128: break;
        case 33: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_PARA;
          }
        case 129: break;
        case 66: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_IMPRIMIR;
          }
        case 130: break;
        case 62: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_CARACTER;
          }
        case 131: break;
        case 32: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_FIJO;
          }
        case 132: break;
        case 58: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_INICIAR;
          }
        case 133: break;
        case 31: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_RUTA;
          }
        case 134: break;
        case 4: 
          { c.linea=yyline; lexema=yytext(); return OPERADOR_MENOS;
          }
        case 135: break;
        case 26: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_SI;
          }
        case 136: break;
        case 44: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_ENTERO;
          }
        case 137: break;
        case 5: 
          { c.linea=yyline; lexema=yytext(); return IDENTIFICADOR;
          }
        case 138: break;
        case 15: 
          { c.linea=yyline; lexema=yytext(); return PARENTESIS_DER;
          }
        case 139: break;
        case 7: 
          { c.linea=yyline; lexema=yytext(); return ASIGNACION;
          }
        case 140: break;
        case 23: 
          { c.linea=yyline; lexema=yytext(); return MAYOR_QUE;
          }
        case 141: break;
        case 37: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_ATRAS;
          }
        case 142: break;
        case 17: 
          { c.linea=yyline; lexema=yytext(); return MENOR;
          }
        case 143: break;
        case 9: 
          { c.linea=yyline; lexema=yytext(); return OPERADOR_DIVISION;
          }
        case 144: break;
        case 50: 
          { c.linea=yyline; lexema=yytext(); return RESERVADA_ESPERAR;
          }
        case 145: break;
        case 16: 
          { c.linea=yyline; lexema=yytext(); return MAYOR;
          }
        case 146: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
