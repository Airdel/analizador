/* The following code was generated by JFlex 1.4.3 on 30/05/21 19:08 */

package analizador;
import java.io.*;
import static analizador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/05/21 19:08 from the specification file
 * <tt>C:/analizador/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\13\2\0\1\11\22\0\1\11\1\21\3\0\1\22"+
    "\1\17\1\12\1\24\1\25\1\15\1\2\1\31\1\3\1\7\1\16"+
    "\12\1\1\30\1\23\1\27\1\14\1\26\1\0\1\51\3\5\1\5"+
    "\26\5\4\0\1\6\1\0\1\37\1\47\1\36\1\40\1\10\1\42"+
    "\1\53\1\54\1\41\1\52\1\4\1\50\1\45\1\32\1\35\1\46"+
    "\1\56\1\34\1\44\1\33\1\43\1\57\3\4\1\55\1\0\1\20"+
    "\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\1\4\1\5\1\6\1\1"+
    "\1\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\12\5\1\2\1\5\2\27\1\30\2\0\1\7"+
    "\2\5\2\1\1\31\1\0\1\5\1\0\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\12\5\1\40\4\5\17\41"+
    "\1\5\1\31\1\42\1\31\2\7\2\5\1\31\12\5"+
    "\1\43\5\5\1\44\32\41\1\5\1\7\1\0\2\5"+
    "\1\31\1\5\1\45\14\5\1\46\1\5\1\44\30\41"+
    "\1\47\3\41\1\50\1\41\1\5\1\7\1\0\2\5"+
    "\1\31\1\5\1\51\2\5\1\52\4\5\1\53\4\5"+
    "\1\44\6\41\1\54\16\41\1\55\2\41\1\56\3\41"+
    "\1\5\1\0\2\5\1\31\1\57\1\5\1\60\10\5"+
    "\1\44\11\41\1\61\4\41\1\62\6\41\1\63\1\64"+
    "\1\65\1\66\1\5\1\67\2\5\1\31\1\5\1\70"+
    "\1\71\1\5\1\72\1\73\3\5\1\44\6\41\1\74"+
    "\2\41\1\75\2\41\1\76\5\41\1\77\1\5\1\67"+
    "\2\5\1\31\1\100\1\5\1\101\1\5\1\102\1\44"+
    "\2\41\1\103\1\41\1\104\1\105\1\106\3\41\1\107"+
    "\1\110\3\41\1\5\1\67\2\5\1\31\1\5\1\111"+
    "\1\44\1\41\1\112\1\113\1\114\1\115\1\116\1\41"+
    "\1\117\1\41\1\120\2\5\1\31\1\5\1\44\2\41"+
    "\1\121\2\5\1\31\1\122\1\44\2\41\2\5\1\31"+
    "\1\44\1\41\1\123\2\5\1\31\1\44\1\41\2\5"+
    "\1\31\1\44\1\41\2\5\1\31\1\44\1\41\2\5"+
    "\1\31\1\44\1\41\2\5\1\31\1\44\1\41\2\5"+
    "\1\31\1\44\1\41\2\5\1\31\1\44\1\41\2\5"+
    "\1\31\1\44\1\41\2\5\1\31\1\44\1\41\2\5"+
    "\1\31\1\44\1\41\2\5\1\31\1\44\1\41\2\5"+
    "\1\31\1\44\1\41\2\5\1\31\1\44\1\41\2\5"+
    "\1\31\1\44\1\41\2\5\1\31\1\44\1\41\2\5"+
    "\1\31\1\44\1\41\2\5\1\31\1\44\1\41\2\5"+
    "\1\31\1\44\1\41\2\5\1\31\1\44\1\41\2\5"+
    "\1\44\1\41\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\60\0\u01b0\0\u01e0\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\u0210\0\u0240\0\60"+
    "\0\60\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390"+
    "\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\220"+
    "\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660"+
    "\0\u0690\0\u06c0\0\u01b0\0\60\0\60\0\60\0\60\0\60"+
    "\0\u05d0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0840\0\u0870\0\u08a0\0\u05d0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u0690\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0f60\0\u0f90\0\u0d80\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680"+
    "\0\u16b0\0\u16e0\0\u1680\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0"+
    "\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1680"+
    "\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0"+
    "\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20"+
    "\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0"+
    "\0\u1dd0\0\u1e00\0\u19b0\0\u1e30\0\u1e60\0\u1e90\0\u19b0\0\u1ec0"+
    "\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u1fb0"+
    "\0\u2040\0\u2070\0\u1fb0\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u1fb0"+
    "\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\u2310\0\u2340\0\u2250\0\u2370\0\u23a0\0\u23d0\0\u2400"+
    "\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580"+
    "\0\u25b0\0\u25e0\0\u2250\0\u2610\0\u2640\0\u2250\0\u2670\0\u26a0"+
    "\0\u26d0\0\u2700\0\u2730\0\u2760\0\u2790\0\u27c0\0\u2790\0\u27f0"+
    "\0\u2790\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940"+
    "\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30\0\u2a60\0\u2a90\0\u2ac0"+
    "\0\u2af0\0\u2b20\0\u2b50\0\u29d0\0\u2b80\0\u2bb0\0\u2be0\0\u2c10"+
    "\0\u29d0\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30\0\u29d0"+
    "\0\u29d0\0\u29d0\0\u29d0\0\u2d60\0\u2d90\0\u2dc0\0\u2df0\0\u2e20"+
    "\0\u2e50\0\u2df0\0\u2df0\0\u2e80\0\u2df0\0\u2df0\0\u2eb0\0\u2ee0"+
    "\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060"+
    "\0\u2f70\0\u3090\0\u30c0\0\u2f70\0\u30f0\0\u3120\0\u2f70\0\u3150"+
    "\0\u3180\0\u31b0\0\u31e0\0\u3210\0\u2f70\0\u3240\0\u3270\0\u32a0"+
    "\0\u32d0\0\u3300\0\u32d0\0\u3330\0\u32d0\0\u3360\0\u32d0\0\u3390"+
    "\0\u33c0\0\u33f0\0\u33c0\0\u3420\0\u33c0\0\u33c0\0\u33c0\0\u3450"+
    "\0\u3480\0\u34b0\0\u33c0\0\u33c0\0\u34e0\0\u3510\0\u3540\0\u3570"+
    "\0\60\0\u35a0\0\u35d0\0\u3600\0\u3630\0\u35d0\0\u3660\0\u3690"+
    "\0\u3690\0\u3690\0\u3690\0\u3690\0\u3690\0\u36c0\0\u3690\0\u36f0"+
    "\0\u35d0\0\u3720\0\u3750\0\u3780\0\u37b0\0\u37e0\0\u3810\0\u3840"+
    "\0\u3810\0\u3870\0\u38a0\0\u38d0\0\u38a0\0\u3900\0\u3930\0\u3960"+
    "\0\u3990\0\u39c0\0\u39f0\0\u3a20\0\u3a50\0\u3a50\0\u3a80\0\u3ab0"+
    "\0\u3ae0\0\u3b10\0\u3b40\0\u3b70\0\u3ba0\0\u3bd0\0\u3c00\0\u3c30"+
    "\0\u3c60\0\u3c90\0\u3cc0\0\u3cf0\0\u3d20\0\u3d50\0\u3d80\0\u3db0"+
    "\0\u3de0\0\u3e10\0\u3e40\0\u3e70\0\u3ea0\0\u3ed0\0\u3f00\0\u3f30"+
    "\0\u3f60\0\u3f90\0\u3fc0\0\u3ff0\0\u4020\0\u4050\0\u4080\0\u40b0"+
    "\0\u40e0\0\u4110\0\u4140\0\u4170\0\u41a0\0\u41d0\0\u4200\0\u4230"+
    "\0\u4260\0\u4290\0\u42c0\0\u42f0\0\u4320\0\u4350\0\u4380\0\u43b0"+
    "\0\u43e0\0\u4410\0\u4440\0\u4470\0\u44a0\0\u44d0\0\u4500\0\u4530"+
    "\0\u4560\0\u4590\0\u45c0\0\u45f0\0\u4620\0\u4650\0\u4680\0\u46b0"+
    "\0\u46e0\0\u4710\0\u4740\0\u4770\0\u47a0\0\u47d0\0\u4800\0\u4830"+
    "\0\u4860\0\u4890\0\u48c0\0\u48f0\0\u4920\0\u4950\0\u4980\0\u49b0"+
    "\0\u49e0\0\u4a10\0\u4a40\0\u4a70\0\u4aa0\0\u4ad0\0\u4b00\0\u4b30"+
    "\0\u4b60\0\u4b90\0\u4bc0\0\u4bf0\0\u4c20\0\60\0\u0120\0\u4c50"+
    "\0\u4c80\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\1\12\1\13\1\12\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\3\6\1\33\1\34\1\35\1\36\1\37"+
    "\1\6\1\40\1\41\1\42\1\43\1\6\1\44\5\6"+
    "\1\45\61\0\1\3\2\0\3\46\1\10\1\47\21\0"+
    "\17\46\1\0\6\46\1\0\1\50\5\0\1\51\1\52"+
    "\50\0\1\50\1\0\1\53\3\0\1\51\1\52\50\0"+
    "\1\54\2\0\1\55\1\7\1\55\1\0\1\55\21\0"+
    "\17\55\1\0\6\55\4\0\3\7\1\0\1\7\21\0"+
    "\17\7\1\0\6\7\1\0\1\56\5\0\1\57\51\0"+
    "\1\60\2\61\1\55\1\7\1\55\1\0\1\55\21\0"+
    "\1\62\16\55\1\0\6\55\12\63\1\64\45\63\14\0"+
    "\1\65\57\0\1\66\57\0\1\67\11\0\1\70\32\0"+
    "\1\54\2\0\1\55\1\7\1\55\1\0\1\55\21\0"+
    "\3\55\1\71\5\55\1\72\5\55\1\0\6\55\1\0"+
    "\1\54\2\0\1\55\1\7\1\55\1\0\1\55\21\0"+
    "\3\55\1\73\1\55\1\74\1\55\1\75\7\55\1\0"+
    "\6\55\1\0\1\54\2\0\1\55\1\7\1\55\1\0"+
    "\1\55\21\0\2\55\1\76\14\55\1\0\6\55\1\0"+
    "\1\54\2\0\1\55\1\7\1\55\1\0\1\77\21\0"+
    "\17\55\1\0\6\55\1\0\1\54\2\0\1\55\1\7"+
    "\1\55\1\0\1\55\21\0\1\100\16\55\1\0\6\55"+
    "\1\0\1\54\2\0\1\55\1\7\1\55\1\0\1\55"+
    "\21\0\5\55\1\101\1\55\1\102\1\55\1\103\5\55"+
    "\1\0\6\55\1\0\1\54\2\0\1\55\1\7\1\55"+
    "\1\0\1\55\21\0\7\55\1\104\7\55\1\0\6\55"+
    "\1\0\1\54\2\0\1\55\1\7\1\55\1\0\1\55"+
    "\21\0\7\55\1\105\7\55\1\0\6\55\1\0\1\54"+
    "\2\0\1\55\1\7\1\55\1\0\1\55\21\0\2\55"+
    "\1\106\2\55\1\107\11\55\1\0\6\55\1\0\1\54"+
    "\2\0\1\55\1\7\1\55\1\0\1\55\21\0\3\55"+
    "\1\110\13\55\1\0\6\55\4\0\1\111\2\112\1\0"+
    "\1\113\21\0\2\111\1\114\1\111\1\115\1\116\1\117"+
    "\1\120\1\121\1\111\1\122\1\111\1\123\1\111\1\124"+
    "\1\0\1\111\1\125\1\126\2\111\1\127\1\0\1\54"+
    "\2\0\1\55\1\7\1\55\1\0\1\130\21\0\17\55"+
    "\1\0\6\55\1\0\1\46\2\0\3\46\1\0\1\46"+
    "\21\0\17\46\1\0\6\46\1\0\1\131\2\61\3\46"+
    "\1\0\1\46\21\0\17\46\1\0\6\46\1\0\1\132"+
    "\57\0\1\133\2\61\54\0\3\134\1\135\7\134\1\0"+
    "\44\134\1\0\1\136\2\0\1\136\1\0\1\136\1\0"+
    "\1\136\21\0\17\136\1\0\6\136\1\0\1\136\2\0"+
    "\1\137\1\7\1\137\1\0\1\137\21\0\17\137\1\0"+
    "\6\137\1\0\1\56\5\0\1\57\1\52\50\0\1\57"+
    "\5\0\1\57\51\0\1\140\2\0\1\136\1\0\1\136"+
    "\1\0\1\136\21\0\17\136\1\0\6\136\1\0\1\133"+
    "\57\0\1\136\2\0\1\137\1\7\1\137\1\0\1\137"+
    "\21\0\1\137\1\141\15\137\1\0\6\137\1\0\1\136"+
    "\2\0\1\137\1\7\1\137\1\0\1\137\21\0\16\137"+
    "\1\142\1\0\6\137\1\0\1\136\2\0\1\137\1\7"+
    "\1\137\1\0\1\137\21\0\2\137\1\143\14\137\1\0"+
    "\6\137\1\0\1\136\2\0\1\137\1\7\1\137\1\0"+
    "\1\137\21\0\2\137\1\144\3\137\1\145\10\137\1\0"+
    "\6\137\1\0\1\136\2\0\1\137\1\7\1\137\1\0"+
    "\1\137\21\0\4\137\1\146\12\137\1\0\6\137\1\0"+
    "\1\136\2\0\1\137\1\7\1\137\1\0\1\137\21\0"+
    "\2\137\1\147\14\137\1\0\6\137\1\0\1\136\2\0"+
    "\1\137\1\7\1\137\1\0\1\137\21\0\4\137\1\150"+
    "\12\137\1\0\6\137\1\0\1\136\2\0\1\137\1\7"+
    "\1\137\1\0\1\137\21\0\7\137\1\151\7\137\1\0"+
    "\6\137\1\0\1\136\2\0\1\137\1\7\1\137\1\0"+
    "\1\137\21\0\16\137\1\152\1\0\6\137\1\0\1\136"+
    "\2\0\1\137\1\7\1\137\1\0\1\137\21\0\1\153"+
    "\16\137\1\0\6\137\1\0\1\136\2\0\1\137\1\7"+
    "\1\137\1\0\1\137\21\0\1\154\16\137\1\0\6\137"+
    "\1\0\1\136\2\0\1\137\1\7\1\137\1\0\1\155"+
    "\21\0\17\137\1\0\6\137\1\0\1\136\2\0\1\137"+
    "\1\7\1\137\1\0\1\137\21\0\7\137\1\156\7\137"+
    "\1\0\6\137\1\0\1\136\2\0\1\137\1\7\1\137"+
    "\1\0\1\137\21\0\2\137\1\157\14\137\1\0\6\137"+
    "\1\0\1\136\2\0\1\137\1\7\1\137\1\0\1\137"+
    "\21\0\3\137\1\160\13\137\1\0\6\137\1\0\1\161"+
    "\2\0\1\162\1\112\1\162\1\0\1\162\21\0\17\162"+
    "\1\0\6\162\4\0\3\112\1\0\1\112\21\0\17\112"+
    "\1\0\6\112\1\0\1\161\2\0\1\162\1\112\1\162"+
    "\1\0\1\162\21\0\1\163\11\162\1\164\4\162\1\0"+
    "\1\165\5\162\1\0\1\161\2\0\1\162\1\112\1\162"+
    "\1\0\1\166\21\0\11\162\1\167\5\162\1\0\6\162"+
    "\1\0\1\161\2\0\1\162\1\112\1\162\1\0\1\162"+
    "\21\0\5\162\1\170\11\162\1\0\6\162\1\0\1\161"+
    "\2\0\1\162\1\112\1\162\1\0\1\162\21\0\1\162"+
    "\1\171\1\172\1\162\1\173\1\162\1\174\5\162\1\175"+
    "\1\176\1\162\1\0\6\162\1\0\1\161\2\0\1\162"+
    "\1\112\1\162\1\0\1\177\21\0\7\162\1\200\7\162"+
    "\1\0\6\162\1\0\1\161\2\0\1\162\1\112\1\162"+
    "\1\0\1\162\21\0\13\162\1\201\3\162\1\0\3\162"+
    "\1\202\2\162\1\0\1\161\2\0\1\162\1\112\1\162"+
    "\1\0\1\162\21\0\7\162\1\203\7\162\1\0\6\162"+
    "\1\0\1\161\2\0\1\162\1\112\1\162\1\0\1\204"+
    "\21\0\17\162\1\0\6\162\1\0\1\161\2\0\1\162"+
    "\1\112\1\162\1\0\1\162\21\0\5\162\1\205\1\162"+
    "\1\206\7\162\1\0\6\162\1\0\1\161\2\0\1\162"+
    "\1\112\1\162\1\0\1\207\21\0\5\162\1\210\11\162"+
    "\1\0\6\162\1\0\1\161\2\0\1\162\1\112\1\162"+
    "\1\0\1\162\21\0\7\162\1\211\7\162\1\0\6\162"+
    "\1\0\1\161\2\0\1\162\1\112\1\162\1\0\1\162"+
    "\21\0\5\162\1\212\11\162\1\0\6\162\1\0\1\161"+
    "\2\0\1\162\1\112\1\162\1\0\1\162\21\0\7\162"+
    "\1\213\7\162\1\0\6\162\1\0\1\136\2\0\1\137"+
    "\1\7\1\137\1\0\1\137\21\0\2\137\1\214\14\137"+
    "\1\0\6\137\1\0\1\131\2\0\3\46\1\0\1\46"+
    "\21\0\17\46\1\0\6\46\1\0\1\132\6\0\1\52"+
    "\47\0\13\134\1\0\44\134\3\135\1\215\7\135\1\216"+
    "\44\135\1\0\1\217\2\0\1\217\1\0\1\217\1\0"+
    "\1\217\21\0\17\217\1\0\6\217\1\0\1\217\2\0"+
    "\1\220\1\7\1\220\1\0\1\220\21\0\17\220\1\0"+
    "\6\220\1\0\1\221\2\0\1\217\1\0\1\217\1\0"+
    "\1\217\21\0\17\217\1\0\6\217\1\0\1\217\2\0"+
    "\1\220\1\7\1\220\1\0\1\222\21\0\17\220\1\0"+
    "\6\220\1\0\1\217\2\0\1\220\1\7\1\220\1\0"+
    "\1\220\21\0\3\220\1\223\13\220\1\0\6\220\1\0"+
    "\1\217\2\0\1\220\1\7\1\220\1\0\1\220\21\0"+
    "\1\220\1\224\15\220\1\0\6\220\1\0\1\217\2\0"+
    "\1\220\1\7\1\220\1\0\1\220\21\0\5\220\1\225"+
    "\11\220\1\0\6\220\1\0\1\217\2\0\1\220\1\7"+
    "\1\220\1\0\1\226\21\0\17\220\1\0\6\220\1\0"+
    "\1\217\2\0\1\220\1\7\1\220\1\0\1\220\21\0"+
    "\16\220\1\227\1\0\6\220\1\0\1\217\2\0\1\220"+
    "\1\7\1\220\1\0\1\230\21\0\17\220\1\0\6\220"+
    "\1\0\1\217\2\0\1\220\1\7\1\220\1\0\1\220"+
    "\21\0\7\220\1\231\6\220\1\232\1\0\6\220\1\0"+
    "\1\217\2\0\1\220\1\7\1\220\1\0\1\220\21\0"+
    "\4\220\1\233\12\220\1\0\6\220\1\0\1\217\2\0"+
    "\1\220\1\7\1\220\1\0\1\220\21\0\12\220\1\234"+
    "\4\220\1\0\6\220\1\0\1\217\2\0\1\220\1\7"+
    "\1\220\1\0\1\220\21\0\4\220\1\235\12\220\1\0"+
    "\6\220\1\0\1\217\2\0\1\220\1\7\1\220\1\0"+
    "\1\220\21\0\1\236\16\220\1\0\6\220\1\0\1\217"+
    "\2\0\1\220\1\7\1\220\1\0\1\220\21\0\1\237"+
    "\16\220\1\0\6\220\1\0\1\217\2\0\1\220\1\7"+
    "\1\220\1\0\1\220\21\0\5\220\1\240\11\220\1\0"+
    "\6\220\1\0\1\217\2\0\1\220\1\7\1\220\1\0"+
    "\1\220\21\0\16\220\1\241\1\0\6\220\1\0\1\242"+
    "\2\0\1\242\1\0\1\242\1\0\1\242\21\0\17\242"+
    "\1\0\6\242\1\0\1\242\2\0\1\243\1\112\1\243"+
    "\1\0\1\243\21\0\17\243\1\0\6\243\1\0\1\242"+
    "\2\0\1\243\1\112\1\243\1\0\1\243\21\0\4\243"+
    "\1\244\12\243\1\0\6\243\1\0\1\242\2\0\1\243"+
    "\1\112\1\243\1\0\1\243\21\0\14\243\1\245\2\243"+
    "\1\0\6\243\1\0\1\242\2\0\1\243\1\112\1\243"+
    "\1\0\1\246\21\0\17\243\1\0\6\243\1\0\1\242"+
    "\2\0\1\243\1\112\1\243\1\0\1\243\21\0\1\243"+
    "\1\247\15\243\1\0\1\243\1\250\4\243\1\0\1\242"+
    "\2\0\1\243\1\112\1\243\1\0\1\243\21\0\1\243"+
    "\1\251\15\243\1\0\6\243\1\0\1\242\2\0\1\243"+
    "\1\112\1\243\1\0\1\243\21\0\2\243\1\252\11\243"+
    "\1\253\1\243\1\254\1\0\6\243\1\0\1\242\2\0"+
    "\1\243\1\112\1\243\1\0\1\243\21\0\2\243\1\255"+
    "\14\243\1\0\6\243\1\0\1\242\2\0\1\243\1\112"+
    "\1\243\1\0\1\243\21\0\2\243\1\256\14\243\1\0"+
    "\6\243\1\0\1\242\2\0\1\243\1\112\1\243\1\0"+
    "\1\257\21\0\17\243\1\0\6\243\1\0\1\242\2\0"+
    "\1\243\1\112\1\243\1\0\1\260\21\0\17\243\1\0"+
    "\6\243\1\0\1\242\2\0\1\243\1\112\1\243\1\0"+
    "\1\243\21\0\5\243\1\261\11\243\1\0\6\243\1\0"+
    "\1\242\2\0\1\243\1\112\1\243\1\0\1\243\21\0"+
    "\5\243\1\262\11\243\1\0\6\243\1\0\1\242\2\0"+
    "\1\243\1\112\1\243\1\0\1\243\21\0\1\243\1\263"+
    "\1\264\14\243\1\0\6\243\1\0\1\242\2\0\1\243"+
    "\1\112\1\243\1\0\1\243\21\0\2\243\1\265\14\243"+
    "\1\0\6\243\1\0\1\242\2\0\1\243\1\112\1\243"+
    "\1\0\1\243\21\0\14\243\1\266\2\243\1\0\6\243"+
    "\1\0\1\242\2\0\1\243\1\112\1\243\1\0\1\243"+
    "\21\0\17\243\1\0\4\243\1\267\1\243\1\0\1\242"+
    "\2\0\1\243\1\112\1\243\1\0\1\243\21\0\17\243"+
    "\1\0\1\270\5\243\1\0\1\242\2\0\1\243\1\112"+
    "\1\243\1\0\1\243\21\0\17\243\1\0\1\243\1\271"+
    "\4\243\1\0\1\242\2\0\1\243\1\112\1\243\1\0"+
    "\1\243\21\0\2\243\1\272\14\243\1\0\6\243\1\0"+
    "\1\242\2\0\1\243\1\112\1\243\1\0\1\243\21\0"+
    "\1\273\16\243\1\0\6\243\1\0\1\242\2\0\1\243"+
    "\1\112\1\243\1\0\1\274\21\0\17\243\1\0\6\243"+
    "\1\0\1\242\2\0\1\243\1\112\1\243\1\0\1\243"+
    "\21\0\2\243\1\275\14\243\1\0\6\243\1\0\1\242"+
    "\2\0\1\243\1\112\1\243\1\0\1\243\21\0\2\243"+
    "\1\276\14\243\1\0\6\243\1\0\1\242\2\0\1\243"+
    "\1\112\1\243\1\0\1\243\21\0\17\243\1\0\3\243"+
    "\1\277\2\243\1\0\1\242\2\0\1\243\1\112\1\243"+
    "\1\0\1\243\21\0\6\243\1\300\10\243\1\0\6\243"+
    "\1\0\1\217\2\0\1\220\1\7\1\220\1\0\1\220"+
    "\21\0\6\220\1\301\10\220\1\0\6\220\3\135\1\302"+
    "\7\135\1\216\44\135\3\216\1\303\54\216\1\0\1\304"+
    "\2\0\1\304\1\0\1\304\1\0\1\304\21\0\17\304"+
    "\1\0\6\304\1\0\1\304\2\0\1\305\1\7\1\305"+
    "\1\0\1\305\21\0\17\305\1\0\6\305\1\0\1\306"+
    "\2\0\1\304\1\0\1\304\1\0\1\304\21\0\17\304"+
    "\1\0\6\304\1\0\1\304\2\0\1\305\1\7\1\305"+
    "\1\0\1\305\21\0\2\305\1\307\14\305\1\0\6\305"+
    "\1\0\1\304\2\0\1\305\1\7\1\305\1\0\1\305"+
    "\21\0\3\305\1\310\13\305\1\0\6\305\1\0\1\304"+
    "\2\0\1\305\1\7\1\305\1\0\1\305\21\0\4\305"+
    "\1\311\12\305\1\0\6\305\1\0\1\304\2\0\1\305"+
    "\1\7\1\305\1\0\1\305\21\0\1\312\16\305\1\0"+
    "\6\305\1\0\1\304\2\0\1\305\1\7\1\305\1\0"+
    "\1\305\21\0\3\305\1\313\13\305\1\0\6\305\1\0"+
    "\1\304\2\0\1\305\1\7\1\305\1\0\1\305\21\0"+
    "\17\305\1\0\1\305\1\314\4\305\1\0\1\304\2\0"+
    "\1\305\1\7\1\305\1\0\1\305\21\0\13\305\1\315"+
    "\3\305\1\0\6\305\1\0\1\304\2\0\1\305\1\7"+
    "\1\305\1\0\1\305\21\0\5\305\1\316\11\305\1\0"+
    "\6\305\1\0\1\304\2\0\1\305\1\7\1\305\1\0"+
    "\1\305\21\0\7\305\1\317\7\305\1\0\6\305\1\0"+
    "\1\304\2\0\1\305\1\7\1\305\1\0\1\305\21\0"+
    "\3\305\1\320\13\305\1\0\6\305\1\0\1\304\2\0"+
    "\1\305\1\7\1\305\1\0\1\305\21\0\7\305\1\321"+
    "\7\305\1\0\6\305\1\0\1\304\2\0\1\305\1\7"+
    "\1\305\1\0\1\305\21\0\1\305\1\322\15\305\1\0"+
    "\6\305\1\0\1\304\2\0\1\305\1\7\1\305\1\0"+
    "\1\305\21\0\4\305\1\323\12\305\1\0\6\305\1\0"+
    "\1\304\2\0\1\305\1\7\1\305\1\0\1\324\21\0"+
    "\17\305\1\0\6\305\1\0\1\325\2\0\1\325\1\0"+
    "\1\325\1\0\1\325\21\0\17\325\1\0\6\325\1\0"+
    "\1\325\2\0\1\326\1\112\1\326\1\0\1\326\21\0"+
    "\17\326\1\0\6\326\1\0\1\325\2\0\1\326\1\112"+
    "\1\326\1\0\1\327\21\0\17\326\1\0\6\326\1\0"+
    "\1\325\2\0\1\326\1\112\1\326\1\0\1\330\21\0"+
    "\17\326\1\0\6\326\1\0\1\325\2\0\1\326\1\112"+
    "\1\326\1\0\1\326\21\0\4\326\1\331\12\326\1\0"+
    "\6\326\1\0\1\325\2\0\1\326\1\112\1\326\1\0"+
    "\1\326\21\0\3\326\1\332\13\326\1\0\6\326\1\0"+
    "\1\325\2\0\1\326\1\112\1\326\1\0\1\326\21\0"+
    "\2\326\1\333\14\326\1\0\6\326\1\0\1\325\2\0"+
    "\1\326\1\112\1\326\1\0\1\326\21\0\5\326\1\334"+
    "\11\326\1\0\6\326\1\0\1\325\2\0\1\326\1\112"+
    "\1\326\1\0\1\326\21\0\17\326\1\0\1\326\1\335"+
    "\4\326\1\0\1\325\2\0\1\326\1\112\1\326\1\0"+
    "\1\326\21\0\1\326\1\336\15\326\1\0\6\326\1\0"+
    "\1\325\2\0\1\326\1\112\1\326\1\0\1\326\21\0"+
    "\7\326\1\337\7\326\1\0\6\326\1\0\1\325\2\0"+
    "\1\326\1\112\1\326\1\0\1\326\21\0\5\326\1\340"+
    "\11\326\1\0\6\326\1\0\1\325\2\0\1\326\1\112"+
    "\1\326\1\0\1\326\21\0\7\326\1\341\7\326\1\0"+
    "\6\326\1\0\1\325\2\0\1\326\1\112\1\326\1\0"+
    "\1\326\21\0\16\326\1\342\1\0\6\326\1\0\1\325"+
    "\2\0\1\326\1\112\1\326\1\0\1\326\21\0\16\326"+
    "\1\343\1\0\6\326\1\0\1\325\2\0\1\326\1\112"+
    "\1\326\1\0\1\326\21\0\17\326\1\0\1\326\1\344"+
    "\4\326\1\0\1\325\2\0\1\326\1\112\1\326\1\0"+
    "\1\326\21\0\17\326\1\0\1\345\5\326\1\0\1\325"+
    "\2\0\1\326\1\112\1\326\1\0\1\346\21\0\17\326"+
    "\1\0\6\326\1\0\1\325\2\0\1\326\1\112\1\326"+
    "\1\0\1\347\21\0\17\326\1\0\6\326\1\0\1\325"+
    "\2\0\1\326\1\112\1\326\1\0\1\350\21\0\17\326"+
    "\1\0\6\326\1\0\1\325\2\0\1\326\1\112\1\326"+
    "\1\0\1\326\21\0\2\326\1\351\14\326\1\0\6\326"+
    "\1\0\1\325\2\0\1\326\1\112\1\326\1\0\1\326"+
    "\21\0\11\326\1\352\5\326\1\0\6\326\1\0\1\325"+
    "\2\0\1\326\1\112\1\326\1\0\1\326\21\0\3\326"+
    "\1\353\13\326\1\0\6\326\1\0\1\325\2\0\1\326"+
    "\1\112\1\326\1\0\1\326\21\0\11\326\1\354\5\326"+
    "\1\0\6\326\1\0\1\325\2\0\1\326\1\112\1\326"+
    "\1\0\1\326\21\0\5\326\1\355\11\326\1\0\6\326"+
    "\1\0\1\325\2\0\1\326\1\112\1\326\1\0\1\326"+
    "\21\0\2\326\1\356\14\326\1\0\6\326\1\0\1\325"+
    "\2\0\1\326\1\112\1\326\1\0\1\326\21\0\17\326"+
    "\1\0\1\326\1\357\4\326\1\0\1\325\2\0\1\326"+
    "\1\112\1\326\1\0\1\326\21\0\5\326\1\360\11\326"+
    "\1\0\6\326\1\0\1\325\2\0\1\326\1\112\1\326"+
    "\1\0\1\361\21\0\17\326\1\0\6\326\1\0\1\304"+
    "\2\0\1\305\1\7\1\305\1\0\1\305\21\0\5\305"+
    "\1\362\11\305\1\0\6\305\3\135\1\134\7\135\1\216"+
    "\44\135\3\216\1\363\54\216\1\0\1\364\2\0\1\364"+
    "\1\0\1\364\1\0\1\364\21\0\17\364\1\0\6\364"+
    "\1\0\1\364\2\0\1\365\1\7\1\365\1\0\1\365"+
    "\21\0\17\365\1\0\6\365\1\0\1\366\2\0\1\364"+
    "\1\0\1\364\1\0\1\364\21\0\17\364\1\0\6\364"+
    "\1\0\1\364\2\0\1\365\1\7\1\365\1\0\1\365"+
    "\21\0\3\365\1\367\13\365\1\0\6\365\1\0\1\364"+
    "\2\0\1\365\1\7\1\365\1\0\1\365\21\0\1\365"+
    "\1\370\15\365\1\0\6\365\1\0\1\364\2\0\1\365"+
    "\1\7\1\365\1\0\1\365\21\0\5\365\1\371\11\365"+
    "\1\0\6\365\1\0\1\364\2\0\1\365\1\7\1\365"+
    "\1\0\1\365\21\0\16\365\1\372\1\0\6\365\1\0"+
    "\1\364\2\0\1\365\1\7\1\365\1\0\1\365\21\0"+
    "\5\365\1\373\11\365\1\0\6\365\1\0\1\364\2\0"+
    "\1\365\1\7\1\365\1\0\1\365\21\0\2\365\1\374"+
    "\14\365\1\0\6\365\1\0\1\364\2\0\1\365\1\7"+
    "\1\365\1\0\1\365\21\0\5\365\1\375\11\365\1\0"+
    "\6\365\1\0\1\364\2\0\1\365\1\7\1\365\1\0"+
    "\1\365\21\0\3\365\1\376\13\365\1\0\6\365\1\0"+
    "\1\364\2\0\1\365\1\7\1\365\1\0\1\365\21\0"+
    "\2\365\1\377\14\365\1\0\6\365\1\0\1\364\2\0"+
    "\1\365\1\7\1\365\1\0\1\365\21\0\7\365\1\u0100"+
    "\7\365\1\0\6\365\1\0\1\364\2\0\1\365\1\7"+
    "\1\365\1\0\1\365\21\0\5\365\1\u0101\11\365\1\0"+
    "\6\365\1\0\1\u0102\2\0\1\u0102\1\0\1\u0102\1\0"+
    "\1\u0102\21\0\17\u0102\1\0\6\u0102\1\0\1\u0102\2\0"+
    "\1\u0103\1\112\1\u0103\1\0\1\u0103\21\0\17\u0103\1\0"+
    "\6\u0103\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103\1\0"+
    "\1\u0103\21\0\1\u0104\16\u0103\1\0\6\u0103\1\0\1\u0102"+
    "\2\0\1\u0103\1\112\1\u0103\1\0\1\u0103\21\0\2\u0103"+
    "\1\u0105\14\u0103\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103"+
    "\1\112\1\u0103\1\0\1\u0103\21\0\11\u0103\1\u0106\5\u0103"+
    "\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103"+
    "\1\0\1\u0103\21\0\2\u0103\1\u0107\14\u0103\1\0\6\u0103"+
    "\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103\1\0\1\u0108"+
    "\21\0\17\u0103\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103"+
    "\1\112\1\u0103\1\0\1\u0103\21\0\5\u0103\1\u0109\11\u0103"+
    "\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103"+
    "\1\0\1\u0103\21\0\11\u0103\1\u010a\5\u0103\1\0\6\u0103"+
    "\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103\1\0\1\u0103"+
    "\21\0\15\u0103\1\u010b\1\u0103\1\0\6\u0103\1\0\1\u0102"+
    "\2\0\1\u0103\1\112\1\u0103\1\0\1\u0103\21\0\12\u0103"+
    "\1\u010c\4\u0103\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103"+
    "\1\112\1\u0103\1\0\1\u0103\21\0\15\u0103\1\u010d\1\u0103"+
    "\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103"+
    "\1\0\1\u010e\21\0\17\u0103\1\0\6\u0103\1\0\1\u0102"+
    "\2\0\1\u0103\1\112\1\u0103\1\0\1\u0103\21\0\5\u0103"+
    "\1\u010f\11\u0103\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103"+
    "\1\112\1\u0103\1\0\1\u0103\21\0\5\u0103\1\u0110\11\u0103"+
    "\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103"+
    "\1\0\1\u0103\21\0\3\u0103\1\u0111\13\u0103\1\0\6\u0103"+
    "\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103\1\0\1\u0103"+
    "\21\0\1\u0112\16\u0103\1\0\6\u0103\1\0\1\u0102\2\0"+
    "\1\u0103\1\112\1\u0103\1\0\1\u0103\21\0\4\u0103\1\u0113"+
    "\12\u0103\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103\1\112"+
    "\1\u0103\1\0\1\u0103\21\0\4\u0103\1\u0114\12\u0103\1\0"+
    "\6\u0103\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103\1\0"+
    "\1\u0103\21\0\7\u0103\1\u0115\7\u0103\1\0\6\u0103\1\0"+
    "\1\u0102\2\0\1\u0103\1\112\1\u0103\1\0\1\u0103\21\0"+
    "\7\u0103\1\u0116\7\u0103\1\0\6\u0103\1\0\1\u0102\2\0"+
    "\1\u0103\1\112\1\u0103\1\0\1\u0103\21\0\7\u0103\1\u0117"+
    "\7\u0103\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103\1\112"+
    "\1\u0103\1\0\1\u0103\21\0\17\u0103\1\0\5\u0103\1\u0118"+
    "\1\0\1\u0102\2\0\1\u0103\1\112\1\u0103\1\0\1\u0103"+
    "\21\0\3\u0103\1\u0119\13\u0103\1\0\6\u0103\1\0\1\u0102"+
    "\2\0\1\u0103\1\112\1\u0103\1\0\1\u0103\21\0\2\u0103"+
    "\1\u011a\14\u0103\1\0\6\u0103\1\0\1\u0102\2\0\1\u0103"+
    "\1\112\1\u0103\1\0\1\u0103\21\0\3\u0103\1\u011b\13\u0103"+
    "\1\0\6\u0103\1\0\1\364\2\0\1\365\1\7\1\365"+
    "\1\0\1\365\21\0\6\365\1\u011c\10\365\1\0\6\365"+
    "\3\216\1\u011d\54\216\1\0\1\u011e\2\0\1\u011e\1\0"+
    "\1\u011e\1\0\1\u011e\21\0\17\u011e\1\0\6\u011e\1\0"+
    "\1\u011e\2\0\1\u011f\1\7\1\u011f\1\0\1\u011f\21\0"+
    "\17\u011f\1\0\6\u011f\1\0\1\u0120\2\0\1\u011e\1\0"+
    "\1\u011e\1\0\1\u011e\21\0\17\u011e\1\0\6\u011e\1\0"+
    "\1\u011e\2\0\1\u011f\1\7\1\u011f\1\0\1\u0121\21\0"+
    "\17\u011f\1\0\6\u011f\1\0\1\u011e\2\0\1\u011f\1\7"+
    "\1\u011f\1\0\1\u011f\21\0\3\u011f\1\u0122\13\u011f\1\0"+
    "\6\u011f\1\0\1\u011e\2\0\1\u011f\1\7\1\u011f\1\0"+
    "\1\u011f\21\0\16\u011f\1\u0123\1\0\6\u011f\1\0\1\u011e"+
    "\2\0\1\u011f\1\7\1\u011f\1\0\1\u011f\21\0\5\u011f"+
    "\1\u0124\11\u011f\1\0\6\u011f\1\0\1\u011e\2\0\1\u011f"+
    "\1\7\1\u011f\1\0\1\u011f\21\0\2\u011f\1\u0125\14\u011f"+
    "\1\0\6\u011f\1\0\1\u011e\2\0\1\u011f\1\7\1\u011f"+
    "\1\0\1\u011f\21\0\1\u0126\16\u011f\1\0\6\u011f\1\0"+
    "\1\u011e\2\0\1\u011f\1\7\1\u011f\1\0\1\u011f\21\0"+
    "\5\u011f\1\u0127\11\u011f\1\0\6\u011f\1\0\1\u011e\2\0"+
    "\1\u011f\1\7\1\u011f\1\0\1\u011f\21\0\14\u011f\1\u0128"+
    "\2\u011f\1\0\6\u011f\1\0\1\u011e\2\0\1\u011f\1\7"+
    "\1\u011f\1\0\1\u011f\21\0\1\u0129\16\u011f\1\0\6\u011f"+
    "\1\0\1\u012a\2\0\1\u012a\1\0\1\u012a\1\0\1\u012a"+
    "\21\0\17\u012a\1\0\6\u012a\1\0\1\u012a\2\0\1\u012b"+
    "\1\112\1\u012b\1\0\1\u012b\21\0\17\u012b\1\0\6\u012b"+
    "\1\0\1\u012a\2\0\1\u012b\1\112\1\u012b\1\0\1\u012b"+
    "\21\0\6\u012b\1\u012c\10\u012b\1\0\6\u012b\1\0\1\u012a"+
    "\2\0\1\u012b\1\112\1\u012b\1\0\1\u012b\21\0\5\u012b"+
    "\1\u012d\11\u012b\1\0\6\u012b\1\0\1\u012a\2\0\1\u012b"+
    "\1\112\1\u012b\1\0\1\u012b\21\0\1\u012b\1\u012e\15\u012b"+
    "\1\0\6\u012b\1\0\1\u012a\2\0\1\u012b\1\112\1\u012b"+
    "\1\0\1\u012b\21\0\1\u012f\16\u012b\1\0\6\u012b\1\0"+
    "\1\u012a\2\0\1\u012b\1\112\1\u012b\1\0\1\u012b\21\0"+
    "\12\u012b\1\u0130\4\u012b\1\0\6\u012b\1\0\1\u012a\2\0"+
    "\1\u012b\1\112\1\u012b\1\0\1\u012b\21\0\2\u012b\1\u0131"+
    "\14\u012b\1\0\6\u012b\1\0\1\u012a\2\0\1\u012b\1\112"+
    "\1\u012b\1\0\1\u012b\21\0\2\u012b\1\u0132\14\u012b\1\0"+
    "\6\u012b\1\0\1\u012a\2\0\1\u012b\1\112\1\u012b\1\0"+
    "\1\u012b\21\0\2\u012b\1\u0133\14\u012b\1\0\6\u012b\1\0"+
    "\1\u012a\2\0\1\u012b\1\112\1\u012b\1\0\1\u012b\21\0"+
    "\5\u012b\1\u0134\11\u012b\1\0\6\u012b\1\0\1\u012a\2\0"+
    "\1\u012b\1\112\1\u012b\1\0\1\u012b\21\0\2\u012b\1\u0135"+
    "\14\u012b\1\0\6\u012b\1\0\1\u012a\2\0\1\u012b\1\112"+
    "\1\u012b\1\0\1\u012b\21\0\1\u0136\16\u012b\1\0\6\u012b"+
    "\1\0\1\u012a\2\0\1\u012b\1\112\1\u012b\1\0\1\u012b"+
    "\21\0\2\u012b\1\u0137\14\u012b\1\0\6\u012b\1\0\1\u012a"+
    "\2\0\1\u012b\1\112\1\u012b\1\0\1\u0138\21\0\17\u012b"+
    "\1\0\6\u012b\1\0\1\u012a\2\0\1\u012b\1\112\1\u012b"+
    "\1\0\1\u012b\21\0\17\u012b\1\0\2\u012b\1\u0139\3\u012b"+
    "\1\0\1\u012a\2\0\1\u012b\1\112\1\u012b\1\0\1\u012b"+
    "\21\0\4\u012b\1\u013a\12\u012b\1\0\6\u012b\1\0\1\u012a"+
    "\2\0\1\u012b\1\112\1\u012b\1\0\1\u012b\21\0\13\u012b"+
    "\1\u013b\3\u012b\1\0\6\u012b\1\0\1\u012a\2\0\1\u012b"+
    "\1\112\1\u012b\1\0\1\u013c\21\0\17\u012b\1\0\6\u012b"+
    "\1\0\1\u012a\2\0\1\u012b\1\112\1\u012b\1\0\1\u012b"+
    "\21\0\2\u012b\1\u013d\14\u012b\1\0\6\u012b\1\0\1\u011e"+
    "\2\0\1\u011f\1\7\1\u011f\1\0\1\u013e\21\0\17\u011f"+
    "\1\0\6\u011f\3\0\1\u013f\55\0\1\u0140\2\0\1\u0140"+
    "\1\0\1\u0140\1\0\1\u0140\21\0\17\u0140\1\0\6\u0140"+
    "\1\0\1\u0140\2\0\1\u0141\1\7\1\u0141\1\0\1\u0141"+
    "\21\0\17\u0141\1\0\6\u0141\1\0\1\u0142\2\0\1\u0140"+
    "\1\0\1\u0140\1\0\1\u0140\21\0\17\u0140\1\0\6\u0140"+
    "\1\0\1\u0140\2\0\1\u0141\1\7\1\u0141\1\0\1\u0141"+
    "\21\0\2\u0141\1\u0143\14\u0141\1\0\6\u0141\1\0\1\u0140"+
    "\2\0\1\u0141\1\7\1\u0141\1\0\1\u0141\21\0\4\u0141"+
    "\1\u0144\12\u0141\1\0\6\u0141\1\0\1\u0140\2\0\1\u0141"+
    "\1\7\1\u0141\1\0\1\u0141\21\0\12\u0141\1\u0145\4\u0141"+
    "\1\0\6\u0141\1\0\1\u0140\2\0\1\u0141\1\7\1\u0141"+
    "\1\0\1\u0141\21\0\5\u0141\1\u0146\11\u0141\1\0\6\u0141"+
    "\1\0\1\u0140\2\0\1\u0141\1\7\1\u0141\1\0\1\u0141"+
    "\21\0\3\u0141\1\u0147\13\u0141\1\0\6\u0141\1\0\1\u0148"+
    "\2\0\1\u0148\1\0\1\u0148\1\0\1\u0148\21\0\17\u0148"+
    "\1\0\6\u0148\1\0\1\u0148\2\0\1\u0149\1\112\1\u0149"+
    "\1\0\1\u0149\21\0\17\u0149\1\0\6\u0149\1\0\1\u0148"+
    "\2\0\1\u0149\1\112\1\u0149\1\0\1\u014a\21\0\17\u0149"+
    "\1\0\6\u0149\1\0\1\u0148\2\0\1\u0149\1\112\1\u0149"+
    "\1\0\1\u0149\21\0\2\u0149\1\u014b\14\u0149\1\0\6\u0149"+
    "\1\0\1\u0148\2\0\1\u0149\1\112\1\u0149\1\0\1\u0149"+
    "\21\0\5\u0149\1\u014c\11\u0149\1\0\6\u0149\1\0\1\u0148"+
    "\2\0\1\u0149\1\112\1\u0149\1\0\1\u0149\21\0\3\u0149"+
    "\1\u014d\13\u0149\1\0\6\u0149\1\0\1\u0148\2\0\1\u0149"+
    "\1\112\1\u0149\1\0\1\u0149\21\0\5\u0149\1\u014e\11\u0149"+
    "\1\0\6\u0149\1\0\1\u0148\2\0\1\u0149\1\112\1\u0149"+
    "\1\0\1\u0149\21\0\5\u0149\1\u014f\11\u0149\1\0\6\u0149"+
    "\1\0\1\u0148\2\0\1\u0149\1\112\1\u0149\1\0\1\u0149"+
    "\21\0\5\u0149\1\u0150\11\u0149\1\0\6\u0149\1\0\1\u0148"+
    "\2\0\1\u0149\1\112\1\u0149\1\0\1\u0149\21\0\5\u0149"+
    "\1\u0151\11\u0149\1\0\6\u0149\1\0\1\u0148\2\0\1\u0149"+
    "\1\112\1\u0149\1\0\1\u0149\21\0\1\u0149\1\u0152\15\u0149"+
    "\1\0\6\u0149\1\0\1\u0148\2\0\1\u0149\1\112\1\u0149"+
    "\1\0\1\u0149\21\0\2\u0149\1\u0153\14\u0149\1\0\6\u0149"+
    "\1\0\1\u0148\2\0\1\u0149\1\112\1\u0149\1\0\1\u0149"+
    "\21\0\5\u0149\1\u0154\11\u0149\1\0\6\u0149\1\0\1\u0148"+
    "\2\0\1\u0149\1\112\1\u0149\1\0\1\u0149\21\0\7\u0149"+
    "\1\u0155\7\u0149\1\0\6\u0149\1\0\1\u0148\2\0\1\u0149"+
    "\1\112\1\u0149\1\0\1\u0149\21\0\7\u0149\1\u0156\7\u0149"+
    "\1\0\6\u0149\1\0\1\u0148\2\0\1\u0149\1\112\1\u0149"+
    "\1\0\1\u0149\21\0\2\u0149\1\u0157\14\u0149\1\0\6\u0149"+
    "\1\0\1\u0140\2\0\1\u0141\1\7\1\u0141\1\0\1\u0141"+
    "\21\0\2\u0141\1\u0158\14\u0141\1\0\6\u0141\3\0\1\u0159"+
    "\55\0\1\u015a\2\0\1\u015a\1\0\1\u015a\1\0\1\u015a"+
    "\21\0\17\u015a\1\0\6\u015a\1\0\1\u015a\2\0\1\u015b"+
    "\1\7\1\u015b\1\0\1\u015b\21\0\17\u015b\1\0\6\u015b"+
    "\1\0\1\u015c\2\0\1\u015a\1\0\1\u015a\1\0\1\u015a"+
    "\21\0\17\u015a\1\0\6\u015a\1\0\1\u015a\2\0\1\u015b"+
    "\1\7\1\u015b\1\0\1\u015b\21\0\7\u015b\1\u015d\7\u015b"+
    "\1\0\6\u015b\1\0\1\u015a\2\0\1\u015b\1\7\1\u015b"+
    "\1\0\1\u015b\21\0\16\u015b\1\u015e\1\0\6\u015b\1\0"+
    "\1\u015f\2\0\1\u015f\1\0\1\u015f\1\0\1\u015f\21\0"+
    "\17\u015f\1\0\6\u015f\1\0\1\u015f\2\0\1\u0160\1\112"+
    "\1\u0160\1\0\1\u0160\21\0\17\u0160\1\0\6\u0160\1\0"+
    "\1\u015f\2\0\1\u0160\1\112\1\u0160\1\0\1\u0160\21\0"+
    "\2\u0160\1\u0161\14\u0160\1\0\6\u0160\1\0\1\u015f\2\0"+
    "\1\u0160\1\112\1\u0160\1\0\1\u0160\21\0\2\u0160\1\u0162"+
    "\14\u0160\1\0\6\u0160\1\0\1\u015f\2\0\1\u0160\1\112"+
    "\1\u0160\1\0\1\u0160\21\0\2\u0160\1\u0163\14\u0160\1\0"+
    "\6\u0160\1\0\1\u015f\2\0\1\u0160\1\112\1\u0160\1\0"+
    "\1\u0160\21\0\2\u0160\1\u0164\14\u0160\1\0\6\u0160\1\0"+
    "\1\u015f\2\0\1\u0160\1\112\1\u0160\1\0\1\u0165\21\0"+
    "\17\u0160\1\0\6\u0160\1\0\1\u015f\2\0\1\u0160\1\112"+
    "\1\u0160\1\0\1\u0160\21\0\3\u0160\1\u0166\13\u0160\1\0"+
    "\6\u0160\1\0\1\u015f\2\0\1\u0160\1\112\1\u0160\1\0"+
    "\1\u0160\21\0\2\u0160\1\u0167\14\u0160\1\0\6\u0160\1\0"+
    "\1\u015f\2\0\1\u0160\1\112\1\u0160\1\0\1\u0160\21\0"+
    "\6\u0160\1\u0168\10\u0160\1\0\6\u0160\1\0\1\u015a\2\0"+
    "\1\u015b\1\7\1\u015b\1\0\1\u015b\21\0\3\u015b\1\u0169"+
    "\13\u015b\1\0\6\u015b\1\0\1\u016a\2\0\1\u016a\1\0"+
    "\1\u016a\1\0\1\u016a\21\0\17\u016a\1\0\6\u016a\1\0"+
    "\1\u016a\2\0\1\u016b\1\7\1\u016b\1\0\1\u016b\21\0"+
    "\17\u016b\1\0\6\u016b\1\0\1\u016c\2\0\1\u016a\1\0"+
    "\1\u016a\1\0\1\u016a\21\0\17\u016a\1\0\6\u016a\1\0"+
    "\1\u016a\2\0\1\u016b\1\7\1\u016b\1\0\1\u016b\21\0"+
    "\3\u016b\1\u016d\13\u016b\1\0\6\u016b\1\0\1\u016e\2\0"+
    "\1\u016e\1\0\1\u016e\1\0\1\u016e\21\0\17\u016e\1\0"+
    "\6\u016e\1\0\1\u016e\2\0\1\u016f\1\112\1\u016f\1\0"+
    "\1\u016f\21\0\17\u016f\1\0\6\u016f\1\0\1\u016e\2\0"+
    "\1\u016f\1\112\1\u016f\1\0\1\u016f\21\0\1\u0170\16\u016f"+
    "\1\0\6\u016f\1\0\1\u016e\2\0\1\u016f\1\112\1\u016f"+
    "\1\0\1\u016f\21\0\5\u016f\1\u0171\11\u016f\1\0\6\u016f"+
    "\1\0\1\u0172\2\0\1\u0172\1\0\1\u0172\1\0\1\u0172"+
    "\21\0\17\u0172\1\0\6\u0172\1\0\1\u0172\2\0\1\u0173"+
    "\1\7\1\u0173\1\0\1\u0173\21\0\17\u0173\1\0\6\u0173"+
    "\1\0\1\u0174\2\0\1\u0172\1\0\1\u0172\1\0\1\u0172"+
    "\21\0\17\u0172\1\0\6\u0172\1\0\1\u0172\2\0\1\u0173"+
    "\1\7\1\u0173\1\0\1\u0173\21\0\1\u0175\16\u0173\1\0"+
    "\6\u0173\1\0\1\u0176\2\0\1\u0176\1\0\1\u0176\1\0"+
    "\1\u0176\21\0\17\u0176\1\0\6\u0176\1\0\1\u0176\2\0"+
    "\1\u0177\1\112\1\u0177\1\0\1\u0177\21\0\17\u0177\1\0"+
    "\6\u0177\1\0\1\u0176\2\0\1\u0177\1\112\1\u0177\1\0"+
    "\1\u0177\21\0\5\u0177\1\u0178\11\u0177\1\0\6\u0177\1\0"+
    "\1\u0179\2\0\1\u0179\1\0\1\u0179\1\0\1\u0179\21\0"+
    "\17\u0179\1\0\6\u0179\1\0\1\u0179\2\0\1\u017a\1\7"+
    "\1\u017a\1\0\1\u017a\21\0\17\u017a\1\0\6\u017a\1\0"+
    "\1\u017b\2\0\1\u0179\1\0\1\u0179\1\0\1\u0179\21\0"+
    "\17\u0179\1\0\6\u0179\1\0\1\u017c\2\0\1\u017c\1\0"+
    "\1\u017c\1\0\1\u017c\21\0\17\u017c\1\0\6\u017c\1\0"+
    "\1\u017c\2\0\1\u017d\1\112\1\u017d\1\0\1\u017d\21\0"+
    "\17\u017d\1\0\6\u017d\1\0\1\u017c\2\0\1\u017d\1\112"+
    "\1\u017d\1\0\1\u017d\21\0\2\u017d\1\u017e\14\u017d\1\0"+
    "\6\u017d\1\0\1\u017f\2\0\1\u017f\1\0\1\u017f\1\0"+
    "\1\u017f\21\0\17\u017f\1\0\6\u017f\1\0\1\u017f\2\0"+
    "\1\u0180\1\7\1\u0180\1\0\1\u0180\21\0\17\u0180\1\0"+
    "\6\u0180\1\0\1\u0181\2\0\1\u017f\1\0\1\u017f\1\0"+
    "\1\u017f\21\0\17\u017f\1\0\6\u017f\1\0\1\u0182\2\0"+
    "\1\u0182\1\0\1\u0182\1\0\1\u0182\21\0\17\u0182\1\0"+
    "\6\u0182\1\0\1\u0182\2\0\1\u0183\1\112\1\u0183\1\0"+
    "\1\u0183\21\0\17\u0183\1\0\6\u0183\1\0\1\u0184\2\0"+
    "\1\u0184\1\0\1\u0184\1\0\1\u0184\21\0\17\u0184\1\0"+
    "\6\u0184\1\0\1\u0184\2\0\1\u0185\1\7\1\u0185\1\0"+
    "\1\u0185\21\0\17\u0185\1\0\6\u0185\1\0\1\u0186\2\0"+
    "\1\u0184\1\0\1\u0184\1\0\1\u0184\21\0\17\u0184\1\0"+
    "\6\u0184\1\0\1\u0187\2\0\1\u0187\1\0\1\u0187\1\0"+
    "\1\u0187\21\0\17\u0187\1\0\6\u0187\1\0\1\u0187\2\0"+
    "\1\u0188\1\112\1\u0188\1\0\1\u0188\21\0\17\u0188\1\0"+
    "\6\u0188\1\0\1\u0189\2\0\1\u0189\1\0\1\u0189\1\0"+
    "\1\u0189\21\0\17\u0189\1\0\6\u0189\1\0\1\u0189\2\0"+
    "\1\u018a\1\7\1\u018a\1\0\1\u018a\21\0\17\u018a\1\0"+
    "\6\u018a\1\0\1\u018b\2\0\1\u0189\1\0\1\u0189\1\0"+
    "\1\u0189\21\0\17\u0189\1\0\6\u0189\1\0\1\u018c\2\0"+
    "\1\u018c\1\0\1\u018c\1\0\1\u018c\21\0\17\u018c\1\0"+
    "\6\u018c\1\0\1\u018c\2\0\1\u018d\1\112\1\u018d\1\0"+
    "\1\u018d\21\0\17\u018d\1\0\6\u018d\1\0\1\u018e\2\0"+
    "\1\u018e\1\0\1\u018e\1\0\1\u018e\21\0\17\u018e\1\0"+
    "\6\u018e\1\0\1\u018e\2\0\1\u018f\1\7\1\u018f\1\0"+
    "\1\u018f\21\0\17\u018f\1\0\6\u018f\1\0\1\u0190\2\0"+
    "\1\u018e\1\0\1\u018e\1\0\1\u018e\21\0\17\u018e\1\0"+
    "\6\u018e\1\0\1\u0191\2\0\1\u0191\1\0\1\u0191\1\0"+
    "\1\u0191\21\0\17\u0191\1\0\6\u0191\1\0\1\u0191\2\0"+
    "\1\u0192\1\112\1\u0192\1\0\1\u0192\21\0\17\u0192\1\0"+
    "\6\u0192\1\0\1\u0193\2\0\1\u0193\1\0\1\u0193\1\0"+
    "\1\u0193\21\0\17\u0193\1\0\6\u0193\1\0\1\u0193\2\0"+
    "\1\u0194\1\7\1\u0194\1\0\1\u0194\21\0\17\u0194\1\0"+
    "\6\u0194\1\0\1\u0195\2\0\1\u0193\1\0\1\u0193\1\0"+
    "\1\u0193\21\0\17\u0193\1\0\6\u0193\1\0\1\u0196\2\0"+
    "\1\u0196\1\0\1\u0196\1\0\1\u0196\21\0\17\u0196\1\0"+
    "\6\u0196\1\0\1\u0196\2\0\1\u0197\1\112\1\u0197\1\0"+
    "\1\u0197\21\0\17\u0197\1\0\6\u0197\1\0\1\u0198\2\0"+
    "\1\u0198\1\0\1\u0198\1\0\1\u0198\21\0\17\u0198\1\0"+
    "\6\u0198\1\0\1\u0198\2\0\1\u0199\1\7\1\u0199\1\0"+
    "\1\u0199\21\0\17\u0199\1\0\6\u0199\1\0\1\u019a\2\0"+
    "\1\u0198\1\0\1\u0198\1\0\1\u0198\21\0\17\u0198\1\0"+
    "\6\u0198\1\0\1\u019b\2\0\1\u019b\1\0\1\u019b\1\0"+
    "\1\u019b\21\0\17\u019b\1\0\6\u019b\1\0\1\u019b\2\0"+
    "\1\u019c\1\112\1\u019c\1\0\1\u019c\21\0\17\u019c\1\0"+
    "\6\u019c\1\0\1\u019d\2\0\1\u019d\1\0\1\u019d\1\0"+
    "\1\u019d\21\0\17\u019d\1\0\6\u019d\1\0\1\u019d\2\0"+
    "\1\u019e\1\7\1\u019e\1\0\1\u019e\21\0\17\u019e\1\0"+
    "\6\u019e\1\0\1\u019f\2\0\1\u019d\1\0\1\u019d\1\0"+
    "\1\u019d\21\0\17\u019d\1\0\6\u019d\1\0\1\u01a0\2\0"+
    "\1\u01a0\1\0\1\u01a0\1\0\1\u01a0\21\0\17\u01a0\1\0"+
    "\6\u01a0\1\0\1\u01a0\2\0\1\u01a1\1\112\1\u01a1\1\0"+
    "\1\u01a1\21\0\17\u01a1\1\0\6\u01a1\1\0\1\u01a2\2\0"+
    "\1\u01a2\1\0\1\u01a2\1\0\1\u01a2\21\0\17\u01a2\1\0"+
    "\6\u01a2\1\0\1\u01a2\2\0\1\u01a3\1\7\1\u01a3\1\0"+
    "\1\u01a3\21\0\17\u01a3\1\0\6\u01a3\1\0\1\u01a4\2\0"+
    "\1\u01a2\1\0\1\u01a2\1\0\1\u01a2\21\0\17\u01a2\1\0"+
    "\6\u01a2\1\0\1\u01a5\2\0\1\u01a5\1\0\1\u01a5\1\0"+
    "\1\u01a5\21\0\17\u01a5\1\0\6\u01a5\1\0\1\u01a5\2\0"+
    "\1\u01a6\1\112\1\u01a6\1\0\1\u01a6\21\0\17\u01a6\1\0"+
    "\6\u01a6\1\0\1\u01a7\2\0\1\u01a7\1\0\1\u01a7\1\0"+
    "\1\u01a7\21\0\17\u01a7\1\0\6\u01a7\1\0\1\u01a7\2\0"+
    "\1\u01a8\1\7\1\u01a8\1\0\1\u01a8\21\0\17\u01a8\1\0"+
    "\6\u01a8\1\0\1\u01a9\2\0\1\u01a7\1\0\1\u01a7\1\0"+
    "\1\u01a7\21\0\17\u01a7\1\0\6\u01a7\1\0\1\u01aa\2\0"+
    "\1\u01aa\1\0\1\u01aa\1\0\1\u01aa\21\0\17\u01aa\1\0"+
    "\6\u01aa\1\0\1\u01aa\2\0\1\u01ab\1\112\1\u01ab\1\0"+
    "\1\u01ab\21\0\17\u01ab\1\0\6\u01ab\1\0\1\u01ac\2\0"+
    "\1\u01ac\1\0\1\u01ac\1\0\1\u01ac\21\0\17\u01ac\1\0"+
    "\6\u01ac\1\0\1\u01ac\2\0\1\u01ad\1\7\1\u01ad\1\0"+
    "\1\u01ad\21\0\17\u01ad\1\0\6\u01ad\1\0\1\u01ae\2\0"+
    "\1\u01ac\1\0\1\u01ac\1\0\1\u01ac\21\0\17\u01ac\1\0"+
    "\6\u01ac\1\0\1\u01af\2\0\1\u01af\1\0\1\u01af\1\0"+
    "\1\u01af\21\0\17\u01af\1\0\6\u01af\1\0\1\u01af\2\0"+
    "\1\u01b0\1\112\1\u01b0\1\0\1\u01b0\21\0\17\u01b0\1\0"+
    "\6\u01b0\1\0\1\u01b1\2\0\1\u01b1\1\0\1\u01b1\1\0"+
    "\1\u01b1\21\0\17\u01b1\1\0\6\u01b1\1\0\1\u01b1\2\0"+
    "\1\u01b2\1\7\1\u01b2\1\0\1\u01b2\21\0\17\u01b2\1\0"+
    "\6\u01b2\1\0\1\u01b3\2\0\1\u01b1\1\0\1\u01b1\1\0"+
    "\1\u01b1\21\0\17\u01b1\1\0\6\u01b1\1\0\1\u01b4\2\0"+
    "\1\u01b4\1\0\1\u01b4\1\0\1\u01b4\21\0\17\u01b4\1\0"+
    "\6\u01b4\1\0\1\u01b4\2\0\1\u01b5\1\112\1\u01b5\1\0"+
    "\1\u01b5\21\0\17\u01b5\1\0\6\u01b5\1\0\1\u01b6\2\0"+
    "\1\u01b6\1\0\1\u01b6\1\0\1\u01b6\21\0\17\u01b6\1\0"+
    "\6\u01b6\1\0\1\u01b6\2\0\1\u01b7\1\7\1\u01b7\1\0"+
    "\1\u01b7\21\0\17\u01b7\1\0\6\u01b7\1\0\1\u01b8\2\0"+
    "\1\u01b6\1\0\1\u01b6\1\0\1\u01b6\21\0\17\u01b6\1\0"+
    "\6\u01b6\1\0\1\u01b9\2\0\1\u01b9\1\0\1\u01b9\1\0"+
    "\1\u01b9\21\0\17\u01b9\1\0\6\u01b9\1\0\1\u01b9\2\0"+
    "\1\u01ba\1\112\1\u01ba\1\0\1\u01ba\21\0\17\u01ba\1\0"+
    "\6\u01ba\1\0\1\u01bb\2\0\1\u01bb\1\0\1\u01bb\1\0"+
    "\1\u01bb\21\0\17\u01bb\1\0\6\u01bb\1\0\1\u01bb\2\0"+
    "\1\u01bc\1\7\1\u01bc\1\0\1\u01bc\21\0\17\u01bc\1\0"+
    "\6\u01bc\1\0\1\u01bd\2\0\1\u01bb\1\0\1\u01bb\1\0"+
    "\1\u01bb\21\0\17\u01bb\1\0\6\u01bb\1\0\1\u01be\2\0"+
    "\1\u01be\1\0\1\u01be\1\0\1\u01be\21\0\17\u01be\1\0"+
    "\6\u01be\1\0\1\u01be\2\0\1\u01bf\1\112\1\u01bf\1\0"+
    "\1\u01bf\21\0\17\u01bf\1\0\6\u01bf\1\0\1\u01c0\2\0"+
    "\1\u01c0\1\0\1\u01c0\1\0\1\u01c0\21\0\17\u01c0\1\0"+
    "\6\u01c0\1\0\1\u01c0\2\0\1\u01c1\1\7\1\u01c1\1\0"+
    "\1\u01c1\21\0\17\u01c1\1\0\6\u01c1\1\0\1\u01c2\2\0"+
    "\1\u01c0\1\0\1\u01c0\1\0\1\u01c0\21\0\17\u01c0\1\0"+
    "\6\u01c0\1\0\1\u01c3\2\0\1\u01c3\1\0\1\u01c3\1\0"+
    "\1\u01c3\21\0\17\u01c3\1\0\6\u01c3\1\0\1\u01c3\2\0"+
    "\1\u01c4\1\112\1\u01c4\1\0\1\u01c4\21\0\17\u01c4\1\0"+
    "\6\u01c4\1\0\1\u01c5\2\0\1\u01c5\1\0\1\u01c5\1\0"+
    "\1\u01c5\21\0\17\u01c5\1\0\6\u01c5\1\0\1\u01c5\2\0"+
    "\1\u01c6\1\7\1\u01c6\1\0\1\u01c6\21\0\17\u01c6\1\0"+
    "\6\u01c6\1\0\1\u01c7\2\0\1\u01c5\1\0\1\u01c5\1\0"+
    "\1\u01c5\21\0\17\u01c5\1\0\6\u01c5\1\0\1\u01c8\2\0"+
    "\1\u01c8\1\0\1\u01c8\1\0\1\u01c8\21\0\17\u01c8\1\0"+
    "\6\u01c8\1\0\1\u01c8\2\0\1\u01c9\1\112\1\u01c9\1\0"+
    "\1\u01c9\21\0\17\u01c9\1\0\6\u01c9\1\0\1\u01ca\2\0"+
    "\1\u01ca\1\0\1\u01ca\1\0\1\u01ca\21\0\17\u01ca\1\0"+
    "\6\u01ca\1\0\1\u01ca\2\0\1\u01cb\1\7\1\u01cb\1\0"+
    "\1\u01cb\21\0\17\u01cb\1\0\6\u01cb\1\0\1\u01cc\2\0"+
    "\1\u01ca\1\0\1\u01ca\1\0\1\u01ca\21\0\17\u01ca\1\0"+
    "\6\u01ca\1\0\1\u01cd\2\0\1\u01cd\1\0\1\u01cd\1\0"+
    "\1\u01cd\21\0\17\u01cd\1\0\6\u01cd\1\0\1\u01cd\2\0"+
    "\1\u01ce\1\112\1\u01ce\1\0\1\u01ce\21\0\17\u01ce\1\0"+
    "\6\u01ce\1\0\1\u01cf\2\0\1\u01cf\1\0\1\u01cf\1\0"+
    "\1\u01cf\21\0\17\u01cf\1\0\6\u01cf\1\0\1\u01cf\2\0"+
    "\1\u01d0\1\7\1\u01d0\1\0\1\u01d0\21\0\17\u01d0\1\0"+
    "\6\u01d0\1\0\1\u01d1\2\0\1\u01cf\1\0\1\u01cf\1\0"+
    "\1\u01cf\21\0\17\u01cf\1\0\6\u01cf\1\0\1\u01d2\2\0"+
    "\1\u01d2\1\0\1\u01d2\1\0\1\u01d2\21\0\17\u01d2\1\0"+
    "\6\u01d2\1\0\1\u01d2\2\0\1\u01d3\1\112\1\u01d3\1\0"+
    "\1\u01d3\21\0\17\u01d3\1\0\6\u01d3\1\0\1\u01d4\2\0"+
    "\1\u01d4\1\0\1\u01d4\1\0\1\u01d4\21\0\17\u01d4\1\0"+
    "\6\u01d4\1\0\1\u01d4\2\0\1\u01d5\1\7\1\u01d5\1\0"+
    "\1\u01d5\21\0\17\u01d5\1\0\6\u01d5\1\0\1\u01d6\2\0"+
    "\1\u01d4\1\0\1\u01d4\1\0\1\u01d4\21\0\17\u01d4\1\0"+
    "\6\u01d4\1\0\1\u01d7\2\0\1\u01d7\1\0\1\u01d7\1\0"+
    "\1\u01d7\21\0\17\u01d7\1\0\6\u01d7\1\0\1\u01d7\2\0"+
    "\1\u01d8\1\112\1\u01d8\1\0\1\u01d8\21\0\17\u01d8\1\0"+
    "\6\u01d8\1\0\1\u01d9\2\0\1\u01d9\1\0\1\u01d9\1\0"+
    "\1\u01d9\21\0\17\u01d9\1\0\6\u01d9\1\0\1\u01d9\2\0"+
    "\1\u01da\1\7\1\u01da\1\0\1\u01da\21\0\17\u01da\1\0"+
    "\6\u01da\1\0\1\u01db\2\0\1\u01d9\1\0\1\u01d9\1\0"+
    "\1\u01d9\21\0\17\u01d9\1\0\6\u01d9\1\0\1\u01dc\2\0"+
    "\1\u01dc\1\0\1\u01dc\1\0\1\u01dc\21\0\17\u01dc\1\0"+
    "\6\u01dc\1\0\1\u01dc\2\0\1\u01dd\1\112\1\u01dd\1\0"+
    "\1\u01dd\21\0\17\u01dd\1\0\6\u01dd\1\0\1\u01de\2\0"+
    "\1\u01de\1\0\1\u01de\1\0\1\u01de\21\0\17\u01de\1\0"+
    "\6\u01de\1\0\1\u01de\2\0\1\u01df\1\7\1\u01df\1\0"+
    "\1\u01df\21\0\17\u01df\1\0\6\u01df\1\0\1\133\2\0"+
    "\1\u01de\1\0\1\u01de\1\0\1\u01de\21\0\17\u01de\1\0"+
    "\6\u01de\1\0\1\u01e0\2\0\1\u01e0\1\0\1\u01e0\1\0"+
    "\1\u01e0\21\0\17\u01e0\1\0\6\u01e0\1\0\1\u01e0\2\0"+
    "\1\u01e1\1\112\1\u01e1\1\0\1\u01e1\21\0\17\u01e1\1\0"+
    "\6\u01e1\1\0\1\u01e2\2\0\1\u01e2\1\0\1\u01e2\1\0"+
    "\1\u01e2\21\0\17\u01e2\1\0\6\u01e2\1\0\1\u01e2\2\0"+
    "\3\112\1\0\1\112\21\0\17\112\1\0\6\112";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19632];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\7\1\1\11\2\1\11\11\2\1\2\11"+
    "\17\1\2\0\6\1\1\0\1\1\1\0\5\11\125\1"+
    "\1\0\64\1\1\0\57\1\1\0\145\1\1\11\204\1"+
    "\1\11\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;
    modelos.InformacionLexema c = new modelos.InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARRIBA;
          }
        case 84: break;
        case 13: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_O;
          }
        case 85: break;
        case 22: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMA;
          }
        case 86: break;
        case 46: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LEER;
          }
        case 87: break;
        case 24: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO;
          }
        case 88: break;
        case 58: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_INICIAR;
          }
        case 89: break;
        case 6: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_MAYUS;
          }
        case 90: break;
        case 49: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ATRAS;
          }
        case 91: break;
        case 70: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CAPTURA;
          }
        case 92: break;
        case 3: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MAS;
          }
        case 93: break;
        case 5: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR;
          }
        case 94: break;
        case 62: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_APAGAR;
          }
        case 95: break;
        case 30: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DESIGUAL;
          }
        case 96: break;
        case 32: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SI;
          }
        case 97: break;
        case 63: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SEGUIR;
          }
        case 98: break;
        case 7: 
          { /*Ignore*/
          }
        case 99: break;
        case 48: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CADENA;
          }
        case 100: break;
        case 80: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VERDADERO;
          }
        case 101: break;
        case 53: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_GIRAR;
          }
        case 102: break;
        case 78: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ADELANTE;
          }
        case 103: break;
        case 20: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR;
          }
        case 104: break;
        case 35: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIN;
          }
        case 105: break;
        case 17: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_IZQ;
          }
        case 106: break;
        case 60: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARGAR;
          }
        case 107: break;
        case 19: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR;
          }
        case 108: break;
        case 11: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_DIVISION;
          }
        case 109: break;
        case 67: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ESPERAR;
          }
        case 110: break;
        case 37: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NULO;
          }
        case 111: break;
        case 57: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECIMAL;
          }
        case 112: break;
        case 43: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FALSO;
          }
        case 113: break;
        case 42: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CICLO;
          }
        case 114: break;
        case 65: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_MIENTRAS;
          }
        case 115: break;
        case 41: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CORTO;
          }
        case 116: break;
        case 50: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ABAJO;
          }
        case 117: break;
        case 31: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NO;
          }
        case 118: break;
        case 12: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_Y;
          }
        case 119: break;
        case 8: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMILLA_SIMPLE;
          }
        case 120: break;
        case 51: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARAV;
          }
        case 121: break;
        case 36: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA;
          }
        case 122: break;
        case 29: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR_QUE;
          }
        case 123: break;
        case 83: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DIRECCIONAR;
          }
        case 124: break;
        case 59: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FUNCION;
          }
        case 125: break;
        case 75: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_EJECUTAR;
          }
        case 126: break;
        case 47: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENTERO;
          }
        case 127: break;
        case 54: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VIDEO;
          }
        case 128: break;
        case 38: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARA;
          }
        case 129: break;
        case 39: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PIN;
          }
        case 130: break;
        case 76: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CALIBRAR;
          }
        case 131: break;
        case 66: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_BOOLEANO;
          }
        case 132: break;
        case 45: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIJO;
          }
        case 133: break;
        case 14: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_NEGACION;
          }
        case 134: break;
        case 44: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RUTA;
          }
        case 135: break;
        case 4: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MENOS;
          }
        case 136: break;
        case 40: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_HAZ;
          }
        case 137: break;
        case 15: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MODULO;
          }
        case 138: break;
        case 25: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_EXPONENTE;
          }
        case 139: break;
        case 77: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ACELERAR;
          }
        case 140: break;
        case 2: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR;
          }
        case 141: break;
        case 18: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_DER;
          }
        case 142: break;
        case 26: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return CADENA_TEXTO;
          }
        case 143: break;
        case 71: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DETENER;
          }
        case 144: break;
        case 68: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RETORNO;
          }
        case 145: break;
        case 28: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR_QUE;
          }
        case 146: break;
        case 82: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECLARACION;
          }
        case 147: break;
        case 33: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA_MAYUS;
          }
        case 148: break;
        case 56: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARREGLO;
          }
        case 149: break;
        case 72: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DERECHA;
          }
        case 150: break;
        case 9: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ASIGNACION;
          }
        case 151: break;
        case 73: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PRINCIPAL;
          }
        case 152: break;
        case 1: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_PUNTOS;
          }
        case 153: break;
        case 81: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IZQUIERDA;
          }
        case 154: break;
        case 23: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ID_NUM;
          }
        case 155: break;
        case 74: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENCENDER;
          }
        case 156: break;
        case 34: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_DECIMAL;
          }
        case 157: break;
        case 52: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LARGO;
          }
        case 158: break;
        case 69: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_REGRESA;
          }
        case 159: break;
        case 27: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_IGUALDAD;
          }
        case 160: break;
        case 21: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DOS_PUNTOS;
          }
        case 161: break;
        case 79: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IMPRIMIR;
          }
        case 162: break;
        case 10: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_POR;
          }
        case 163: break;
        case 16: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PUNTO_COMA;
          }
        case 164: break;
        case 64: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARACTER;
          }
        case 165: break;
        case 55: 
          { 
          }
        case 166: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
