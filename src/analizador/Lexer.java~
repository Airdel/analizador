/* The following code was generated by JFlex 1.4.3 on 18/06/21 13:22 */

package analizador;
import java.io.*;
import static analizador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/06/21 13:22 from the specification file
 * <tt>C:/analizador/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\2\0\1\13\22\0\1\13\1\23\3\6\1\24"+
    "\1\7\1\14\1\26\1\27\1\17\1\2\1\33\1\3\1\11\1\20"+
    "\12\1\1\32\1\25\1\31\1\16\1\30\1\6\1\34\3\5\1\5"+
    "\26\5\1\6\1\0\1\6\1\22\1\10\1\6\1\42\1\52\1\41"+
    "\1\43\1\12\1\45\1\55\1\56\1\44\1\54\1\4\1\53\1\50"+
    "\1\35\1\40\1\51\1\60\1\37\1\47\1\36\1\46\1\61\3\4"+
    "\1\57\1\6\1\21\2\6\51\0\1\6\26\0\1\6\u1f59\0\1\0"+
    "\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\1\1\6\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\13\6\2\34\1\3"+
    "\2\0\1\12\2\6\1\35\1\0\1\36\1\1\1\37"+
    "\1\0\2\6\1\0\1\40\1\41\1\42\1\43\1\44"+
    "\1\0\1\45\1\46\15\45\1\47\12\6\1\50\5\6"+
    "\1\37\1\36\1\37\2\12\2\6\1\51\1\37\2\6"+
    "\1\52\32\45\11\6\1\53\6\6\1\12\1\0\2\6"+
    "\1\37\2\6\30\45\1\54\3\45\1\55\1\45\1\56"+
    "\14\6\1\57\2\6\1\12\1\0\2\6\1\37\2\6"+
    "\6\45\1\60\16\45\1\61\2\45\1\62\3\45\1\63"+
    "\2\6\1\64\4\6\1\65\5\6\1\0\2\6\1\37"+
    "\1\66\1\6\11\45\1\67\4\45\1\70\6\45\1\71"+
    "\1\72\1\73\1\74\1\6\1\75\11\6\1\76\2\6"+
    "\1\37\1\6\6\45\1\77\2\45\1\100\2\45\1\101"+
    "\5\45\1\102\1\6\1\103\1\104\1\6\1\105\1\106"+
    "\4\6\1\76\2\6\1\37\1\107\3\45\1\110\1\111"+
    "\1\112\1\113\3\45\1\114\1\115\3\45\1\116\1\6"+
    "\1\117\1\6\1\120\1\6\1\76\2\6\1\37\2\45"+
    "\1\121\1\122\1\123\1\124\1\45\1\125\1\45\1\6"+
    "\1\126\1\127\2\6\1\37\3\45\1\130\3\6\1\37"+
    "\3\45\1\131\2\6\1\37\2\45\1\132\2\6\1\37"+
    "\2\45\2\6\1\37\2\45\2\6\1\37\2\45\2\6"+
    "\1\37\2\45\2\6\1\37\2\45\2\6\1\37\2\45"+
    "\2\6\1\37\2\45\2\6\1\37\2\45\2\6\1\37"+
    "\2\45\2\6\1\37\2\45\2\6\1\37\2\45\2\6"+
    "\1\37\2\45\2\6\1\37\2\45\2\6\1\37\2\45"+
    "\2\6\1\37\2\45\2\6\1\37\2\45\2\6\1\37"+
    "\2\45\2\6\1\37\2\45\2\6\1\37\2\45\2\6"+
    "\1\37\2\45\1\35\2\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u015e\0\u0190\0\u01c2\0\62\0\u01f4\0\62\0\u0226\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\u0258\0\u028a\0\62\0\62\0\u02bc\0\u02ee\0\u0320\0\u0352"+
    "\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2"+
    "\0\u0514\0\u0546\0\226\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u01f4\0\62\0\62\0\62\0\62\0\62\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0640\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0640\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u076c\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\62\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0802\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u0f0a\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1964\0\u1de2\0\u1e14\0\u1e46"+
    "\0\u1964\0\u1e78\0\u186a\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72"+
    "\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u186a"+
    "\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260"+
    "\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u22f6"+
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e"+
    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u22f6\0\u26ac"+
    "\0\u26de\0\u22f6\0\u2710\0\u2742\0\u2774\0\u21fc\0\u27a6\0\u27d8"+
    "\0\u21fc\0\u280a\0\u283c\0\u286e\0\u28a0\0\u21fc\0\u28d2\0\u2904"+
    "\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a30"+
    "\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2"+
    "\0\u2c24\0\u2c56\0\u2af8\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2af8"+
    "\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2af8\0\u2af8"+
    "\0\u2af8\0\u2af8\0\u2e7c\0\u2a30\0\u2eae\0\u2ee0\0\u2f12\0\u2f44"+
    "\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4"+
    "\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264"+
    "\0\u319c\0\u3296\0\u32c8\0\u319c\0\u32fa\0\u332c\0\u319c\0\u335e"+
    "\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u319c\0\u3458\0\u30d4\0\u30d4"+
    "\0\u348a\0\u30d4\0\u30d4\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584"+
    "\0\u35b6\0\u35e8\0\u361a\0\u35e8\0\u364c\0\u367e\0\u36b0\0\u367e"+
    "\0\u367e\0\u367e\0\u367e\0\u36e2\0\u3714\0\u3746\0\u367e\0\u367e"+
    "\0\u3778\0\u37aa\0\u37dc\0\u35e8\0\u380e\0\u35e8\0\u3840\0\u35e8"+
    "\0\u3872\0\62\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c\0\u396c"+
    "\0\u396c\0\u396c\0\u396c\0\u399e\0\u396c\0\u39d0\0\u3a02\0\u38d6"+
    "\0\u38d6\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3afc"+
    "\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3bc4"+
    "\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3d86\0\u3db8\0\u3dea"+
    "\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a"+
    "\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a"+
    "\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a"+
    "\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a"+
    "\0\u445c\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba"+
    "\0\u45ec\0\u461e\0\u4650\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u474a"+
    "\0\u477c\0\u47ae\0\u47e0\0\u4812\0\u4844\0\u4876\0\u48a8\0\u48da"+
    "\0\u490c\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u4a6a"+
    "\0\u4a9c\0\u4ace\0\u4b00\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa"+
    "\0\u4c2c\0\u4c5e\0\u4c90\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a"+
    "\0\u4dbc\0\u4dee\0\u4e20\0\u4e52\0\u4e84\0\u4eb6\0\u4ee8\0\u4f1a"+
    "\0\u4f4c\0\u4f7e\0\u4fb0\0\u4fe2\0\u5014\0\u5046\0\u5078\0\u50aa"+
    "\0\u50dc\0\u510e\0\u5140\0\62\0\u0866";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\3\6\1\37"+
    "\1\40\1\41\1\42\1\43\1\6\1\44\1\45\1\46"+
    "\1\47\6\6\1\50\63\0\1\3\2\0\2\51\3\0"+
    "\1\12\1\52\22\0\25\51\1\0\1\53\7\0\1\54"+
    "\1\55\50\0\1\53\1\0\1\56\5\0\1\54\1\55"+
    "\50\0\1\57\2\0\1\60\1\7\2\61\1\57\1\0"+
    "\1\60\13\0\1\62\6\0\25\60\4\0\2\7\4\0"+
    "\1\7\22\0\25\7\4\0\1\61\1\0\2\10\2\0"+
    "\1\61\22\0\25\61\1\0\1\63\7\0\1\64\51\0"+
    "\1\65\2\66\1\60\1\7\2\61\1\57\1\0\1\60"+
    "\13\0\1\62\6\0\1\67\16\60\1\70\5\60\14\71"+
    "\1\72\45\71\16\0\1\73\61\0\1\74\61\0\1\75"+
    "\11\0\1\76\32\0\1\77\2\0\1\100\1\101\4\0"+
    "\1\102\22\0\2\100\1\103\1\100\1\104\1\105\1\106"+
    "\1\107\1\110\1\100\1\111\1\100\1\112\1\100\1\113"+
    "\1\100\1\114\1\115\2\100\1\116\1\0\1\57\2\0"+
    "\1\60\1\7\2\61\1\57\1\0\1\60\13\0\1\62"+
    "\6\0\3\60\1\117\5\60\1\120\13\60\1\0\1\57"+
    "\2\0\1\60\1\7\2\61\1\57\1\0\1\60\13\0"+
    "\1\62\6\0\3\60\1\121\1\60\1\122\1\60\1\123"+
    "\15\60\1\0\1\57\2\0\1\60\1\7\2\61\1\57"+
    "\1\0\1\60\13\0\1\62\6\0\2\60\1\124\22\60"+
    "\1\0\1\57\2\0\1\60\1\7\2\61\1\57\1\0"+
    "\1\125\13\0\1\62\6\0\25\60\1\0\1\57\2\0"+
    "\1\60\1\7\2\61\1\57\1\0\1\60\13\0\1\62"+
    "\6\0\1\126\24\60\1\0\1\57\2\0\1\60\1\7"+
    "\2\61\1\57\1\0\1\60\13\0\1\62\6\0\5\60"+
    "\1\127\1\60\1\130\1\60\1\131\13\60\1\0\1\57"+
    "\2\0\1\60\1\7\2\61\1\57\1\0\1\60\13\0"+
    "\1\62\6\0\7\60\1\132\15\60\1\0\1\57\2\0"+
    "\1\60\1\7\2\61\1\57\1\0\1\60\13\0\1\62"+
    "\6\0\7\60\1\133\15\60\1\0\1\57\2\0\1\60"+
    "\1\7\2\61\1\57\1\0\1\60\13\0\1\62\6\0"+
    "\2\60\1\134\2\60\1\135\17\60\1\0\1\57\2\0"+
    "\1\60\1\7\2\61\1\57\1\0\1\60\13\0\1\62"+
    "\6\0\3\60\1\136\21\60\1\0\1\57\2\0\1\60"+
    "\1\7\2\61\1\57\1\0\1\137\13\0\1\62\6\0"+
    "\25\60\1\0\1\51\2\0\2\51\4\0\1\51\22\0"+
    "\25\51\1\0\1\140\2\66\2\51\4\0\1\51\22\0"+
    "\25\51\1\0\1\141\61\0\1\142\2\66\56\0\3\143"+
    "\1\144\11\143\1\0\44\143\1\0\1\145\2\0\1\145"+
    "\3\0\1\145\1\0\1\145\13\0\1\62\6\0\25\145"+
    "\1\0\1\145\2\0\1\146\1\7\2\61\1\145\1\0"+
    "\1\146\13\0\1\62\6\0\25\146\4\0\1\61\1\0"+
    "\2\61\2\0\1\61\22\0\25\61\27\0\1\147\33\0"+
    "\1\63\7\0\1\64\1\55\50\0\1\64\7\0\1\64"+
    "\51\0\1\150\2\0\1\145\3\0\1\145\1\0\1\145"+
    "\13\0\1\62\6\0\25\145\1\0\1\142\61\0\1\145"+
    "\2\0\1\146\1\7\2\61\1\145\1\0\1\146\13\0"+
    "\1\62\6\0\1\146\1\151\23\146\1\0\1\145\2\0"+
    "\1\146\1\7\2\61\1\145\1\0\1\152\13\0\1\62"+
    "\6\0\25\146\1\0\1\153\2\0\2\153\4\0\1\153"+
    "\22\0\25\153\1\0\1\154\2\0\1\155\1\101\2\0"+
    "\1\154\1\0\1\155\22\0\25\155\4\0\2\101\4\0"+
    "\1\101\22\0\25\101\1\0\1\154\2\0\1\155\1\101"+
    "\2\0\1\154\1\0\1\155\22\0\1\156\11\155\1\157"+
    "\12\155\1\0\1\154\2\0\1\155\1\101\2\0\1\154"+
    "\1\0\1\160\22\0\11\155\1\161\13\155\1\0\1\154"+
    "\2\0\1\155\1\101\2\0\1\154\1\0\1\155\22\0"+
    "\5\155\1\162\17\155\1\0\1\154\2\0\1\155\1\101"+
    "\2\0\1\154\1\0\1\155\22\0\1\155\1\163\1\164"+
    "\1\155\1\165\1\155\1\166\5\155\1\167\1\170\7\155"+
    "\1\0\1\154\2\0\1\155\1\101\2\0\1\154\1\0"+
    "\1\171\22\0\7\155\1\172\15\155\1\0\1\154\2\0"+
    "\1\155\1\101\2\0\1\154\1\0\1\155\22\0\13\155"+
    "\1\173\6\155\1\174\2\155\1\0\1\154\2\0\1\155"+
    "\1\101\2\0\1\154\1\0\1\155\22\0\7\155\1\175"+
    "\15\155\1\0\1\154\2\0\1\155\1\101\2\0\1\154"+
    "\1\0\1\176\22\0\25\155\1\0\1\154\2\0\1\155"+
    "\1\101\2\0\1\154\1\0\1\155\22\0\5\155\1\177"+
    "\1\155\1\200\15\155\1\0\1\154\2\0\1\155\1\101"+
    "\2\0\1\154\1\0\1\201\22\0\5\155\1\202\17\155"+
    "\1\0\1\154\2\0\1\155\1\101\2\0\1\154\1\0"+
    "\1\155\22\0\7\155\1\203\15\155\1\0\1\154\2\0"+
    "\1\155\1\101\2\0\1\154\1\0\1\155\22\0\5\155"+
    "\1\204\17\155\1\0\1\154\2\0\1\155\1\101\2\0"+
    "\1\154\1\0\1\155\22\0\7\155\1\205\15\155\1\0"+
    "\1\145\2\0\1\146\1\7\2\61\1\145\1\0\1\146"+
    "\13\0\1\62\6\0\16\146\1\206\6\146\1\0\1\145"+
    "\2\0\1\146\1\7\2\61\1\145\1\0\1\146\13\0"+
    "\1\62\6\0\2\146\1\207\22\146\1\0\1\145\2\0"+
    "\1\146\1\7\2\61\1\145\1\0\1\146\13\0\1\62"+
    "\6\0\2\146\1\210\3\146\1\211\16\146\1\0\1\145"+
    "\2\0\1\146\1\7\2\61\1\145\1\0\1\146\13\0"+
    "\1\62\6\0\4\146\1\212\20\146\1\0\1\145\2\0"+
    "\1\146\1\7\2\61\1\145\1\0\1\146\13\0\1\62"+
    "\6\0\2\146\1\213\22\146\1\0\1\145\2\0\1\146"+
    "\1\7\2\61\1\145\1\0\1\146\13\0\1\62\6\0"+
    "\4\146\1\214\20\146\1\0\1\145\2\0\1\146\1\7"+
    "\2\61\1\145\1\0\1\146\13\0\1\62\6\0\7\146"+
    "\1\215\15\146\1\0\1\145\2\0\1\146\1\7\2\61"+
    "\1\145\1\0\1\146\13\0\1\62\6\0\16\146\1\216"+
    "\6\146\1\0\1\145\2\0\1\146\1\7\2\61\1\145"+
    "\1\0\1\146\13\0\1\62\6\0\1\217\24\146\1\0"+
    "\1\145\2\0\1\146\1\7\2\61\1\145\1\0\1\146"+
    "\13\0\1\62\6\0\1\220\24\146\1\0\1\145\2\0"+
    "\1\146\1\7\2\61\1\145\1\0\1\221\13\0\1\62"+
    "\6\0\25\146\1\0\1\145\2\0\1\146\1\7\2\61"+
    "\1\145\1\0\1\146\13\0\1\62\6\0\7\146\1\222"+
    "\15\146\1\0\1\145\2\0\1\146\1\7\2\61\1\145"+
    "\1\0\1\146\13\0\1\62\6\0\2\146\1\223\22\146"+
    "\1\0\1\145\2\0\1\146\1\7\2\61\1\145\1\0"+
    "\1\146\13\0\1\62\6\0\3\146\1\224\21\146\1\0"+
    "\1\145\2\0\1\146\1\7\2\61\1\145\1\0\1\146"+
    "\13\0\1\62\6\0\2\146\1\225\22\146\1\0\1\140"+
    "\2\0\2\51\4\0\1\51\22\0\25\51\1\0\1\141"+
    "\10\0\1\55\47\0\15\143\1\0\44\143\3\144\1\226"+
    "\11\144\1\227\44\144\1\0\1\230\2\0\1\230\3\0"+
    "\1\230\1\0\1\230\13\0\1\62\6\0\25\230\1\0"+
    "\1\230\2\0\1\231\1\7\2\61\1\230\1\0\1\231"+
    "\13\0\1\62\6\0\25\231\1\0\1\232\2\0\1\230"+
    "\3\0\1\230\1\0\1\230\13\0\1\62\6\0\25\230"+
    "\1\0\1\230\2\0\1\231\1\7\2\61\1\230\1\0"+
    "\1\233\13\0\1\62\6\0\25\231\1\0\1\230\2\0"+
    "\1\231\1\7\2\61\1\230\1\0\1\231\13\0\1\62"+
    "\6\0\4\231\1\234\20\231\1\0\1\235\2\0\1\235"+
    "\3\0\1\235\1\0\1\235\22\0\25\235\1\0\1\235"+
    "\2\0\1\236\1\101\2\0\1\235\1\0\1\236\22\0"+
    "\25\236\1\0\1\235\2\0\1\236\1\101\2\0\1\235"+
    "\1\0\1\236\22\0\4\236\1\237\20\236\1\0\1\235"+
    "\2\0\1\236\1\101\2\0\1\235\1\0\1\236\22\0"+
    "\14\236\1\240\10\236\1\0\1\235\2\0\1\236\1\101"+
    "\2\0\1\235\1\0\1\236\22\0\1\236\1\241\16\236"+
    "\1\242\4\236\1\0\1\235\2\0\1\236\1\101\2\0"+
    "\1\235\1\0\1\236\22\0\1\236\1\243\23\236\1\0"+
    "\1\235\2\0\1\236\1\101\2\0\1\235\1\0\1\236"+
    "\22\0\2\236\1\244\11\236\1\245\1\236\1\246\6\236"+
    "\1\0\1\235\2\0\1\236\1\101\2\0\1\235\1\0"+
    "\1\236\22\0\2\236\1\247\22\236\1\0\1\235\2\0"+
    "\1\236\1\101\2\0\1\235\1\0\1\236\22\0\2\236"+
    "\1\250\22\236\1\0\1\235\2\0\1\236\1\101\2\0"+
    "\1\235\1\0\1\251\22\0\25\236\1\0\1\235\2\0"+
    "\1\236\1\101\2\0\1\235\1\0\1\252\22\0\25\236"+
    "\1\0\1\235\2\0\1\236\1\101\2\0\1\235\1\0"+
    "\1\236\22\0\5\236\1\253\17\236\1\0\1\235\2\0"+
    "\1\236\1\101\2\0\1\235\1\0\1\236\22\0\5\236"+
    "\1\254\17\236\1\0\1\235\2\0\1\236\1\101\2\0"+
    "\1\235\1\0\1\236\22\0\1\236\1\255\1\256\22\236"+
    "\1\0\1\235\2\0\1\236\1\101\2\0\1\235\1\0"+
    "\1\236\22\0\2\236\1\257\22\236\1\0\1\235\2\0"+
    "\1\236\1\101\2\0\1\235\1\0\1\236\22\0\14\236"+
    "\1\260\10\236\1\0\1\235\2\0\1\236\1\101\2\0"+
    "\1\235\1\0\1\236\22\0\23\236\1\261\1\236\1\0"+
    "\1\235\2\0\1\236\1\101\2\0\1\235\1\0\1\236"+
    "\22\0\17\236\1\262\5\236\1\0\1\235\2\0\1\236"+
    "\1\101\2\0\1\235\1\0\1\236\22\0\20\236\1\263"+
    "\4\236\1\0\1\235\2\0\1\236\1\101\2\0\1\235"+
    "\1\0\1\236\22\0\2\236\1\264\22\236\1\0\1\235"+
    "\2\0\1\236\1\101\2\0\1\235\1\0\1\236\22\0"+
    "\1\265\24\236\1\0\1\235\2\0\1\236\1\101\2\0"+
    "\1\235\1\0\1\266\22\0\25\236\1\0\1\235\2\0"+
    "\1\236\1\101\2\0\1\235\1\0\1\236\22\0\2\236"+
    "\1\267\22\236\1\0\1\235\2\0\1\236\1\101\2\0"+
    "\1\235\1\0\1\236\22\0\2\236\1\270\22\236\1\0"+
    "\1\235\2\0\1\236\1\101\2\0\1\235\1\0\1\236"+
    "\22\0\22\236\1\271\2\236\1\0\1\235\2\0\1\236"+
    "\1\101\2\0\1\235\1\0\1\236\22\0\6\236\1\272"+
    "\16\236\1\0\1\230\2\0\1\231\1\7\2\61\1\230"+
    "\1\0\1\231\13\0\1\62\6\0\3\231\1\273\21\231"+
    "\1\0\1\230\2\0\1\231\1\7\2\61\1\230\1\0"+
    "\1\231\13\0\1\62\6\0\1\231\1\274\23\231\1\0"+
    "\1\230\2\0\1\231\1\7\2\61\1\230\1\0\1\231"+
    "\13\0\1\62\6\0\5\231\1\275\17\231\1\0\1\230"+
    "\2\0\1\231\1\7\2\61\1\230\1\0\1\276\13\0"+
    "\1\62\6\0\25\231\1\0\1\230\2\0\1\231\1\7"+
    "\2\61\1\230\1\0\1\231\13\0\1\62\6\0\16\231"+
    "\1\277\6\231\1\0\1\230\2\0\1\231\1\7\2\61"+
    "\1\230\1\0\1\300\13\0\1\62\6\0\25\231\1\0"+
    "\1\230\2\0\1\231\1\7\2\61\1\230\1\0\1\231"+
    "\13\0\1\62\6\0\7\231\1\301\6\231\1\302\6\231"+
    "\1\0\1\230\2\0\1\231\1\7\2\61\1\230\1\0"+
    "\1\231\13\0\1\62\6\0\4\231\1\303\20\231\1\0"+
    "\1\230\2\0\1\231\1\7\2\61\1\230\1\0\1\231"+
    "\13\0\1\62\6\0\12\231\1\304\12\231\1\0\1\230"+
    "\2\0\1\231\1\7\2\61\1\230\1\0\1\231\13\0"+
    "\1\62\6\0\4\231\1\305\20\231\1\0\1\230\2\0"+
    "\1\231\1\7\2\61\1\230\1\0\1\231\13\0\1\62"+
    "\6\0\1\306\24\231\1\0\1\230\2\0\1\231\1\7"+
    "\2\61\1\230\1\0\1\231\13\0\1\62\6\0\1\307"+
    "\24\231\1\0\1\230\2\0\1\231\1\7\2\61\1\230"+
    "\1\0\1\231\13\0\1\62\6\0\5\231\1\310\17\231"+
    "\1\0\1\230\2\0\1\231\1\7\2\61\1\230\1\0"+
    "\1\231\13\0\1\62\6\0\16\231\1\311\6\231\1\0"+
    "\1\230\2\0\1\231\1\7\2\61\1\230\1\0\1\231"+
    "\13\0\1\62\6\0\6\231\1\312\16\231\3\144\1\313"+
    "\11\144\1\227\44\144\3\227\1\314\56\227\1\0\1\315"+
    "\2\0\1\315\3\0\1\315\1\0\1\315\13\0\1\62"+
    "\6\0\25\315\1\0\1\315\2\0\1\316\1\7\2\61"+
    "\1\315\1\0\1\316\13\0\1\62\6\0\25\316\1\0"+
    "\1\317\2\0\1\315\3\0\1\315\1\0\1\315\13\0"+
    "\1\62\6\0\25\315\1\0\1\315\2\0\1\316\1\7"+
    "\2\61\1\315\1\0\1\316\13\0\1\62\6\0\2\316"+
    "\1\320\22\316\1\0\1\315\2\0\1\316\1\7\2\61"+
    "\1\315\1\0\1\316\13\0\1\62\6\0\11\316\1\321"+
    "\13\316\1\0\1\322\2\0\1\322\3\0\1\322\1\0"+
    "\1\322\22\0\25\322\1\0\1\322\2\0\1\323\1\101"+
    "\2\0\1\322\1\0\1\323\22\0\25\323\1\0\1\322"+
    "\2\0\1\323\1\101\2\0\1\322\1\0\1\324\22\0"+
    "\25\323\1\0\1\322\2\0\1\323\1\101\2\0\1\322"+
    "\1\0\1\325\22\0\25\323\1\0\1\322\2\0\1\323"+
    "\1\101\2\0\1\322\1\0\1\323\22\0\3\323\1\326"+
    "\21\323\1\0\1\322\2\0\1\323\1\101\2\0\1\322"+
    "\1\0\1\323\22\0\2\323\1\327\22\323\1\0\1\322"+
    "\2\0\1\323\1\101\2\0\1\322\1\0\1\323\22\0"+
    "\5\323\1\330\17\323\1\0\1\322\2\0\1\323\1\101"+
    "\2\0\1\322\1\0\1\323\22\0\20\323\1\331\4\323"+
    "\1\0\1\322\2\0\1\323\1\101\2\0\1\322\1\0"+
    "\1\323\22\0\1\323\1\332\23\323\1\0\1\322\2\0"+
    "\1\323\1\101\2\0\1\322\1\0\1\323\22\0\7\323"+
    "\1\333\15\323\1\0\1\322\2\0\1\323\1\101\2\0"+
    "\1\322\1\0\1\323\22\0\5\323\1\334\17\323\1\0"+
    "\1\322\2\0\1\323\1\101\2\0\1\322\1\0\1\323"+
    "\22\0\7\323\1\335\15\323\1\0\1\322\2\0\1\323"+
    "\1\101\2\0\1\322\1\0\1\323\22\0\16\323\1\336"+
    "\6\323\1\0\1\322\2\0\1\323\1\101\2\0\1\322"+
    "\1\0\1\323\22\0\16\323\1\337\6\323\1\0\1\322"+
    "\2\0\1\323\1\101\2\0\1\322\1\0\1\323\22\0"+
    "\20\323\1\340\4\323\1\0\1\322\2\0\1\323\1\101"+
    "\2\0\1\322\1\0\1\323\22\0\17\323\1\341\5\323"+
    "\1\0\1\322\2\0\1\323\1\101\2\0\1\322\1\0"+
    "\1\342\22\0\25\323\1\0\1\322\2\0\1\323\1\101"+
    "\2\0\1\322\1\0\1\343\22\0\25\323\1\0\1\322"+
    "\2\0\1\323\1\101\2\0\1\322\1\0\1\344\22\0"+
    "\25\323\1\0\1\322\2\0\1\323\1\101\2\0\1\322"+
    "\1\0\1\323\22\0\2\323\1\345\22\323\1\0\1\322"+
    "\2\0\1\323\1\101\2\0\1\322\1\0\1\323\22\0"+
    "\11\323\1\346\13\323\1\0\1\322\2\0\1\323\1\101"+
    "\2\0\1\322\1\0\1\323\22\0\3\323\1\347\21\323"+
    "\1\0\1\322\2\0\1\323\1\101\2\0\1\322\1\0"+
    "\1\323\22\0\11\323\1\350\13\323\1\0\1\322\2\0"+
    "\1\323\1\101\2\0\1\322\1\0\1\323\22\0\5\323"+
    "\1\351\17\323\1\0\1\322\2\0\1\323\1\101\2\0"+
    "\1\322\1\0\1\323\22\0\2\323\1\352\22\323\1\0"+
    "\1\322\2\0\1\323\1\101\2\0\1\322\1\0\1\323"+
    "\22\0\20\323\1\353\4\323\1\0\1\322\2\0\1\323"+
    "\1\101\2\0\1\322\1\0\1\323\22\0\5\323\1\354"+
    "\17\323\1\0\1\322\2\0\1\323\1\101\2\0\1\322"+
    "\1\0\1\355\22\0\25\323\1\0\1\315\2\0\1\316"+
    "\1\7\2\61\1\315\1\0\1\316\13\0\1\62\6\0"+
    "\3\316\1\356\21\316\1\0\1\315\2\0\1\316\1\7"+
    "\2\61\1\315\1\0\1\316\13\0\1\62\6\0\4\316"+
    "\1\357\20\316\1\0\1\315\2\0\1\316\1\7\2\61"+
    "\1\315\1\0\1\316\13\0\1\62\6\0\1\360\24\316"+
    "\1\0\1\315\2\0\1\316\1\7\2\61\1\315\1\0"+
    "\1\316\13\0\1\62\6\0\3\316\1\361\21\316\1\0"+
    "\1\315\2\0\1\316\1\7\2\61\1\315\1\0\1\316"+
    "\13\0\1\62\6\0\20\316\1\362\4\316\1\0\1\315"+
    "\2\0\1\316\1\7\2\61\1\315\1\0\1\316\13\0"+
    "\1\62\6\0\13\316\1\363\11\316\1\0\1\315\2\0"+
    "\1\316\1\7\2\61\1\315\1\0\1\316\13\0\1\62"+
    "\6\0\5\316\1\364\17\316\1\0\1\315\2\0\1\316"+
    "\1\7\2\61\1\315\1\0\1\316\13\0\1\62\6\0"+
    "\7\316\1\365\15\316\1\0\1\315\2\0\1\316\1\7"+
    "\2\61\1\315\1\0\1\316\13\0\1\62\6\0\3\316"+
    "\1\366\21\316\1\0\1\315\2\0\1\316\1\7\2\61"+
    "\1\315\1\0\1\316\13\0\1\62\6\0\7\316\1\367"+
    "\15\316\1\0\1\315\2\0\1\316\1\7\2\61\1\315"+
    "\1\0\1\316\13\0\1\62\6\0\1\316\1\370\23\316"+
    "\1\0\1\315\2\0\1\316\1\7\2\61\1\315\1\0"+
    "\1\316\13\0\1\62\6\0\4\316\1\371\20\316\1\0"+
    "\1\315\2\0\1\316\1\7\2\61\1\315\1\0\1\372"+
    "\13\0\1\62\6\0\25\316\1\0\1\315\2\0\1\316"+
    "\1\7\2\61\1\315\1\0\1\316\13\0\1\62\6\0"+
    "\5\316\1\373\17\316\3\144\1\143\11\144\1\227\44\144"+
    "\3\227\1\374\56\227\1\0\1\375\2\0\1\375\3\0"+
    "\1\375\1\0\1\375\13\0\1\62\6\0\25\375\1\0"+
    "\1\375\2\0\1\376\1\7\2\61\1\375\1\0\1\376"+
    "\13\0\1\62\6\0\25\376\1\0\1\377\2\0\1\375"+
    "\3\0\1\375\1\0\1\375\13\0\1\62\6\0\25\375"+
    "\1\0\1\375\2\0\1\376\1\7\2\61\1\375\1\0"+
    "\1\376\13\0\1\62\6\0\3\376\1\u0100\21\376\1\0"+
    "\1\375\2\0\1\376\1\7\2\61\1\375\1\0\1\376"+
    "\13\0\1\62\6\0\1\376\1\u0101\23\376\1\0\1\u0102"+
    "\2\0\1\u0102\3\0\1\u0102\1\0\1\u0102\22\0\25\u0102"+
    "\1\0\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102\1\0"+
    "\1\u0103\22\0\25\u0103\1\0\1\u0102\2\0\1\u0103\1\101"+
    "\2\0\1\u0102\1\0\1\u0103\22\0\1\u0104\24\u0103\1\0"+
    "\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102\1\0\1\u0103"+
    "\22\0\2\u0103\1\u0105\22\u0103\1\0\1\u0102\2\0\1\u0103"+
    "\1\101\2\0\1\u0102\1\0\1\u0103\22\0\2\u0103\1\u0106"+
    "\22\u0103\1\0\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102"+
    "\1\0\1\u0107\22\0\25\u0103\1\0\1\u0102\2\0\1\u0103"+
    "\1\101\2\0\1\u0102\1\0\1\u0103\22\0\5\u0103\1\u0108"+
    "\17\u0103\1\0\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102"+
    "\1\0\1\u0103\22\0\11\u0103\1\u0109\13\u0103\1\0\1\u0102"+
    "\2\0\1\u0103\1\101\2\0\1\u0102\1\0\1\u0103\22\0"+
    "\15\u0103\1\u010a\7\u0103\1\0\1\u0102\2\0\1\u0103\1\101"+
    "\2\0\1\u0102\1\0\1\u0103\22\0\12\u0103\1\u010b\12\u0103"+
    "\1\0\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102\1\0"+
    "\1\u0103\22\0\15\u0103\1\u010c\7\u0103\1\0\1\u0102\2\0"+
    "\1\u0103\1\101\2\0\1\u0102\1\0\1\u010d\22\0\25\u0103"+
    "\1\0\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102\1\0"+
    "\1\u0103\22\0\5\u0103\1\u010e\17\u0103\1\0\1\u0102\2\0"+
    "\1\u0103\1\101\2\0\1\u0102\1\0\1\u0103\22\0\5\u0103"+
    "\1\u010f\17\u0103\1\0\1\u0102\2\0\1\u0103\1\101\2\0"+
    "\1\u0102\1\0\1\u0103\22\0\3\u0103\1\u0110\21\u0103\1\0"+
    "\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102\1\0\1\u0103"+
    "\22\0\1\u0111\24\u0103\1\0\1\u0102\2\0\1\u0103\1\101"+
    "\2\0\1\u0102\1\0\1\u0103\22\0\4\u0103\1\u0112\20\u0103"+
    "\1\0\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102\1\0"+
    "\1\u0103\22\0\4\u0103\1\u0113\20\u0103\1\0\1\u0102\2\0"+
    "\1\u0103\1\101\2\0\1\u0102\1\0\1\u0103\22\0\7\u0103"+
    "\1\u0114\15\u0103\1\0\1\u0102\2\0\1\u0103\1\101\2\0"+
    "\1\u0102\1\0\1\u0103\22\0\7\u0103\1\u0115\15\u0103\1\0"+
    "\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102\1\0\1\u0103"+
    "\22\0\7\u0103\1\u0116\15\u0103\1\0\1\u0102\2\0\1\u0103"+
    "\1\101\2\0\1\u0102\1\0\1\u0103\22\0\24\u0103\1\u0117"+
    "\1\0\1\u0102\2\0\1\u0103\1\101\2\0\1\u0102\1\0"+
    "\1\u0103\22\0\3\u0103\1\u0118\21\u0103\1\0\1\u0102\2\0"+
    "\1\u0103\1\101\2\0\1\u0102\1\0\1\u0103\22\0\2\u0103"+
    "\1\u0119\22\u0103\1\0\1\u0102\2\0\1\u0103\1\101\2\0"+
    "\1\u0102\1\0\1\u0103\22\0\3\u0103\1\u011a\21\u0103\1\0"+
    "\1\375\2\0\1\376\1\7\2\61\1\375\1\0\1\376"+
    "\13\0\1\62\6\0\1\376\1\u011b\23\376\1\0\1\375"+
    "\2\0\1\376\1\7\2\61\1\375\1\0\1\376\13\0"+
    "\1\62\6\0\5\376\1\u011c\17\376\1\0\1\375\2\0"+
    "\1\376\1\7\2\61\1\375\1\0\1\376\13\0\1\62"+
    "\6\0\16\376\1\u011d\6\376\1\0\1\375\2\0\1\376"+
    "\1\7\2\61\1\375\1\0\1\376\13\0\1\62\6\0"+
    "\5\376\1\u011e\17\376\1\0\1\375\2\0\1\376\1\7"+
    "\2\61\1\375\1\0\1\376\13\0\1\62\6\0\2\376"+
    "\1\u011f\22\376\1\0\1\375\2\0\1\376\1\7\2\61"+
    "\1\375\1\0\1\376\13\0\1\62\6\0\5\376\1\u0120"+
    "\17\376\1\0\1\375\2\0\1\376\1\7\2\61\1\375"+
    "\1\0\1\376\13\0\1\62\6\0\3\376\1\u0121\21\376"+
    "\1\0\1\375\2\0\1\376\1\7\2\61\1\375\1\0"+
    "\1\376\13\0\1\62\6\0\2\376\1\u0122\22\376\1\0"+
    "\1\375\2\0\1\376\1\7\2\61\1\375\1\0\1\376"+
    "\13\0\1\62\6\0\7\376\1\u0123\15\376\1\0\1\375"+
    "\2\0\1\376\1\7\2\61\1\375\1\0\1\376\13\0"+
    "\1\62\6\0\5\376\1\u0124\17\376\1\0\1\375\2\0"+
    "\1\376\1\7\2\61\1\375\1\0\1\376\13\0\1\62"+
    "\6\0\6\376\1\u0125\16\376\3\227\1\u0126\56\227\1\0"+
    "\1\u0127\2\0\1\u0127\3\0\1\u0127\1\0\1\u0127\13\0"+
    "\1\62\6\0\25\u0127\1\0\1\u0127\2\0\1\u0128\1\7"+
    "\2\61\1\u0127\1\0\1\u0128\13\0\1\62\6\0\25\u0128"+
    "\1\0\1\u0129\2\0\1\u0127\3\0\1\u0127\1\0\1\u0127"+
    "\13\0\1\62\6\0\25\u0127\1\0\1\u0127\2\0\1\u0128"+
    "\1\7\2\61\1\u0127\1\0\1\u0128\13\0\1\62\6\0"+
    "\5\u0128\1\u012a\17\u0128\1\0\1\u012b\2\0\1\u012b\3\0"+
    "\1\u012b\1\0\1\u012b\22\0\25\u012b\1\0\1\u012b\2\0"+
    "\1\u012c\1\101\2\0\1\u012b\1\0\1\u012c\22\0\25\u012c"+
    "\1\0\1\u012b\2\0\1\u012c\1\101\2\0\1\u012b\1\0"+
    "\1\u012c\22\0\6\u012c\1\u012d\16\u012c\1\0\1\u012b\2\0"+
    "\1\u012c\1\101\2\0\1\u012b\1\0\1\u012c\22\0\5\u012c"+
    "\1\u012e\17\u012c\1\0\1\u012b\2\0\1\u012c\1\101\2\0"+
    "\1\u012b\1\0\1\u012c\22\0\1\u012f\24\u012c\1\0\1\u012b"+
    "\2\0\1\u012c\1\101\2\0\1\u012b\1\0\1\u012c\22\0"+
    "\12\u012c\1\u0130\12\u012c\1\0\1\u012b\2\0\1\u012c\1\101"+
    "\2\0\1\u012b\1\0\1\u012c\22\0\2\u012c\1\u0131\22\u012c"+
    "\1\0\1\u012b\2\0\1\u012c\1\101\2\0\1\u012b\1\0"+
    "\1\u012c\22\0\2\u012c\1\u0132\22\u012c\1\0\1\u012b\2\0"+
    "\1\u012c\1\101\2\0\1\u012b\1\0\1\u012c\22\0\2\u012c"+
    "\1\u0133\22\u012c\1\0\1\u012b\2\0\1\u012c\1\101\2\0"+
    "\1\u012b\1\0\1\u012c\22\0\5\u012c\1\u0134\17\u012c\1\0"+
    "\1\u012b\2\0\1\u012c\1\101\2\0\1\u012b\1\0\1\u012c"+
    "\22\0\2\u012c\1\u0135\22\u012c\1\0\1\u012b\2\0\1\u012c"+
    "\1\101\2\0\1\u012b\1\0\1\u012c\22\0\1\u0136\24\u012c"+
    "\1\0\1\u012b\2\0\1\u012c\1\101\2\0\1\u012b\1\0"+
    "\1\u012c\22\0\2\u012c\1\u0137\22\u012c\1\0\1\u012b\2\0"+
    "\1\u012c\1\101\2\0\1\u012b\1\0\1\u0138\22\0\25\u012c"+
    "\1\0\1\u012b\2\0\1\u012c\1\101\2\0\1\u012b\1\0"+
    "\1\u012c\22\0\21\u012c\1\u0139\3\u012c\1\0\1\u012b\2\0"+
    "\1\u012c\1\101\2\0\1\u012b\1\0\1\u012c\22\0\4\u012c"+
    "\1\u013a\20\u012c\1\0\1\u012b\2\0\1\u012c\1\101\2\0"+
    "\1\u012b\1\0\1\u012c\22\0\13\u012c\1\u013b\11\u012c\1\0"+
    "\1\u012b\2\0\1\u012c\1\101\2\0\1\u012b\1\0\1\u013c"+
    "\22\0\25\u012c\1\0\1\u012b\2\0\1\u012c\1\101\2\0"+
    "\1\u012b\1\0\1\u012c\22\0\2\u012c\1\u013d\22\u012c\1\0"+
    "\1\u0127\2\0\1\u0128\1\7\2\61\1\u0127\1\0\1\u013e"+
    "\13\0\1\62\6\0\25\u0128\1\0\1\u0127\2\0\1\u0128"+
    "\1\7\2\61\1\u0127\1\0\1\u0128\13\0\1\62\6\0"+
    "\3\u0128\1\u013f\21\u0128\1\0\1\u0127\2\0\1\u0128\1\7"+
    "\2\61\1\u0127\1\0\1\u0128\13\0\1\62\6\0\16\u0128"+
    "\1\u0140\6\u0128\1\0\1\u0127\2\0\1\u0128\1\7\2\61"+
    "\1\u0127\1\0\1\u0128\13\0\1\62\6\0\5\u0128\1\u0141"+
    "\17\u0128\1\0\1\u0127\2\0\1\u0128\1\7\2\61\1\u0127"+
    "\1\0\1\u0128\13\0\1\62\6\0\2\u0128\1\u0142\22\u0128"+
    "\1\0\1\u0127\2\0\1\u0128\1\7\2\61\1\u0127\1\0"+
    "\1\u0128\13\0\1\62\6\0\1\u0143\24\u0128\1\0\1\u0127"+
    "\2\0\1\u0128\1\7\2\61\1\u0127\1\0\1\u0128\13\0"+
    "\1\62\6\0\5\u0128\1\u0144\17\u0128\1\0\1\u0127\2\0"+
    "\1\u0128\1\7\2\61\1\u0127\1\0\1\u0128\13\0\1\62"+
    "\6\0\14\u0128\1\u0145\10\u0128\1\0\1\u0127\2\0\1\u0128"+
    "\1\7\2\61\1\u0127\1\0\1\u0128\13\0\1\62\6\0"+
    "\1\u0146\24\u0128\1\0\1\u0127\2\0\1\u0128\1\7\2\61"+
    "\1\u0127\1\0\1\u0147\13\0\1\62\6\0\25\u0128\3\0"+
    "\1\u0148\57\0\1\u0149\2\0\1\u0149\3\0\1\u0149\1\0"+
    "\1\u0149\13\0\1\62\6\0\25\u0149\1\0\1\u0149\2\0"+
    "\1\u014a\1\7\2\61\1\u0149\1\0\1\u014a\13\0\1\62"+
    "\6\0\25\u014a\1\0\1\u014b\2\0\1\u0149\3\0\1\u0149"+
    "\1\0\1\u0149\13\0\1\62\6\0\25\u0149\1\0\1\u0149"+
    "\2\0\1\u014a\1\7\2\61\1\u0149\1\0\1\u014a\13\0"+
    "\1\62\6\0\2\u014a\1\u014c\22\u014a\1\0\1\u014d\2\0"+
    "\1\u014d\3\0\1\u014d\1\0\1\u014d\22\0\25\u014d\1\0"+
    "\1\u014d\2\0\1\u014e\1\101\2\0\1\u014d\1\0\1\u014e"+
    "\22\0\25\u014e\1\0\1\u014d\2\0\1\u014e\1\101\2\0"+
    "\1\u014d\1\0\1\u014f\22\0\25\u014e\1\0\1\u014d\2\0"+
    "\1\u014e\1\101\2\0\1\u014d\1\0\1\u014e\22\0\2\u014e"+
    "\1\u0150\22\u014e\1\0\1\u014d\2\0\1\u014e\1\101\2\0"+
    "\1\u014d\1\0\1\u014e\22\0\3\u014e\1\u0151\21\u014e\1\0"+
    "\1\u014d\2\0\1\u014e\1\101\2\0\1\u014d\1\0\1\u014e"+
    "\22\0\5\u014e\1\u0152\17\u014e\1\0\1\u014d\2\0\1\u014e"+
    "\1\101\2\0\1\u014d\1\0\1\u014e\22\0\5\u014e\1\u0153"+
    "\17\u014e\1\0\1\u014d\2\0\1\u014e\1\101\2\0\1\u014d"+
    "\1\0\1\u014e\22\0\5\u014e\1\u0154\17\u014e\1\0\1\u014d"+
    "\2\0\1\u014e\1\101\2\0\1\u014d\1\0\1\u014e\22\0"+
    "\5\u014e\1\u0155\17\u014e\1\0\1\u014d\2\0\1\u014e\1\101"+
    "\2\0\1\u014d\1\0\1\u014e\22\0\1\u014e\1\u0156\23\u014e"+
    "\1\0\1\u014d\2\0\1\u014e\1\101\2\0\1\u014d\1\0"+
    "\1\u014e\22\0\2\u014e\1\u0157\22\u014e\1\0\1\u014d\2\0"+
    "\1\u014e\1\101\2\0\1\u014d\1\0\1\u014e\22\0\5\u014e"+
    "\1\u0158\17\u014e\1\0\1\u014d\2\0\1\u014e\1\101\2\0"+
    "\1\u014d\1\0\1\u014e\22\0\7\u014e\1\u0159\15\u014e\1\0"+
    "\1\u014d\2\0\1\u014e\1\101\2\0\1\u014d\1\0\1\u014e"+
    "\22\0\7\u014e\1\u015a\15\u014e\1\0\1\u014d\2\0\1\u014e"+
    "\1\101\2\0\1\u014d\1\0\1\u014e\22\0\2\u014e\1\u015b"+
    "\22\u014e\1\0\1\u0149\2\0\1\u014a\1\7\2\61\1\u0149"+
    "\1\0\1\u014a\13\0\1\62\6\0\2\u014a\1\u015c\22\u014a"+
    "\1\0\1\u0149\2\0\1\u014a\1\7\2\61\1\u0149\1\0"+
    "\1\u014a\13\0\1\62\6\0\4\u014a\1\u015d\20\u014a\1\0"+
    "\1\u0149\2\0\1\u014a\1\7\2\61\1\u0149\1\0\1\u014a"+
    "\13\0\1\62\6\0\12\u014a\1\u015e\12\u014a\1\0\1\u0149"+
    "\2\0\1\u014a\1\7\2\61\1\u0149\1\0\1\u014a\13\0"+
    "\1\62\6\0\5\u014a\1\u015f\17\u014a\1\0\1\u0149\2\0"+
    "\1\u014a\1\7\2\61\1\u0149\1\0\1\u014a\13\0\1\62"+
    "\6\0\3\u014a\1\u0160\21\u014a\1\0\1\u0149\2\0\1\u014a"+
    "\1\7\2\61\1\u0149\1\0\1\u014a\13\0\1\62\6\0"+
    "\2\u014a\1\u0161\22\u014a\3\0\1\u0162\57\0\1\u0163\2\0"+
    "\1\u0163\3\0\1\u0163\1\0\1\u0163\13\0\1\62\6\0"+
    "\25\u0163\1\0\1\u0163\2\0\1\u0164\1\7\2\61\1\u0163"+
    "\1\0\1\u0164\13\0\1\62\6\0\25\u0164\1\0\1\u0165"+
    "\2\0\1\u0163\3\0\1\u0163\1\0\1\u0163\13\0\1\62"+
    "\6\0\25\u0163\1\0\1\u0166\2\0\1\u0166\3\0\1\u0166"+
    "\1\0\1\u0166\22\0\25\u0166\1\0\1\u0166\2\0\1\u0167"+
    "\1\101\2\0\1\u0166\1\0\1\u0167\22\0\25\u0167\1\0"+
    "\1\u0166\2\0\1\u0167\1\101\2\0\1\u0166\1\0\1\u0167"+
    "\22\0\2\u0167\1\u0168\22\u0167\1\0\1\u0166\2\0\1\u0167"+
    "\1\101\2\0\1\u0166\1\0\1\u0167\22\0\2\u0167\1\u0169"+
    "\22\u0167\1\0\1\u0166\2\0\1\u0167\1\101\2\0\1\u0166"+
    "\1\0\1\u0167\22\0\2\u0167\1\u016a\22\u0167\1\0\1\u0166"+
    "\2\0\1\u0167\1\101\2\0\1\u0166\1\0\1\u016b\22\0"+
    "\25\u0167\1\0\1\u0166\2\0\1\u0167\1\101\2\0\1\u0166"+
    "\1\0\1\u0167\22\0\3\u0167\1\u016c\21\u0167\1\0\1\u0166"+
    "\2\0\1\u0167\1\101\2\0\1\u0166\1\0\1\u0167\22\0"+
    "\2\u0167\1\u016d\22\u0167\1\0\1\u0166\2\0\1\u0167\1\101"+
    "\2\0\1\u0166\1\0\1\u0167\22\0\6\u0167\1\u016e\16\u0167"+
    "\1\0\1\u0163\2\0\1\u0164\1\7\2\61\1\u0163\1\0"+
    "\1\u0164\13\0\1\62\6\0\7\u0164\1\u016f\15\u0164\1\0"+
    "\1\u0163\2\0\1\u0164\1\7\2\61\1\u0163\1\0\1\u0164"+
    "\13\0\1\62\6\0\16\u0164\1\u0170\6\u0164\1\0\1\u0163"+
    "\2\0\1\u0164\1\7\2\61\1\u0163\1\0\1\u0164\13\0"+
    "\1\62\6\0\3\u0164\1\u0171\21\u0164\1\0\1\u0172\2\0"+
    "\1\u0172\3\0\1\u0172\1\0\1\u0172\13\0\1\62\6\0"+
    "\25\u0172\1\0\1\u0172\2\0\1\u0173\1\7\2\61\1\u0172"+
    "\1\0\1\u0173\13\0\1\62\6\0\25\u0173\1\0\1\u0174"+
    "\2\0\1\u0172\3\0\1\u0172\1\0\1\u0172\13\0\1\62"+
    "\6\0\25\u0172\1\0\1\u0175\2\0\1\u0175\3\0\1\u0175"+
    "\1\0\1\u0175\22\0\25\u0175\1\0\1\u0175\2\0\1\u0176"+
    "\1\101\2\0\1\u0175\1\0\1\u0176\22\0\25\u0176\1\0"+
    "\1\u0175\2\0\1\u0176\1\101\2\0\1\u0175\1\0\1\u0176"+
    "\22\0\1\u0177\24\u0176\1\0\1\u0175\2\0\1\u0176\1\101"+
    "\2\0\1\u0175\1\0\1\u0176\22\0\5\u0176\1\u0178\17\u0176"+
    "\1\0\1\u0172\2\0\1\u0173\1\7\2\61\1\u0172\1\0"+
    "\1\u0173\13\0\1\62\6\0\3\u0173\1\u0179\21\u0173\1\0"+
    "\1\u017a\2\0\1\u017a\3\0\1\u017a\1\0\1\u017a\13\0"+
    "\1\62\6\0\25\u017a\1\0\1\u017a\2\0\1\u017b\1\7"+
    "\2\61\1\u017a\1\0\1\u017b\13\0\1\62\6\0\25\u017b"+
    "\1\0\1\u017c\2\0\1\u017a\3\0\1\u017a\1\0\1\u017a"+
    "\13\0\1\62\6\0\25\u017a\1\0\1\u017d\2\0\1\u017d"+
    "\3\0\1\u017d\1\0\1\u017d\22\0\25\u017d\1\0\1\u017d"+
    "\2\0\1\u017e\1\101\2\0\1\u017d\1\0\1\u017e\22\0"+
    "\25\u017e\1\0\1\u017d\2\0\1\u017e\1\101\2\0\1\u017d"+
    "\1\0\1\u017e\22\0\5\u017e\1\u017f\17\u017e\1\0\1\u017a"+
    "\2\0\1\u017b\1\7\2\61\1\u017a\1\0\1\u017b\13\0"+
    "\1\62\6\0\1\u0180\24\u017b\1\0\1\u0181\2\0\1\u0181"+
    "\3\0\1\u0181\1\0\1\u0181\13\0\1\62\6\0\25\u0181"+
    "\1\0\1\u0181\2\0\1\u0182\1\7\2\61\1\u0181\1\0"+
    "\1\u0182\13\0\1\62\6\0\25\u0182\1\0\1\u0183\2\0"+
    "\1\u0181\3\0\1\u0181\1\0\1\u0181\13\0\1\62\6\0"+
    "\25\u0181\1\0\1\u0184\2\0\1\u0184\3\0\1\u0184\1\0"+
    "\1\u0184\22\0\25\u0184\1\0\1\u0184\2\0\1\u0185\1\101"+
    "\2\0\1\u0184\1\0\1\u0185\22\0\25\u0185\1\0\1\u0184"+
    "\2\0\1\u0185\1\101\2\0\1\u0184\1\0\1\u0185\22\0"+
    "\2\u0185\1\u0186\22\u0185\1\0\1\u0187\2\0\1\u0187\3\0"+
    "\1\u0187\1\0\1\u0187\13\0\1\62\6\0\25\u0187\1\0"+
    "\1\u0187\2\0\1\u0188\1\7\2\61\1\u0187\1\0\1\u0188"+
    "\13\0\1\62\6\0\25\u0188\1\0\1\u0189\2\0\1\u0187"+
    "\3\0\1\u0187\1\0\1\u0187\13\0\1\62\6\0\25\u0187"+
    "\1\0\1\u018a\2\0\1\u018a\3\0\1\u018a\1\0\1\u018a"+
    "\22\0\25\u018a\1\0\1\u018a\2\0\1\u018b\1\101\2\0"+
    "\1\u018a\1\0\1\u018b\22\0\25\u018b\1\0\1\u018c\2\0"+
    "\1\u018c\3\0\1\u018c\1\0\1\u018c\13\0\1\62\6\0"+
    "\25\u018c\1\0\1\u018c\2\0\1\u018d\1\7\2\61\1\u018c"+
    "\1\0\1\u018d\13\0\1\62\6\0\25\u018d\1\0\1\u018e"+
    "\2\0\1\u018c\3\0\1\u018c\1\0\1\u018c\13\0\1\62"+
    "\6\0\25\u018c\1\0\1\u018f\2\0\1\u018f\3\0\1\u018f"+
    "\1\0\1\u018f\22\0\25\u018f\1\0\1\u018f\2\0\1\u0190"+
    "\1\101\2\0\1\u018f\1\0\1\u0190\22\0\25\u0190\1\0"+
    "\1\u0191\2\0\1\u0191\3\0\1\u0191\1\0\1\u0191\13\0"+
    "\1\62\6\0\25\u0191\1\0\1\u0191\2\0\1\u0192\1\7"+
    "\2\61\1\u0191\1\0\1\u0192\13\0\1\62\6\0\25\u0192"+
    "\1\0\1\u0193\2\0\1\u0191\3\0\1\u0191\1\0\1\u0191"+
    "\13\0\1\62\6\0\25\u0191\1\0\1\u0194\2\0\1\u0194"+
    "\3\0\1\u0194\1\0\1\u0194\22\0\25\u0194\1\0\1\u0194"+
    "\2\0\1\u0195\1\101\2\0\1\u0194\1\0\1\u0195\22\0"+
    "\25\u0195\1\0\1\u0196\2\0\1\u0196\3\0\1\u0196\1\0"+
    "\1\u0196\13\0\1\62\6\0\25\u0196\1\0\1\u0196\2\0"+
    "\1\u0197\1\7\2\61\1\u0196\1\0\1\u0197\13\0\1\62"+
    "\6\0\25\u0197\1\0\1\u0198\2\0\1\u0196\3\0\1\u0196"+
    "\1\0\1\u0196\13\0\1\62\6\0\25\u0196\1\0\1\u0199"+
    "\2\0\1\u0199\3\0\1\u0199\1\0\1\u0199\22\0\25\u0199"+
    "\1\0\1\u0199\2\0\1\u019a\1\101\2\0\1\u0199\1\0"+
    "\1\u019a\22\0\25\u019a\1\0\1\u019b\2\0\1\u019b\3\0"+
    "\1\u019b\1\0\1\u019b\13\0\1\62\6\0\25\u019b\1\0"+
    "\1\u019b\2\0\1\u019c\1\7\2\61\1\u019b\1\0\1\u019c"+
    "\13\0\1\62\6\0\25\u019c\1\0\1\u019d\2\0\1\u019b"+
    "\3\0\1\u019b\1\0\1\u019b\13\0\1\62\6\0\25\u019b"+
    "\1\0\1\u019e\2\0\1\u019e\3\0\1\u019e\1\0\1\u019e"+
    "\22\0\25\u019e\1\0\1\u019e\2\0\1\u019f\1\101\2\0"+
    "\1\u019e\1\0\1\u019f\22\0\25\u019f\1\0\1\u01a0\2\0"+
    "\1\u01a0\3\0\1\u01a0\1\0\1\u01a0\13\0\1\62\6\0"+
    "\25\u01a0\1\0\1\u01a0\2\0\1\u01a1\1\7\2\61\1\u01a0"+
    "\1\0\1\u01a1\13\0\1\62\6\0\25\u01a1\1\0\1\u01a2"+
    "\2\0\1\u01a0\3\0\1\u01a0\1\0\1\u01a0\13\0\1\62"+
    "\6\0\25\u01a0\1\0\1\u01a3\2\0\1\u01a3\3\0\1\u01a3"+
    "\1\0\1\u01a3\22\0\25\u01a3\1\0\1\u01a3\2\0\1\u01a4"+
    "\1\101\2\0\1\u01a3\1\0\1\u01a4\22\0\25\u01a4\1\0"+
    "\1\u01a5\2\0\1\u01a5\3\0\1\u01a5\1\0\1\u01a5\13\0"+
    "\1\62\6\0\25\u01a5\1\0\1\u01a5\2\0\1\u01a6\1\7"+
    "\2\61\1\u01a5\1\0\1\u01a6\13\0\1\62\6\0\25\u01a6"+
    "\1\0\1\u01a7\2\0\1\u01a5\3\0\1\u01a5\1\0\1\u01a5"+
    "\13\0\1\62\6\0\25\u01a5\1\0\1\u01a8\2\0\1\u01a8"+
    "\3\0\1\u01a8\1\0\1\u01a8\22\0\25\u01a8\1\0\1\u01a8"+
    "\2\0\1\u01a9\1\101\2\0\1\u01a8\1\0\1\u01a9\22\0"+
    "\25\u01a9\1\0\1\u01aa\2\0\1\u01aa\3\0\1\u01aa\1\0"+
    "\1\u01aa\13\0\1\62\6\0\25\u01aa\1\0\1\u01aa\2\0"+
    "\1\u01ab\1\7\2\61\1\u01aa\1\0\1\u01ab\13\0\1\62"+
    "\6\0\25\u01ab\1\0\1\u01ac\2\0\1\u01aa\3\0\1\u01aa"+
    "\1\0\1\u01aa\13\0\1\62\6\0\25\u01aa\1\0\1\u01ad"+
    "\2\0\1\u01ad\3\0\1\u01ad\1\0\1\u01ad\22\0\25\u01ad"+
    "\1\0\1\u01ad\2\0\1\u01ae\1\101\2\0\1\u01ad\1\0"+
    "\1\u01ae\22\0\25\u01ae\1\0\1\u01af\2\0\1\u01af\3\0"+
    "\1\u01af\1\0\1\u01af\13\0\1\62\6\0\25\u01af\1\0"+
    "\1\u01af\2\0\1\u01b0\1\7\2\61\1\u01af\1\0\1\u01b0"+
    "\13\0\1\62\6\0\25\u01b0\1\0\1\u01b1\2\0\1\u01af"+
    "\3\0\1\u01af\1\0\1\u01af\13\0\1\62\6\0\25\u01af"+
    "\1\0\1\u01b2\2\0\1\u01b2\3\0\1\u01b2\1\0\1\u01b2"+
    "\22\0\25\u01b2\1\0\1\u01b2\2\0\1\u01b3\1\101\2\0"+
    "\1\u01b2\1\0\1\u01b3\22\0\25\u01b3\1\0\1\u01b4\2\0"+
    "\1\u01b4\3\0\1\u01b4\1\0\1\u01b4\13\0\1\62\6\0"+
    "\25\u01b4\1\0\1\u01b4\2\0\1\u01b5\1\7\2\61\1\u01b4"+
    "\1\0\1\u01b5\13\0\1\62\6\0\25\u01b5\1\0\1\u01b6"+
    "\2\0\1\u01b4\3\0\1\u01b4\1\0\1\u01b4\13\0\1\62"+
    "\6\0\25\u01b4\1\0\1\u01b7\2\0\1\u01b7\3\0\1\u01b7"+
    "\1\0\1\u01b7\22\0\25\u01b7\1\0\1\u01b7\2\0\1\u01b8"+
    "\1\101\2\0\1\u01b7\1\0\1\u01b8\22\0\25\u01b8\1\0"+
    "\1\u01b9\2\0\1\u01b9\3\0\1\u01b9\1\0\1\u01b9\13\0"+
    "\1\62\6\0\25\u01b9\1\0\1\u01b9\2\0\1\u01ba\1\7"+
    "\2\61\1\u01b9\1\0\1\u01ba\13\0\1\62\6\0\25\u01ba"+
    "\1\0\1\u01bb\2\0\1\u01b9\3\0\1\u01b9\1\0\1\u01b9"+
    "\13\0\1\62\6\0\25\u01b9\1\0\1\u01bc\2\0\1\u01bc"+
    "\3\0\1\u01bc\1\0\1\u01bc\22\0\25\u01bc\1\0\1\u01bc"+
    "\2\0\1\u01bd\1\101\2\0\1\u01bc\1\0\1\u01bd\22\0"+
    "\25\u01bd\1\0\1\u01be\2\0\1\u01be\3\0\1\u01be\1\0"+
    "\1\u01be\13\0\1\62\6\0\25\u01be\1\0\1\u01be\2\0"+
    "\1\u01bf\1\7\2\61\1\u01be\1\0\1\u01bf\13\0\1\62"+
    "\6\0\25\u01bf\1\0\1\u01c0\2\0\1\u01be\3\0\1\u01be"+
    "\1\0\1\u01be\13\0\1\62\6\0\25\u01be\1\0\1\u01c1"+
    "\2\0\1\u01c1\3\0\1\u01c1\1\0\1\u01c1\22\0\25\u01c1"+
    "\1\0\1\u01c1\2\0\1\u01c2\1\101\2\0\1\u01c1\1\0"+
    "\1\u01c2\22\0\25\u01c2\1\0\1\u01c3\2\0\1\u01c3\3\0"+
    "\1\u01c3\1\0\1\u01c3\13\0\1\62\6\0\25\u01c3\1\0"+
    "\1\u01c3\2\0\1\u01c4\1\7\2\61\1\u01c3\1\0\1\u01c4"+
    "\13\0\1\62\6\0\25\u01c4\1\0\1\u01c5\2\0\1\u01c3"+
    "\3\0\1\u01c3\1\0\1\u01c3\13\0\1\62\6\0\25\u01c3"+
    "\1\0\1\u01c6\2\0\1\u01c6\3\0\1\u01c6\1\0\1\u01c6"+
    "\22\0\25\u01c6\1\0\1\u01c6\2\0\1\u01c7\1\101\2\0"+
    "\1\u01c6\1\0\1\u01c7\22\0\25\u01c7\1\0\1\u01c8\2\0"+
    "\1\u01c8\3\0\1\u01c8\1\0\1\u01c8\13\0\1\62\6\0"+
    "\25\u01c8\1\0\1\u01c8\2\0\1\u01c9\1\7\2\61\1\u01c8"+
    "\1\0\1\u01c9\13\0\1\62\6\0\25\u01c9\1\0\1\u01ca"+
    "\2\0\1\u01c8\3\0\1\u01c8\1\0\1\u01c8\13\0\1\62"+
    "\6\0\25\u01c8\1\0\1\u01cb\2\0\1\u01cb\3\0\1\u01cb"+
    "\1\0\1\u01cb\22\0\25\u01cb\1\0\1\u01cb\2\0\1\u01cc"+
    "\1\101\2\0\1\u01cb\1\0\1\u01cc\22\0\25\u01cc\1\0"+
    "\1\u01cd\2\0\1\u01cd\3\0\1\u01cd\1\0\1\u01cd\13\0"+
    "\1\62\6\0\25\u01cd\1\0\1\u01cd\2\0\1\u01ce\1\7"+
    "\2\61\1\u01cd\1\0\1\u01ce\13\0\1\62\6\0\25\u01ce"+
    "\1\0\1\u01cf\2\0\1\u01cd\3\0\1\u01cd\1\0\1\u01cd"+
    "\13\0\1\62\6\0\25\u01cd\1\0\1\u01d0\2\0\1\u01d0"+
    "\3\0\1\u01d0\1\0\1\u01d0\22\0\25\u01d0\1\0\1\u01d0"+
    "\2\0\1\u01d1\1\101\2\0\1\u01d0\1\0\1\u01d1\22\0"+
    "\25\u01d1\1\0\1\u01d2\2\0\1\u01d2\3\0\1\u01d2\1\0"+
    "\1\u01d2\13\0\1\62\6\0\25\u01d2\1\0\1\u01d2\2\0"+
    "\1\u01d3\1\7\2\61\1\u01d2\1\0\1\u01d3\13\0\1\62"+
    "\6\0\25\u01d3\1\0\1\u01d4\2\0\1\u01d2\3\0\1\u01d2"+
    "\1\0\1\u01d2\13\0\1\62\6\0\25\u01d2\1\0\1\u01d5"+
    "\2\0\1\u01d5\3\0\1\u01d5\1\0\1\u01d5\22\0\25\u01d5"+
    "\1\0\1\u01d5\2\0\1\u01d6\1\101\2\0\1\u01d5\1\0"+
    "\1\u01d6\22\0\25\u01d6\1\0\1\u01d7\2\0\1\u01d7\3\0"+
    "\1\u01d7\1\0\1\u01d7\13\0\1\62\6\0\25\u01d7\1\0"+
    "\1\u01d7\2\0\1\u01d8\1\7\2\61\1\u01d7\1\0\1\u01d8"+
    "\13\0\1\62\6\0\25\u01d8\1\0\1\u01d9\2\0\1\u01d7"+
    "\3\0\1\u01d7\1\0\1\u01d7\13\0\1\62\6\0\25\u01d7"+
    "\1\0\1\u01da\2\0\1\u01da\3\0\1\u01da\1\0\1\u01da"+
    "\22\0\25\u01da\1\0\1\u01da\2\0\1\u01db\1\101\2\0"+
    "\1\u01da\1\0\1\u01db\22\0\25\u01db\1\0\1\u01dc\2\0"+
    "\1\u01dc\3\0\1\u01dc\1\0\1\u01dc\13\0\1\62\6\0"+
    "\25\u01dc\1\0\1\u01dc\2\0\1\u01dd\1\7\2\61\1\u01dc"+
    "\1\0\1\u01dd\13\0\1\62\6\0\25\u01dd\1\0\1\u01de"+
    "\2\0\1\u01dc\3\0\1\u01dc\1\0\1\u01dc\13\0\1\62"+
    "\6\0\25\u01dc\1\0\1\u01df\2\0\1\u01df\3\0\1\u01df"+
    "\1\0\1\u01df\22\0\25\u01df\1\0\1\u01df\2\0\1\u01e0"+
    "\1\101\2\0\1\u01df\1\0\1\u01e0\22\0\25\u01e0\1\0"+
    "\1\u01e1\2\0\1\u01e1\3\0\1\u01e1\1\0\1\u01e1\13\0"+
    "\1\62\6\0\25\u01e1\1\0\1\u01e1\2\0\1\u01e2\1\7"+
    "\2\61\1\u01e1\1\0\1\u01e2\13\0\1\62\6\0\25\u01e2"+
    "\1\0\1\u01e3\2\0\1\u01e1\3\0\1\u01e1\1\0\1\u01e1"+
    "\13\0\1\62\6\0\25\u01e1\1\0\1\u01e4\2\0\1\u01e4"+
    "\3\0\1\u01e4\1\0\1\u01e4\22\0\25\u01e4\1\0\1\u01e4"+
    "\2\0\1\u01e5\1\101\2\0\1\u01e4\1\0\1\u01e5\22\0"+
    "\25\u01e5\1\0\1\u01e6\2\0\1\u01e6\3\0\1\u01e6\1\0"+
    "\1\u01e6\13\0\1\62\6\0\25\u01e6\1\0\1\u01e6\2\0"+
    "\1\u01e7\1\7\2\61\1\u01e6\1\0\1\u01e7\13\0\1\62"+
    "\6\0\25\u01e7\1\0\1\u01e8\2\0\1\u01e6\3\0\1\u01e6"+
    "\1\0\1\u01e6\13\0\1\62\6\0\25\u01e6\1\0\1\u01e9"+
    "\2\0\1\u01e9\3\0\1\u01e9\1\0\1\u01e9\22\0\25\u01e9"+
    "\1\0\1\u01e9\2\0\1\u01ea\1\101\2\0\1\u01e9\1\0"+
    "\1\u01ea\22\0\25\u01ea\26\0\1\62\37\0\1\u01eb\1\7"+
    "\2\61\2\0\1\u01eb\13\0\1\62\6\0\25\u01eb\1\0"+
    "\1\142\24\0\1\62\34\0\1\u01ec\2\0\1\u01ec\3\0"+
    "\1\u01ec\1\0\1\u01ec\22\0\25\u01ec\1\0\1\u01ec\2\0"+
    "\1\u01ed\1\101\2\0\1\u01ec\1\0\1\u01ed\22\0\25\u01ed"+
    "\4\0\1\u01eb\1\7\2\61\2\0\1\u01eb\22\0\25\u01eb";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\11\1\1\11\1\1\1\11\1\1\11\11"+
    "\2\1\2\11\17\1\2\0\4\1\1\0\3\1\1\0"+
    "\2\1\1\0\5\11\1\0\47\1\1\11\57\1\1\0"+
    "\64\1\1\0\57\1\1\0\145\1\1\11\211\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;
    modelos.InformacionLexema c = new modelos.InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARRIBA;
          }
        case 91: break;
        case 16: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_O;
          }
        case 92: break;
        case 26: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMA;
          }
        case 93: break;
        case 50: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LEER;
          }
        case 94: break;
        case 3: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO;
          }
        case 95: break;
        case 69: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_INICIAR;
          }
        case 96: break;
        case 7: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_MAYUS;
          }
        case 97: break;
        case 55: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ATRAS;
          }
        case 98: break;
        case 75: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CAPTURA;
          }
        case 99: break;
        case 41: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR_ARREGLO;
          }
        case 100: break;
        case 4: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MAS;
          }
        case 101: break;
        case 6: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR;
          }
        case 102: break;
        case 65: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_APAGAR;
          }
        case 103: break;
        case 36: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DESIGUAL;
          }
        case 104: break;
        case 40: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SI;
          }
        case 105: break;
        case 66: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SEGUIR;
          }
        case 106: break;
        case 10: 
          { /*Ignore*/
          }
        case 107: break;
        case 61: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CADENA;
          }
        case 108: break;
        case 87: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VERDADERO;
          }
        case 109: break;
        case 59: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_GIRAR;
          }
        case 110: break;
        case 84: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ADELANTE;
          }
        case 111: break;
        case 24: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR;
          }
        case 112: break;
        case 43: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIN;
          }
        case 113: break;
        case 21: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_IZQ;
          }
        case 114: break;
        case 63: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARGAR;
          }
        case 115: break;
        case 23: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR;
          }
        case 116: break;
        case 15: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_DIVISION;
          }
        case 117: break;
        case 72: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ESPERAR;
          }
        case 118: break;
        case 46: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NULO;
          }
        case 119: break;
        case 68: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECIMAL;
          }
        case 120: break;
        case 53: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FALSO;
          }
        case 121: break;
        case 52: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CICLO;
          }
        case 122: break;
        case 79: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_MIENTRAS;
          }
        case 123: break;
        case 51: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CORTO;
          }
        case 124: break;
        case 56: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ABAJO;
          }
        case 125: break;
        case 39: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NO;
          }
        case 126: break;
        case 9: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_Y;
          }
        case 127: break;
        case 11: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMILLA_SIMPLE;
          }
        case 128: break;
        case 57: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARAV;
          }
        case 129: break;
        case 37: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA;
          }
        case 130: break;
        case 90: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DIRECCIONAR;
          }
        case 131: break;
        case 70: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FUNCION;
          }
        case 132: break;
        case 71: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_EJECUTAR;
          }
        case 133: break;
        case 54: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENTERO;
          }
        case 134: break;
        case 60: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VIDEO;
          }
        case 135: break;
        case 47: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARA;
          }
        case 136: break;
        case 44: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PIN;
          }
        case 137: break;
        case 82: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CALIBRAR;
          }
        case 138: break;
        case 80: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_BOOLEANO;
          }
        case 139: break;
        case 29: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ID_CON_SIMBOLOS;
          }
        case 140: break;
        case 49: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIJO;
          }
        case 141: break;
        case 18: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_NEGACION;
          }
        case 142: break;
        case 48: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RUTA;
          }
        case 143: break;
        case 5: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MENOS;
          }
        case 144: break;
        case 45: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_HAZ;
          }
        case 145: break;
        case 19: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MODULO;
          }
        case 146: break;
        case 31: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_EXPONENTE;
          }
        case 147: break;
        case 83: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ACELERAR;
          }
        case 148: break;
        case 2: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR;
          }
        case 149: break;
        case 22: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_DER;
          }
        case 150: break;
        case 32: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return CADENA_TEXTO;
          }
        case 151: break;
        case 17: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_OR;
          }
        case 152: break;
        case 76: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DETENER;
          }
        case 153: break;
        case 73: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RETORNO;
          }
        case 154: break;
        case 35: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR_IGUAL;
          }
        case 155: break;
        case 89: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECLARACION;
          }
        case 156: break;
        case 38: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA_MAYUS;
          }
        case 157: break;
        case 67: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARREGLO;
          }
        case 158: break;
        case 77: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DERECHA;
          }
        case 159: break;
        case 13: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ASIGNACION;
          }
        case 160: break;
        case 86: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PRINCIPAL;
          }
        case 161: break;
        case 1: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_PUNTOS;
          }
        case 162: break;
        case 88: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IZQUIERDA;
          }
        case 163: break;
        case 28: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ID_NUM;
          }
        case 164: break;
        case 81: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENCENDER;
          }
        case 165: break;
        case 30: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_DECIMAL;
          }
        case 166: break;
        case 58: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LARGO;
          }
        case 167: break;
        case 74: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_REGRESA;
          }
        case 168: break;
        case 34: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR_IGUAL;
          }
        case 169: break;
        case 33: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_IGUALDAD;
          }
        case 170: break;
        case 25: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DOS_PUNTOS;
          }
        case 171: break;
        case 85: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IMPRIMIR;
          }
        case 172: break;
        case 14: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_POR;
          }
        case 173: break;
        case 8: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return SNP;
          }
        case 174: break;
        case 78: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARACTER;
          }
        case 175: break;
        case 20: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PUNTO_COMA;
          }
        case 176: break;
        case 12: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return SALTO_LINEA;
          }
        case 177: break;
        case 42: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA_NUM;
          }
        case 178: break;
        case 27: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ARROBA;
          }
        case 179: break;
        case 62: 
          { 
          }
        case 180: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
