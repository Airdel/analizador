/* The following code was generated by JFlex 1.4.3 on 20/06/21 23:17 */

package analizador;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/06/21 23:17 from the specification file
 * <tt>C:/analizador/src/analizador/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 11,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  5,  0,  0,  0, 20,  5, 10, 35, 36, 20,  2,  0,  3,  7, 20, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 33, 34, 19, 17, 18,  0, 
    31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  6, 
     0, 15, 12, 21, 22,  8, 27,  4,  4, 25, 32,  4, 14, 26, 16, 13, 
    29,  4, 23, 28, 24,  4, 30,  4,  4,  4,  4,  0,  5,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\5\1\7\1\1\2\5\1\10\2\11\1\12\10\5"+
    "\1\1\1\13\1\14\1\15\1\16\2\0\1\7\1\5"+
    "\1\17\1\5\1\0\1\5\1\0\1\20\2\5\1\11"+
    "\7\5\1\21\2\5\3\0\1\22\13\5\1\23\2\5"+
    "\5\0\16\5\5\0\5\5\1\24\5\5\1\25\2\5"+
    "\5\0\2\5\1\26\1\5\1\27\1\30\6\5\1\0"+
    "\1\31\2\0\4\5\1\32\1\33\3\5\3\0\2\5"+
    "\1\34\1\5\1\35\2\5\2\0\3\5\1\36\1\37"+
    "\5\5\1\40\52\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\112\0\157\0\224\0\45\0\271"+
    "\0\336\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u0197\0\u01bc"+
    "\0\45\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf"+
    "\0\u02e4\0\u0309\0\45\0\45\0\45\0\45\0\271\0\u032e"+
    "\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0128\0\45"+
    "\0\u0431\0\u0456\0\45\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f"+
    "\0\u0534\0\u0559\0\u0378\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612"+
    "\0\u03e7\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715"+
    "\0\u073a\0\u075f\0\u0784\0\u07a9\0\u0637\0\u07ce\0\u07f3\0\u0818"+
    "\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0940"+
    "\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68"+
    "\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b\0\u0b90"+
    "\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0b90\0\u0c49\0\u0c6e\0\u0c93"+
    "\0\u0cb8\0\u0cdd\0\u0b90\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96"+
    "\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u0e05\0\u0e4f\0\u0e05\0\u0e05"+
    "\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\45"+
    "\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u0fc1\0\u0fc1"+
    "\0\u1055\0\u107a\0\u109f\0\u10c4\0\u10e9\0\u110e\0\u1133\0\u1158"+
    "\0\u1133\0\u117d\0\u1133\0\u11a2\0\u11c7\0\u11ec\0\u1211\0\u1236"+
    "\0\u125b\0\u1280\0\u1236\0\u1236\0\u12a5\0\u12ca\0\u12ef\0\u1314"+
    "\0\u1339\0\u1314\0\u135e\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417"+
    "\0\u143c\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f"+
    "\0\u1564\0\u1589\0\u15ae\0\u15d3\0\u15f8\0\u161d\0\u1642\0\u1667"+
    "\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u1720\0\u1745\0\u176a\0\u178f"+
    "\0\u17b4\0\u17d9\0\u17fe\0\u1823\0\u1848\0\u186d\0\u1892\0\u18b7"+
    "\0\u18dc\0\u1901\0\45\0\u03e7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\12\1\14\1\6\1\15\2\6"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\2\6\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\6\1\33"+
    "\1\34\1\35\1\36\46\0\1\3\5\0\1\37\1\40"+
    "\35\0\1\3\1\0\1\41\3\0\1\37\1\40\35\0"+
    "\1\42\2\0\1\42\1\0\1\42\1\0\1\42\3\0"+
    "\5\42\4\0\12\42\1\0\1\42\5\0\1\43\44\0"+
    "\1\44\2\45\1\42\1\0\1\42\1\0\1\42\3\0"+
    "\4\42\1\46\4\0\12\42\1\0\1\42\15\0\1\12"+
    "\1\0\1\12\31\0\12\47\1\50\32\47\1\0\1\42"+
    "\2\0\1\42\1\0\1\42\1\0\1\42\3\0\1\42"+
    "\1\51\3\42\4\0\12\42\1\0\1\42\5\0\1\42"+
    "\2\0\1\42\1\0\1\42\1\0\1\42\3\0\2\42"+
    "\1\52\2\42\4\0\12\42\1\0\1\42\25\0\1\53"+
    "\44\0\2\53\23\0\1\42\2\0\1\42\1\0\1\42"+
    "\1\0\1\42\3\0\1\42\1\54\1\42\1\55\1\42"+
    "\4\0\12\42\1\0\1\42\5\0\1\42\2\0\1\42"+
    "\1\0\1\42\1\0\1\56\3\0\5\42\4\0\12\42"+
    "\1\0\1\42\5\0\1\42\2\0\1\42\1\0\1\42"+
    "\1\0\1\42\3\0\4\42\1\57\4\0\12\42\1\0"+
    "\1\42\5\0\1\42\2\0\1\42\1\0\1\42\1\0"+
    "\1\42\3\0\5\42\4\0\4\42\1\60\5\42\1\0"+
    "\1\42\5\0\1\42\2\0\1\42\1\0\1\42\1\0"+
    "\1\42\3\0\3\42\1\61\1\42\4\0\4\42\1\62"+
    "\5\42\1\0\1\42\5\0\1\42\2\0\1\42\1\0"+
    "\1\42\1\0\1\42\3\0\5\42\4\0\4\42\1\63"+
    "\5\42\1\0\1\42\5\0\1\42\2\0\1\42\1\0"+
    "\1\42\1\0\1\42\3\0\5\42\4\0\2\42\1\64"+
    "\7\42\1\0\1\42\5\0\1\42\2\0\1\42\1\0"+
    "\1\42\1\0\1\65\3\0\5\42\4\0\12\42\1\0"+
    "\1\42\14\0\1\66\6\0\1\67\5\0\1\70\20\0"+
    "\1\71\2\45\41\0\13\41\1\0\31\41\1\0\1\72"+
    "\2\0\1\72\1\0\1\72\1\0\1\72\3\0\5\72"+
    "\4\0\12\72\1\0\1\72\5\0\1\43\6\0\1\40"+
    "\35\0\1\73\2\0\1\72\1\0\1\72\1\0\1\72"+
    "\3\0\5\72\4\0\12\72\1\0\1\72\5\0\1\71"+
    "\44\0\1\72\2\0\1\72\1\0\1\72\1\0\1\72"+
    "\3\0\5\72\4\0\3\72\1\74\6\72\1\0\1\72"+
    "\5\0\1\72\2\0\1\72\1\0\1\72\1\0\1\72"+
    "\3\0\1\72\1\75\3\72\4\0\12\72\1\0\1\72"+
    "\5\0\1\72\2\0\1\72\1\0\1\72\1\0\1\72"+
    "\3\0\3\72\1\76\1\72\4\0\12\72\1\0\1\72"+
    "\5\0\1\72\2\0\1\72\1\0\1\72\1\0\1\72"+
    "\3\0\5\72\4\0\2\72\1\77\7\72\1\0\1\72"+
    "\5\0\1\72\2\0\1\72\1\0\1\72\1\0\1\72"+
    "\3\0\5\72\4\0\1\72\1\100\10\72\1\0\1\72"+
    "\5\0\1\72\2\0\1\72\1\0\1\72\1\0\1\72"+
    "\3\0\5\72\4\0\1\101\11\72\1\0\1\72\5\0"+
    "\1\72\2\0\1\72\1\0\1\72\1\0\1\72\3\0"+
    "\5\72\4\0\4\72\1\102\5\72\1\0\1\72\5\0"+
    "\1\72\2\0\1\72\1\0\1\72\1\0\1\103\3\0"+
    "\5\72\4\0\12\72\1\0\1\72\5\0\1\72\2\0"+
    "\1\72\1\0\1\72\1\0\1\72\3\0\2\72\1\104"+
    "\2\72\4\0\12\72\1\0\1\72\5\0\1\72\2\0"+
    "\1\72\1\0\1\72\1\0\1\72\3\0\4\72\1\105"+
    "\4\0\12\72\1\0\1\72\5\0\1\72\2\0\1\72"+
    "\1\0\1\72\1\0\1\72\3\0\5\72\4\0\4\72"+
    "\1\106\5\72\1\0\1\72\5\0\1\72\2\0\1\72"+
    "\1\0\1\72\1\0\1\72\3\0\5\72\4\0\2\72"+
    "\1\107\7\72\1\0\1\72\24\0\1\110\40\0\1\111"+
    "\10\0\1\112\1\113\35\0\1\114\26\0\1\115\2\0"+
    "\1\115\1\0\1\115\1\0\1\115\3\0\5\115\4\0"+
    "\12\115\1\0\1\115\5\0\1\116\2\0\1\115\1\0"+
    "\1\115\1\0\1\115\3\0\5\115\4\0\12\115\1\0"+
    "\1\115\5\0\1\115\2\0\1\115\1\0\1\115\1\0"+
    "\1\117\3\0\5\115\4\0\12\115\1\0\1\115\5\0"+
    "\1\115\2\0\1\115\1\0\1\115\1\0\1\115\3\0"+
    "\2\115\1\120\2\115\4\0\12\115\1\0\1\115\5\0"+
    "\1\115\2\0\1\115\1\0\1\115\1\0\1\115\3\0"+
    "\5\115\4\0\5\115\1\121\4\115\1\0\1\115\5\0"+
    "\1\115\2\0\1\115\1\0\1\115\1\0\1\115\3\0"+
    "\5\115\4\0\3\115\1\122\6\115\1\0\1\115\5\0"+
    "\1\115\2\0\1\115\1\0\1\115\1\0\1\123\3\0"+
    "\5\115\4\0\12\115\1\0\1\115\5\0\1\115\2\0"+
    "\1\115\1\0\1\115\1\0\1\115\3\0\2\115\1\124"+
    "\2\115\4\0\4\115\1\125\5\115\1\0\1\115\5\0"+
    "\1\115\2\0\1\115\1\0\1\115\1\0\1\115\3\0"+
    "\5\115\4\0\1\126\11\115\1\0\1\115\5\0\1\115"+
    "\2\0\1\115\1\0\1\115\1\0\1\115\3\0\4\115"+
    "\1\127\4\0\12\115\1\0\1\115\5\0\1\115\2\0"+
    "\1\115\1\0\1\115\1\0\1\115\3\0\5\115\4\0"+
    "\7\115\1\130\2\115\1\0\1\115\5\0\1\115\2\0"+
    "\1\115\1\0\1\115\1\0\1\115\3\0\4\115\1\131"+
    "\4\0\12\115\1\0\1\115\5\0\1\115\2\0\1\115"+
    "\1\0\1\115\1\0\1\115\3\0\5\115\4\0\1\115"+
    "\1\132\10\115\1\0\1\115\31\0\1\133\36\0\1\134"+
    "\35\0\1\135\44\0\1\136\52\0\1\137\27\0\1\140"+
    "\2\0\1\140\1\0\1\140\1\0\1\140\3\0\5\140"+
    "\4\0\12\140\1\0\1\140\5\0\1\141\2\0\1\140"+
    "\1\0\1\140\1\0\1\140\3\0\5\140\4\0\12\140"+
    "\1\0\1\140\5\0\1\140\2\0\1\140\1\0\1\140"+
    "\1\0\1\140\3\0\5\140\4\0\2\140\1\142\7\140"+
    "\1\0\1\140\5\0\1\140\2\0\1\140\1\0\1\140"+
    "\1\0\1\143\3\0\5\140\4\0\12\140\1\0\1\140"+
    "\5\0\1\140\2\0\1\140\1\0\1\140\1\0\1\140"+
    "\3\0\3\140\1\144\1\140\4\0\12\140\1\0\1\140"+
    "\5\0\1\140\2\0\1\140\1\0\1\140\1\0\1\140"+
    "\3\0\1\140\1\145\3\140\4\0\12\140\1\0\1\140"+
    "\5\0\1\140\2\0\1\140\1\0\1\140\1\0\1\140"+
    "\3\0\4\140\1\146\4\0\12\140\1\0\1\140\5\0"+
    "\1\140\2\0\1\140\1\0\1\140\1\0\1\140\3\0"+
    "\3\140\1\147\1\140\4\0\12\140\1\0\1\140\5\0"+
    "\1\140\2\0\1\140\1\0\1\140\1\0\1\140\3\0"+
    "\5\140\4\0\5\140\1\150\4\140\1\0\1\140\5\0"+
    "\1\140\2\0\1\140\1\0\1\140\1\0\1\140\3\0"+
    "\5\140\4\0\4\140\1\151\5\140\1\0\1\140\5\0"+
    "\1\140\2\0\1\140\1\0\1\140\1\0\1\140\3\0"+
    "\5\140\4\0\3\140\1\152\6\140\1\0\1\140\5\0"+
    "\1\140\2\0\1\140\1\0\1\140\1\0\1\140\3\0"+
    "\1\140\1\153\3\140\4\0\12\140\1\0\1\140\5\0"+
    "\1\140\2\0\1\140\1\0\1\140\1\0\1\140\3\0"+
    "\5\140\4\0\1\154\11\140\1\0\1\140\5\0\1\140"+
    "\2\0\1\140\1\0\1\140\1\0\1\140\3\0\3\140"+
    "\1\155\1\140\4\0\12\140\1\0\1\140\14\0\1\156"+
    "\74\0\1\157\22\0\1\160\44\0\1\161\57\0\1\162"+
    "\14\0\1\163\2\0\1\163\1\0\1\163\1\0\1\163"+
    "\3\0\5\163\4\0\12\163\1\0\1\163\5\0\1\164"+
    "\2\0\1\163\1\0\1\163\1\0\1\163\3\0\5\163"+
    "\4\0\12\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\1\163\1\165\3\163"+
    "\4\0\12\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\3\163\1\166\1\163"+
    "\4\0\12\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\5\163\4\0\2\163"+
    "\1\167\7\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\3\163\1\170\1\163"+
    "\4\0\12\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\5\163\4\0\2\163"+
    "\1\171\7\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\3\163\1\172\1\163"+
    "\4\0\12\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\3\163\1\173\1\163"+
    "\4\0\12\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\5\163\4\0\2\163"+
    "\1\174\7\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\5\163\4\0\4\163"+
    "\1\175\5\163\1\0\1\163\5\0\1\163\2\0\1\163"+
    "\1\0\1\163\1\0\1\163\3\0\5\163\4\0\1\163"+
    "\1\176\10\163\1\0\1\163\24\0\1\177\41\0\1\200"+
    "\37\0\1\201\53\0\1\202\41\0\1\201\31\0\1\203"+
    "\2\0\1\203\1\0\1\203\1\0\1\203\3\0\5\203"+
    "\4\0\12\203\1\0\1\203\5\0\1\204\2\0\1\203"+
    "\1\0\1\203\1\0\1\203\3\0\5\203\4\0\12\203"+
    "\1\0\1\203\5\0\1\203\2\0\1\203\1\0\1\203"+
    "\1\0\1\203\3\0\4\203\1\205\4\0\12\203\1\0"+
    "\1\203\5\0\1\203\2\0\1\203\1\0\1\203\1\0"+
    "\1\203\3\0\3\203\1\206\1\203\4\0\12\203\1\0"+
    "\1\203\5\0\1\203\2\0\1\203\1\0\1\203\1\0"+
    "\1\203\3\0\2\203\1\207\2\203\4\0\12\203\1\0"+
    "\1\203\5\0\1\203\2\0\1\203\1\0\1\203\1\0"+
    "\1\203\3\0\5\203\4\0\2\203\1\210\7\203\1\0"+
    "\1\203\5\0\1\203\2\0\1\203\1\0\1\203\1\0"+
    "\1\203\3\0\3\203\1\211\1\203\4\0\12\203\1\0"+
    "\1\203\5\0\1\203\2\0\1\203\1\0\1\203\1\0"+
    "\1\203\3\0\5\203\4\0\10\203\1\212\1\203\1\0"+
    "\1\203\5\0\1\203\2\0\1\203\1\0\1\203\1\0"+
    "\1\213\3\0\5\203\4\0\12\203\1\0\1\203\32\0"+
    "\1\214\45\0\1\215\35\0\1\216\25\0\1\217\2\0"+
    "\1\217\1\0\1\217\1\0\1\217\3\0\5\217\4\0"+
    "\12\217\1\0\1\217\5\0\1\220\2\0\1\217\1\0"+
    "\1\217\1\0\1\217\3\0\5\217\4\0\12\217\1\0"+
    "\1\217\5\0\1\217\2\0\1\217\1\0\1\217\1\0"+
    "\1\217\3\0\1\217\1\221\3\217\4\0\12\217\1\0"+
    "\1\217\5\0\1\217\2\0\1\217\1\0\1\217\1\0"+
    "\1\217\3\0\5\217\4\0\1\222\11\217\1\0\1\217"+
    "\5\0\1\217\2\0\1\217\1\0\1\217\1\0\1\217"+
    "\3\0\5\217\4\0\7\217\1\223\2\217\1\0\1\217"+
    "\5\0\1\217\2\0\1\217\1\0\1\217\1\0\1\217"+
    "\3\0\3\217\1\224\1\217\4\0\12\217\1\0\1\217"+
    "\5\0\1\217\2\0\1\217\1\0\1\217\1\0\1\217"+
    "\3\0\5\217\4\0\2\217\1\225\7\217\1\0\1\217"+
    "\14\0\1\226\53\0\1\226\55\0\1\227\15\0\1\230"+
    "\2\0\1\230\1\0\1\230\1\0\1\230\3\0\5\230"+
    "\4\0\12\230\1\0\1\230\5\0\1\231\2\0\1\230"+
    "\1\0\1\230\1\0\1\230\3\0\5\230\4\0\12\230"+
    "\1\0\1\230\5\0\1\230\2\0\1\230\1\0\1\230"+
    "\1\0\1\230\3\0\5\230\4\0\4\230\1\232\5\230"+
    "\1\0\1\230\5\0\1\230\2\0\1\230\1\0\1\230"+
    "\1\0\1\230\3\0\2\230\1\233\2\230\4\0\12\230"+
    "\1\0\1\230\5\0\1\230\2\0\1\230\1\0\1\230"+
    "\1\0\1\230\3\0\1\230\1\234\3\230\4\0\12\230"+
    "\1\0\1\230\33\0\1\200\25\0\1\200\35\0\1\235"+
    "\2\0\1\235\1\0\1\235\1\0\1\235\3\0\5\235"+
    "\4\0\12\235\1\0\1\235\5\0\1\236\2\0\1\235"+
    "\1\0\1\235\1\0\1\235\3\0\5\235\4\0\12\235"+
    "\1\0\1\235\5\0\1\235\2\0\1\235\1\0\1\235"+
    "\1\0\1\235\3\0\1\235\1\237\3\235\4\0\12\235"+
    "\1\0\1\235\5\0\1\240\2\0\1\240\1\0\1\240"+
    "\1\0\1\240\3\0\5\240\4\0\12\240\1\0\1\240"+
    "\5\0\1\241\2\0\1\240\1\0\1\240\1\0\1\240"+
    "\3\0\5\240\4\0\12\240\1\0\1\240\5\0\1\240"+
    "\2\0\1\240\1\0\1\240\1\0\1\240\3\0\4\240"+
    "\1\242\4\0\12\240\1\0\1\240\5\0\1\243\2\0"+
    "\1\243\1\0\1\243\1\0\1\243\3\0\5\243\4\0"+
    "\12\243\1\0\1\243\5\0\1\244\2\0\1\243\1\0"+
    "\1\243\1\0\1\243\3\0\5\243\4\0\12\243\1\0"+
    "\1\243\5\0\1\245\2\0\1\245\1\0\1\245\1\0"+
    "\1\245\3\0\5\245\4\0\12\245\1\0\1\245\5\0"+
    "\1\246\2\0\1\245\1\0\1\245\1\0\1\245\3\0"+
    "\5\245\4\0\12\245\1\0\1\245\5\0\1\247\2\0"+
    "\1\247\1\0\1\247\1\0\1\247\3\0\5\247\4\0"+
    "\12\247\1\0\1\247\5\0\1\250\2\0\1\247\1\0"+
    "\1\247\1\0\1\247\3\0\5\247\4\0\12\247\1\0"+
    "\1\247\5\0\1\251\2\0\1\251\1\0\1\251\1\0"+
    "\1\251\3\0\5\251\4\0\12\251\1\0\1\251\5\0"+
    "\1\252\2\0\1\251\1\0\1\251\1\0\1\251\3\0"+
    "\5\251\4\0\12\251\1\0\1\251\5\0\1\253\2\0"+
    "\1\253\1\0\1\253\1\0\1\253\3\0\5\253\4\0"+
    "\12\253\1\0\1\253\5\0\1\254\2\0\1\253\1\0"+
    "\1\253\1\0\1\253\3\0\5\253\4\0\12\253\1\0"+
    "\1\253\5\0\1\255\2\0\1\255\1\0\1\255\1\0"+
    "\1\255\3\0\5\255\4\0\12\255\1\0\1\255\5\0"+
    "\1\256\2\0\1\255\1\0\1\255\1\0\1\255\3\0"+
    "\5\255\4\0\12\255\1\0\1\255\5\0\1\257\2\0"+
    "\1\257\1\0\1\257\1\0\1\257\3\0\5\257\4\0"+
    "\12\257\1\0\1\257\5\0\1\260\2\0\1\257\1\0"+
    "\1\257\1\0\1\257\3\0\5\257\4\0\12\257\1\0"+
    "\1\257\5\0\1\261\2\0\1\261\1\0\1\261\1\0"+
    "\1\261\3\0\5\261\4\0\12\261\1\0\1\261\5\0"+
    "\1\262\2\0\1\261\1\0\1\261\1\0\1\261\3\0"+
    "\5\261\4\0\12\261\1\0\1\261\5\0\1\263\2\0"+
    "\1\263\1\0\1\263\1\0\1\263\3\0\5\263\4\0"+
    "\12\263\1\0\1\263\5\0\1\264\2\0\1\263\1\0"+
    "\1\263\1\0\1\263\3\0\5\263\4\0\12\263\1\0"+
    "\1\263\5\0\1\265\2\0\1\265\1\0\1\265\1\0"+
    "\1\265\3\0\5\265\4\0\12\265\1\0\1\265\5\0"+
    "\1\266\2\0\1\265\1\0\1\265\1\0\1\265\3\0"+
    "\5\265\4\0\12\265\1\0\1\265\5\0\1\267\2\0"+
    "\1\267\1\0\1\267\1\0\1\267\3\0\5\267\4\0"+
    "\12\267\1\0\1\267\5\0\1\270\2\0\1\267\1\0"+
    "\1\267\1\0\1\267\3\0\5\267\4\0\12\267\1\0"+
    "\1\267\5\0\1\271\2\0\1\271\1\0\1\271\1\0"+
    "\1\271\3\0\5\271\4\0\12\271\1\0\1\271\5\0"+
    "\1\272\2\0\1\271\1\0\1\271\1\0\1\271\3\0"+
    "\5\271\4\0\12\271\1\0\1\271\5\0\1\273\2\0"+
    "\1\273\1\0\1\273\1\0\1\273\3\0\5\273\4\0"+
    "\12\273\1\0\1\273\5\0\1\274\2\0\1\273\1\0"+
    "\1\273\1\0\1\273\3\0\5\273\4\0\12\273\1\0"+
    "\1\273\5\0\1\275\2\0\1\275\1\0\1\275\1\0"+
    "\1\275\3\0\5\275\4\0\12\275\1\0\1\275\5\0"+
    "\1\276\2\0\1\275\1\0\1\275\1\0\1\275\3\0"+
    "\5\275\4\0\12\275\1\0\1\275\5\0\1\277\2\0"+
    "\1\277\1\0\1\277\1\0\1\277\3\0\5\277\4\0"+
    "\12\277\1\0\1\277\5\0\1\300\2\0\1\277\1\0"+
    "\1\277\1\0\1\277\3\0\5\277\4\0\12\277\1\0"+
    "\1\277\5\0\1\301\2\0\1\301\1\0\1\301\1\0"+
    "\1\301\3\0\5\301\4\0\12\301\1\0\1\301\5\0"+
    "\1\302\2\0\1\301\1\0\1\301\1\0\1\301\3\0"+
    "\5\301\4\0\12\301\1\0\1\301\5\0\1\303\2\0"+
    "\1\303\1\0\1\303\1\0\1\303\3\0\5\303\4\0"+
    "\12\303\1\0\1\303\5\0\1\304\2\0\1\303\1\0"+
    "\1\303\1\0\1\303\3\0\5\303\4\0\12\303\1\0"+
    "\1\303\5\0\1\305\2\0\1\305\1\0\1\305\1\0"+
    "\1\305\3\0\5\305\4\0\12\305\1\0\1\305\5\0"+
    "\1\306\2\0\1\305\1\0\1\305\1\0\1\305\3\0"+
    "\5\305\4\0\12\305\1\0\1\305\5\0\1\307\2\0"+
    "\1\307\1\0\1\307\1\0\1\307\3\0\5\307\4\0"+
    "\12\307\1\0\1\307\5\0\1\310\2\0\1\307\1\0"+
    "\1\307\1\0\1\307\3\0\5\307\4\0\12\307\1\0"+
    "\1\307\5\0\1\311\2\0\1\311\1\0\1\311\1\0"+
    "\1\311\3\0\5\311\4\0\12\311\1\0\1\311\5\0"+
    "\1\312\2\0\1\311\1\0\1\311\1\0\1\311\3\0"+
    "\5\311\4\0\12\311\1\0\1\311\5\0\1\313\2\0"+
    "\1\313\1\0\1\313\1\0\1\313\3\0\5\313\4\0"+
    "\12\313\1\0\1\313\5\0\1\314\2\0\1\313\1\0"+
    "\1\313\1\0\1\313\3\0\5\313\4\0\12\313\1\0"+
    "\1\313\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6438];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\11\1\1\11\11\1\4\11"+
    "\2\0\4\1\1\0\1\1\1\0\1\11\2\1\1\11"+
    "\12\1\3\0\17\1\5\0\16\1\5\0\16\1\5\0"+
    "\14\1\1\0\1\11\2\0\11\1\3\0\7\1\2\0"+
    "\63\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    modelos.InformacionLexemaS c = new modelos.InformacionLexemaS();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return new Symbol(sym.RESERVADA_CORTO,   yychar, yyline, yytext());
          }
        case 33: break;
        case 10: 
          { return new Symbol(sym.OP_ARITMETICO2,  yychar, yyline, yytext());
          }
        case 34: break;
        case 23: 
          { return new Symbol(sym.RESERVADA_LLAMAR,     yychar, yyline, yytext());
          }
        case 35: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 36: break;
        case 21: 
          { return new Symbol(sym.RESERVADA_FALSO, yychar, yyline, yytext());
          }
        case 37: break;
        case 16: 
          { return new Symbol(sym.CADENA_TEXTO,      yychar, yyline, yytext());
          }
        case 38: break;
        case 26: 
          { return new Symbol(sym.RESERVADA_DECIMAL, yychar, yyline, yytext());
          }
        case 39: break;
        case 3: 
          { return new Symbol(sym.OP_MAS,  yychar, yyline, yytext());
          }
        case 40: break;
        case 9: 
          { return new Symbol(sym.OP_RELACIONAL,     yychar, yyline, yytext());
          }
        case 41: break;
        case 5: 
          { return new Symbol(sym.IDENTIFICADOR,     yychar, yyline, new String(yytext()));
          }
        case 42: break;
        case 19: 
          { return new Symbol(sym.RESERVADA_FIN,     yychar, yyline, yytext());
          }
        case 43: break;
        case 4: 
          { return new Symbol(sym.OP_MENOS,  yychar, yyline, yytext());
          }
        case 44: break;
        case 13: 
          { return new Symbol(sym.PARENTESIS_IZQ, yychar, yyline, yytext());
          }
        case 45: break;
        case 17: 
          { return new Symbol(sym.RESERVADA_SI,     yychar, yyline, yytext());
          }
        case 46: break;
        case 14: 
          { return new Symbol(sym.PARENTESIS_DER, yychar, yyline, yytext());
          }
        case 47: break;
        case 30: 
          { return new Symbol(sym.RESERVADA_PRINCIPAL, yychar, yyline, yytext());
          }
        case 48: break;
        case 32: 
          { return new Symbol(sym.RESERVADA_DECLARACION, yychar, yyline, yytext());
          }
        case 49: break;
        case 28: 
          { return new Symbol(sym.RESERVADA_BOOLEANO, yychar, yyline, yytext());
          }
        case 50: break;
        case 29: 
          { return new Symbol(sym.RESERVADA_MIENTRAS,     yychar, yyline, yytext());
          }
        case 51: break;
        case 2: 
          { return new Symbol(sym.NUMERO,            yychar, yyline, new Integer(yytext()));
          }
        case 52: break;
        case 18: 
          { return new Symbol(sym.NUMERO_EXPONENTE, yychar, yyline, new Double(yytext()));
          }
        case 53: break;
        case 27: 
          { return new Symbol(sym.RESERVADA_INICIAR, yychar, yyline, yytext());
          }
        case 54: break;
        case 8: 
          { return new Symbol(sym.ASIGNACION,         yychar, yyline, yytext());
          }
        case 55: break;
        case 12: 
          { return new Symbol(sym.PUNTO_COMA,        yychar, yyline, yytext());
          }
        case 56: break;
        case 6: 
          { return new Symbol(sym.OP_LOGICO,         yychar, yyline, yytext());
          }
        case 57: break;
        case 24: 
          { return new Symbol(sym.RESERVADA_CADENA,  yychar, yyline, yytext());
          }
        case 58: break;
        case 25: 
          { return new Symbol(sym.RESERVADA_ESPECIAL, yychar, yyline, yytext());
          }
        case 59: break;
        case 11: 
          { return new Symbol(sym.DOS_PUNTOS,        yychar, yyline, yytext());
          }
        case 60: break;
        case 15: 
          { return new Symbol(sym.NUMERO_DECIMAL, yychar, yyline, new Double(yytext()));
          }
        case 61: break;
        case 7: 
          { /*Ignore*/
          }
        case 62: break;
        case 31: 
          { return new Symbol(sym.RESERVADA_VERDADERO, yychar, yyline, yytext());
          }
        case 63: break;
        case 22: 
          { return new Symbol(sym.RESERVADA_ENTERO,  yychar, yyline, yytext());
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
