
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 21 10:01:08 MDT 2021
//----------------------------------------------------

package analizador;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 21 10:01:08 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\004\016\000\002\004" +
    "\012\000\002\006\004\000\002\006\003\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\007\000\002\020\004\000\002\020\003\000\002\015" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\013\005\000" +
    "\002\014\004\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\011\000\002\014" +
    "\015\000\002\014\021\000\002\012\011\000\002\016\011" +
    "\000\002\017\015\000\002\002\006\000\002\007\002\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\023\005\000\002\023\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\021\005\000\002\021\003\000\002\010\005\000" +
    "\002\010\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\044\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\022\010\001\002\000\006\042\011\050\012\001" +
    "\002\000\004\022\151\001\002\000\004\022\013\001\002" +
    "\000\024\004\033\024\027\025\025\026\034\027\031\031" +
    "\030\045\032\046\023\051\014\001\002\000\004\040\136" +
    "\001\002\000\026\004\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\031\ufff0\043\ufff0\045\ufff0\046\ufff0\051\ufff0\001\002" +
    "\000\026\004\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031" +
    "\ufff3\043\ufff3\045\ufff3\046\ufff3\051\ufff3\001\002\000\026" +
    "\004\033\024\027\025\025\026\034\027\031\031\030\043" +
    "\133\045\032\046\023\051\014\001\002\000\026\004\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\031\ufff1\043\ufff1\045" +
    "\ufff1\046\ufff1\051\ufff1\001\002\000\026\004\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\031\uffed\043\uffed\045\uffed\046" +
    "\uffed\051\uffed\001\002\000\024\004\033\024\027\025\025" +
    "\026\034\027\031\031\030\045\032\046\023\051\014\001" +
    "\002\000\004\040\112\001\002\000\026\004\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\031\uffee\043\uffee\045\uffee\046" +
    "\uffee\051\uffee\001\002\000\006\004\107\005\106\001\002" +
    "\000\026\004\uffef\024\uffef\025\uffef\026\uffef\027\uffef\031" +
    "\uffef\043\uffef\045\uffef\046\uffef\051\uffef\001\002\000\004" +
    "\041\105\001\002\000\004\040\063\001\002\000\004\030" +
    "\061\001\002\000\004\004\057\001\002\000\004\020\037" +
    "\001\002\000\004\010\035\001\002\000\004\041\036\001" +
    "\002\000\026\004\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\031\uffea\043\uffea\045\uffea\046\uffea\051\uffea\001\002\000" +
    "\016\004\044\005\040\006\042\007\045\010\041\041\uffdf" +
    "\001\002\000\012\032\uffd8\035\uffd8\036\uffd8\041\uffd8\001" +
    "\002\000\012\032\uffd5\035\uffd5\036\uffd5\041\uffd5\001\002" +
    "\000\012\032\uffd7\035\uffd7\036\uffd7\041\uffd7\001\002\000" +
    "\012\032\055\035\uffda\036\uffda\041\uffda\001\002\000\012" +
    "\032\uffd9\035\uffd9\036\uffd9\041\uffd9\001\002\000\012\032" +
    "\uffd6\035\uffd6\036\uffd6\041\uffd6\001\002\000\004\041\054" +
    "\001\002\000\010\035\051\036\050\041\uffdc\001\002\000" +
    "\016\004\044\005\040\006\042\007\045\010\041\041\uffdf" +
    "\001\002\000\016\004\044\005\040\006\042\007\045\010" +
    "\041\041\uffdf\001\002\000\004\041\uffde\001\002\000\004" +
    "\041\uffdd\001\002\000\024\004\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\031\uffe0\045\uffe0\046\uffe0\051\uffe0\001\002" +
    "\000\014\004\044\005\040\006\042\007\045\010\041\001" +
    "\002\000\010\035\uffdb\036\uffdb\041\uffdb\001\002\000\004" +
    "\041\060\001\002\000\026\004\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\031\uffec\043\uffec\045\uffec\046\uffec\051\uffec" +
    "\001\002\000\004\041\062\001\002\000\026\004\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\043\uffe7\045\uffe7" +
    "\046\uffe7\051\uffe7\001\002\000\004\005\064\001\002\000" +
    "\004\021\065\001\002\000\004\005\066\001\002\000\006" +
    "\021\067\037\070\001\002\000\004\005\072\001\002\000" +
    "\004\041\071\001\002\000\026\004\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\031\uffe6\043\uffe6\045\uffe6\046\uffe6\051" +
    "\uffe6\001\002\000\004\021\073\001\002\000\004\005\074" +
    "\001\002\000\006\021\075\037\076\001\002\000\004\005" +
    "\100\001\002\000\004\041\077\001\002\000\026\004\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\043\uffe5\045" +
    "\uffe5\046\uffe5\051\uffe5\001\002\000\004\021\101\001\002" +
    "\000\004\005\102\001\002\000\004\037\103\001\002\000" +
    "\004\041\104\001\002\000\026\004\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\031\uffe4\043\uffe4\045\uffe4\046\uffe4\051" +
    "\uffe4\001\002\000\026\004\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\031\uffeb\043\uffeb\045\uffeb\046\uffeb\051\uffeb\001" +
    "\002\000\004\041\111\001\002\000\004\041\110\001\002" +
    "\000\026\004\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031" +
    "\uffe9\043\uffe9\045\uffe9\046\uffe9\051\uffe9\001\002\000\026" +
    "\004\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\043" +
    "\uffe8\045\uffe8\046\uffe8\051\uffe8\001\002\000\012\004\117" +
    "\005\113\016\115\017\121\001\002\000\010\033\uffcf\034" +
    "\uffcf\037\uffcf\001\002\000\006\033\uffd3\037\uffd3\001\002" +
    "\000\010\033\uffcd\034\uffcd\037\uffcd\001\002\000\006\033" +
    "\124\037\125\001\002\000\010\033\uffd0\034\uffd0\037\uffd0" +
    "\001\002\000\010\033\uffd1\034\122\037\uffd1\001\002\000" +
    "\010\033\uffce\034\uffce\037\uffce\001\002\000\012\004\117" +
    "\005\113\016\115\017\121\001\002\000\006\033\uffd2\037" +
    "\uffd2\001\002\000\012\004\117\005\113\016\115\017\121" +
    "\001\002\000\004\022\126\001\002\000\024\004\033\024" +
    "\027\025\025\026\034\027\031\031\030\045\032\046\023" +
    "\051\014\001\002\000\004\043\130\001\002\000\026\004" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3\043\uffe3" +
    "\045\uffe3\046\uffe3\051\uffe3\001\002\000\006\033\uffd4\037" +
    "\uffd4\001\002\000\026\004\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\031\ufff2\043\ufff2\045\ufff2\046\ufff2\051\ufff2\001" +
    "\002\000\004\043\135\001\002\000\026\004\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\031\ufff4\043\ufff4\045\ufff4\046" +
    "\ufff4\051\ufff4\001\002\000\004\002\uffff\001\002\000\012" +
    "\004\117\005\113\016\115\017\121\001\002\000\006\033" +
    "\124\037\140\001\002\000\004\022\141\001\002\000\024" +
    "\004\033\024\027\025\025\026\034\027\031\031\030\045" +
    "\032\046\023\051\014\001\002\000\006\043\144\051\143" +
    "\001\002\000\004\047\145\001\002\000\026\004\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\043\uffe2\045\uffe2" +
    "\046\uffe2\051\uffe2\001\002\000\004\022\146\001\002\000" +
    "\024\004\033\024\027\025\025\026\034\027\031\031\030" +
    "\045\032\046\023\051\014\001\002\000\004\043\150\001" +
    "\002\000\026\004\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\031\uffe1\043\uffe1\045\uffe1\046\uffe1\051\uffe1\001\002\000" +
    "\014\011\153\012\157\013\152\014\155\015\154\001\002" +
    "\000\004\004\216\001\002\000\004\004\210\001\002\000" +
    "\004\004\200\001\002\000\004\004\174\001\002\000\016" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\043\ufffd\001" +
    "\002\000\004\004\170\001\002\000\016\011\153\012\157" +
    "\013\152\014\155\015\154\043\162\001\002\000\016\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\043\ufffe\001\002" +
    "\000\004\050\163\001\002\000\004\022\164\001\002\000" +
    "\024\004\033\024\027\025\025\026\034\027\031\031\030" +
    "\045\032\046\023\051\014\001\002\000\026\004\033\024" +
    "\027\025\025\026\034\027\031\031\030\043\166\045\032" +
    "\046\023\051\014\001\002\000\004\043\167\001\002\000" +
    "\004\002\000\001\002\000\004\020\171\001\002\000\004" +
    "\010\172\001\002\000\004\041\173\001\002\000\016\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\043\ufffa\001\002" +
    "\000\004\020\175\001\002\000\004\005\176\001\002\000" +
    "\004\041\177\001\002\000\016\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\043\ufff5\001\002\000\004\020\201\001" +
    "\002\000\010\005\202\006\203\007\204\001\002\000\004" +
    "\041\207\001\002\000\004\041\206\001\002\000\004\041" +
    "\205\001\002\000\016\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\043\ufff6\001\002\000\016\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\043\ufff7\001\002\000\016\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\043\ufff8\001\002\000" +
    "\004\020\211\001\002\000\006\016\212\017\213\001\002" +
    "\000\004\041\215\001\002\000\004\041\214\001\002\000" +
    "\016\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\043\ufffc" +
    "\001\002\000\016\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\043\ufffb\001\002\000\004\020\217\001\002\000\004" +
    "\005\220\001\002\000\004\041\221\001\002\000\016\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\043\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\004\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\021\012\025\013\020\014\023\015\015\016\017\017\014" +
    "\020\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\021\012\025\013\020\014\023" +
    "\015\133\016\017\017\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\021\012\025\013\020\014\023" +
    "\015\131\016\017\017\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\045\011\042\023\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\052\011\042" +
    "\023\046\001\001\000\010\007\051\011\042\023\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\113\021\115\024\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\122\001\001\000\002\001\001\000\006\010" +
    "\130\024\117\001\001\000\002\001\001\000\020\002\021" +
    "\012\025\013\020\014\023\015\126\016\017\017\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\113\021\136\024\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\021\012" +
    "\025\013\020\014\023\015\141\016\017\017\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\021\012\025\013\020\014\023" +
    "\015\146\016\017\017\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\155\006\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\021\012\025\013\020\014\023\015\015" +
    "\016\017\017\014\020\164\001\001\000\020\002\021\012" +
    "\025\013\020\014\023\015\133\016\017\017\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   /* private Lexer lexer;
    private File file;
    public Sintax( File file ) {
        this();
        this.file = file;
        try {
            lexer = new Lexer( new FileReader( file ) );
        }
        catch ( IOException exception ) {
            throw new Error( "Unable to open file \"" + file + "\"" );
        }
    }

    public Lexer getLexer(){
        return this.lexer;
    }
*/

    static TablaSimbolos tablaSimbolos = new TablaSimbolos();
    static int verificarTipo = 0;
    static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
		new Sintax(new LexerCup(System.in)).parse();
	}
	/*public void syntax_error(Symbol s){
		report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}*/
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


        Hashtable table = new Hashtable();
    
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termino_bool ::= RESERVADA_VERDADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino_bool",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termino_bool ::= RESERVADA_FALSO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino_bool",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termino_bool ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino_bool",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termino_bool ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino_bool",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp_bol ::= termino_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_bol",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_bol ::= termino_bool OP_RELACIONAL termino_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_bol",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_booleana ::= exp_bol 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_booleana ::= expresion_booleana OP_LOGICO exp_bol 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= CADENA_TEXTO 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ct = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= NUMERO_EXPONENTE 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double ne = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;
		int dmlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dmlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double dml = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // termino ::= factor OP_ARITMETICO2 factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= termino OP_MENOS expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= termino OP_MAS expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignacion ::= IDENTIFICADOR ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // si_no ::= RESERVADA_SI PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS sentencia RESERVADA_SI RESERVADA_NO DOS_PUNTOS sentencia RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("si_no",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // si ::= RESERVADA_SI PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS sentencia RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("si",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mientras ::= RESERVADA_MIENTRAS PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS sentencia RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mientras",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reservada_esp ::= ESPECIALES_RUTA PARENTESIS_IZQ NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // reservada_esp ::= ESPECIALES_RUTA PARENTESIS_IZQ NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // reservada_esp ::= ESPECIALES_RUTA PARENTESIS_IZQ NUMERO COMA NUMERO PARENTESIS_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // reservada_esp ::= ESPECIALES_DOS ESPECIALES_PARAMETRO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // reservada_esp ::= ESPECIALES_ID NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // reservada_esp ::= ESPECIALES_ID IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // reservada_esp ::= ESPECIALES_CT CADENA_TEXTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // reservada_esp ::= ESPECIALES_SOLAS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // llamar_funcion ::= RESERVADA_LLAMAR IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamar_funcion",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= llamar_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= reservada_esp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= mientras 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= si_no 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= asignacion sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parte_principal ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parte_principal ::= parte_principal sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= RESERVADA_ENTERO IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, valor);

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= RESERVADA_DECIMAL IDENTIFICADOR ASIGNACION NUMERO_EXPONENTE PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= RESERVADA_DECIMAL IDENTIFICADOR ASIGNACION NUMERO_DECIMAL PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= RESERVADA_DECIMAL IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= RESERVADA_CORTO IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= RESERVADA_CADENA IDENTIFICADOR ASIGNACION CADENA_TEXTO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= RESERVADA_BOOLEANO IDENTIFICADOR ASIGNACION RESERVADA_VERDADERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            if(String.valueOf(valor).equals("verdadero")){
                TablaSimbolos.crear(nombre, tipo);
                TablaSimbolos.insertar(nombre, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(nombre);
                System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............"); 
            }
            else{                
                System.out.println("Cathc: Valor incompatible con variable 'booleana', linea:"+tipoleft);
                TablaSimbolos.logErrores("Valor incompatible con variable 'booleana', linea:"+tipoleft);
            }

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= RESERVADA_BOOLEANO IDENTIFICADOR ASIGNACION RESERVADA_FALSO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
       try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));
            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
       
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parte_declaracion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_declaracion",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parte_declaracion ::= parte_declaracion declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_declaracion",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS RESERVADA_PRINCIPAL DOS_PUNTOS parte_principal RESERVADA_FIN RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS RESERVADA_DECLARACION DOS_PUNTOS parte_declaracion RESERVADA_FIN RESERVADA_PRINCIPAL DOS_PUNTOS parte_principal RESERVADA_FIN RESERVADA_FIN 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

