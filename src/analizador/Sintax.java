
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 19 17:23:41 MDT 2021
//----------------------------------------------------

package analizador;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 19 17:23:41 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\003\016\000\002\003" +
    "\012\000\002\005\004\000\002\005\003\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\011\003\000\002\010\011\000\002\002" +
    "\006\000\002\006\005\000\002\006\003\000\002\013\005" +
    "\000\002\013\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\012\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\033\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\006\027\011\035\012\001" +
    "\002\000\004\006\057\001\002\000\004\006\013\001\002" +
    "\000\004\036\014\001\002\000\004\021\021\001\002\000" +
    "\004\031\ufff4\001\002\000\004\031\017\001\002\000\004" +
    "\031\020\001\002\000\004\002\uffff\001\002\000\010\010" +
    "\025\011\022\016\023\001\002\000\004\017\054\001\002" +
    "\000\004\020\uffe9\001\002\000\004\020\032\001\002\000" +
    "\004\017\026\001\002\000\010\010\031\011\027\016\030" +
    "\001\002\000\004\020\uffe6\001\002\000\004\020\uffe8\001" +
    "\002\000\004\020\uffe7\001\002\000\004\006\033\001\002" +
    "\000\004\010\034\001\002\000\004\004\037\001\002\000" +
    "\004\031\036\001\002\000\004\031\ufff3\001\002\000\012" +
    "\010\043\011\040\012\041\013\044\001\002\000\010\014" +
    "\uffec\015\uffec\022\uffec\001\002\000\010\014\uffeb\015\uffeb" +
    "\022\uffeb\001\002\000\010\014\uffee\015\052\022\uffee\001" +
    "\002\000\010\014\uffed\015\uffed\022\uffed\001\002\000\010" +
    "\014\uffea\015\uffea\022\uffea\001\002\000\006\014\050\022" +
    "\047\001\002\000\006\014\ufff0\022\ufff0\001\002\000\004" +
    "\031\ufff2\001\002\000\012\010\043\011\040\012\041\013" +
    "\044\001\002\000\006\014\ufff1\022\ufff1\001\002\000\012" +
    "\010\043\011\040\012\041\013\044\001\002\000\006\014" +
    "\uffef\022\uffef\001\002\000\006\010\056\011\055\001\002" +
    "\000\004\020\uffe4\001\002\000\004\020\uffe5\001\002\000" +
    "\014\023\061\024\065\025\060\026\062\030\063\001\002" +
    "\000\004\010\124\001\002\000\004\010\116\001\002\000" +
    "\004\010\106\001\002\000\004\010\102\001\002\000\016" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd\031\ufffd\001" +
    "\002\000\004\010\076\001\002\000\016\023\061\024\065" +
    "\025\060\026\062\030\063\031\070\001\002\000\016\023" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe\031\ufffe\001\002" +
    "\000\004\035\071\001\002\000\004\006\072\001\002\000" +
    "\004\036\014\001\002\000\004\031\074\001\002\000\004" +
    "\031\075\001\002\000\004\002\000\001\002\000\004\004" +
    "\077\001\002\000\004\005\100\001\002\000\004\022\101" +
    "\001\002\000\016\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030" +
    "\ufffa\031\ufffa\001\002\000\004\004\103\001\002\000\004" +
    "\011\104\001\002\000\004\022\105\001\002\000\016\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5\031\ufff5\001\002" +
    "\000\004\004\107\001\002\000\010\011\110\012\111\013" +
    "\112\001\002\000\004\022\115\001\002\000\004\022\114" +
    "\001\002\000\004\022\113\001\002\000\016\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\030\ufff6\031\ufff6\001\002\000\016" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7\031\ufff7\001" +
    "\002\000\016\023\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8" +
    "\031\ufff8\001\002\000\004\004\117\001\002\000\006\032" +
    "\121\037\120\001\002\000\004\022\123\001\002\000\004" +
    "\022\122\001\002\000\016\023\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\030\ufffc\031\ufffc\001\002\000\016\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\030\ufffb\031\ufffb\001\002\000\004\004" +
    "\125\001\002\000\004\011\126\001\002\000\004\022\127" +
    "\001\002\000\016\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030" +
    "\ufff9\031\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\014\011\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\044\007\041" +
    "\013\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\041\013\050\001\001\000\002\001\001\000\004\007\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\063\005\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\014\011\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   /* private Lexer lexer;
    private File file;
    public Sintax( File file ) {
        this();
        this.file = file;
        try {
            lexer = new Lexer( new FileReader( file ) );
        }
        catch ( IOException exception ) {
            throw new Error( "Unable to open file \"" + file + "\"" );
        }
    }

    public Lexer getLexer(){
        return this.lexer;
    }
*/
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


        Hashtable table = new Hashtable();
    
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_booleana ::= NUMERO OP_RELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_booleana ::= NUMERO OP_RELACIONAL IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_booleana ::= IDENTIFICADOR OP_RELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_booleana ::= IDENTIFICADOR OP_RELACIONAL IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_booleana ::= IDENTIFICADOR OP_RELACIONAL OP_LOGICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_booleana ::= OP_LOGICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= NUMERO_EXPONENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // termino ::= factor OP_ARITMETICO2 factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= expresion OP_ARITMETICO1 termino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= IDENTIFICADOR ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // si ::= RESERVADA_SI PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS asignacion RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("si",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parte_principal ::= si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= RESERVADA_ENTERO IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= RESERVADA_DECIMAL IDENTIFICADOR ASIGNACION NUMERO_EXPONENTE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= RESERVADA_DECIMAL IDENTIFICADOR ASIGNACION NUMERO_DECIMAL PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= RESERVADA_DECIMAL IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= RESERVADA_CORTO IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= RESERVADA_CADENA IDENTIFICADOR ASIGNACION CADENA_TEXTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= RESERVADA_BOOLEANO IDENTIFICADOR ASIGNACION RESERVADA_VERDADERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= RESERVADA_BOOLEANO IDENTIFICADOR ASIGNACION RESERVADA_FALSO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parte_declaracion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parte_declaracion ::= parte_declaracion declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS RESERVADA_PRINCIPAL DOS_PUNTOS parte_principal RESERVADA_FIN RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS RESERVADA_DECLARACION DOS_PUNTOS parte_declaracion RESERVADA_FIN RESERVADA_PRINCIPAL DOS_PUNTOS parte_principal RESERVADA_FIN RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

