package analizador;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;

action code
    {:
        Hashtable table = new Hashtable();
    :};
parser code
{:
   /* private Lexer lexer;
    private File file;
    public Sintax( File file ) {
        this();
        this.file = file;
        try {
            lexer = new Lexer( new FileReader( file ) );
        }
        catch ( IOException exception ) {
            throw new Error( "Unable to open file \"" + file + "\"" );
        }
    }

    public Lexer getLexer(){
        return this.lexer;
    }
*/

        static TablaSimbolos tablaSimbolos = new TablaSimbolos();
        static int verificarTipo = 0;
        static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
		new Sintax(new LexerCup(System.in)).parse();
	}
	/*public void syntax_error(Symbol s){
		report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}*/
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }   
:};
   
terminal String IDENTIFICADOR;
terminal Integer NUMERO;
terminal Double NUMERO_DECIMAL, NUMERO_EXPONENTE;
terminal String CADENA_TEXTO;
terminal String RESERVADA_BOOLEANO,RESERVADA_CADENA,RESERVADA_CORTO, RESERVADA_ENTERO, RESERVADA_DECIMAL;
terminal Boolean RESERVADA_VERDADERO,RESERVADA_FALSO;
terminal ASIGNACION,
        DOS_PUNTOS, 
        ERROR,          
        OP_ARITMETICO1,
        OP_ARITMETICO2,
        OP_LOGICO,
        OP_RELACIONAL,
        PARENTESIS_DER,
        PARENTESIS_IZQ,
        PUNTO_COMA,          
        RESERVADA_DECLARACION,                         
        RESERVADA_FIN,                  
        RESERVADA_INICIAR,    
        RESERVADA_MIENTRAS,
        RESERVADA_PRINCIPAL,
        RESERVADA_SI;   
/* 

*/

non terminal asignacion, inicio, declaracion ,parte_declaracion,  
    expresion, factor,  mientras, sentencia, si, 
   parte_principal,expresion_booleana,  termino;
    /*declaracion, declaracion_para,sentencia_para, mientras, haz, para,si_no */
start with inicio;

inicio ::= 
    RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS 
        RESERVADA_DECLARACION DOS_PUNTOS 
            parte_declaracion 
        RESERVADA_FIN
        RESERVADA_PRINCIPAL DOS_PUNTOS 
            parte_principal
        RESERVADA_FIN
    RESERVADA_FIN |
    RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS 
        RESERVADA_DECLARACION DOS_PUNTOS 
            parte_declaracion 
        RESERVADA_FIN
    RESERVADA_FIN |
    RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS 
        RESERVADA_PRINCIPAL DOS_PUNTOS 
            parte_principal
        RESERVADA_FIN
    RESERVADA_FIN
;

parte_declaracion ::=
    parte_declaracion declaracion |
    declaracion 
;
declaracion ::=
    RESERVADA_BOOLEANO:tipo IDENTIFICADOR:nombre ASIGNACION RESERVADA_FALSO:valor PUNTO_COMA:coma 
   /* {:
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}*/
    |
    RESERVADA_BOOLEANO:tipo IDENTIFICADOR:nombre ASIGNACION RESERVADA_VERDADERO:valor PUNTO_COMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :} 
    | 
    RESERVADA_CADENA:tipo   IDENTIFICADOR:nombre ASIGNACION CADENA_TEXTO:valor        PUNTO_COMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_CORTO:tipo    IDENTIFICADOR:nombre ASIGNACION NUMERO:valor              PUNTO_COMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_DECIMAL:tipo  IDENTIFICADOR:nombre ASIGNACION NUMERO:valor              PUNTO_COMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_DECIMAL:tipo  IDENTIFICADOR:nombre ASIGNACION NUMERO_DECIMAL:valor      PUNTO_COMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_DECIMAL:tipo  IDENTIFICADOR:nombre ASIGNACION NUMERO_EXPONENTE:valor    PUNTO_COMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_ENTERO:tipo   IDENTIFICADOR:nombre ASIGNACION NUMERO:valor              PUNTO_COMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo);
            TablaSimbolos.insertar(nombre, valor);

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);
            System.out.println("............ Agregando a la pila el siguiente id: " + nombre + " ............");            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    
;

sentencia ::=
    sentencia si |
    si |
    sentencia mientras |
    mientras
    sentencia asignacion |
    asignacion
;
mientras ::=
    RESERVADA_MIENTRAS PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS 
        asignacion
    RESERVADA_FIN
;
    
si ::=    
    RESERVADA_SI PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS 
        asignacion
    RESERVADA_FIN
;

asignacion ::=
     IDENTIFICADOR ASIGNACION expresion PUNTO_COMA
;
expresion ::=
    expresion OP_ARITMETICO1 termino | 
    termino
;

termino ::=
    factor OP_ARITMETICO2 factor | 
    factor
;

factor ::=
    //expresion IDENTIFICADOR|
    IDENTIFICADOR |
    NUMERO |
    NUMERO_DECIMAL |
    NUMERO_EXPONENTE 
;
/*
*/
expresion_booleana ::=
    //expresion_booleana OP_LOGICO expresion_booleana |
    IDENTIFICADOR OP_RELACIONAL OP_LOGICO |
    IDENTIFICADOR OP_RELACIONAL IDENTIFICADOR |
    IDENTIFICADOR OP_RELACIONAL NUMERO |
    NUMERO OP_RELACIONAL IDENTIFICADOR |
    NUMERO OP_RELACIONAL NUMERO 
;

