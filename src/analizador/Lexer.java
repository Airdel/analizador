/* The following code was generated by JFlex 1.4.3 on 24/05/21 16:10 */

package analizador;
import java.io.*;
import static analizador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/05/21 16:10 from the specification file
 * <tt>C:/analizador/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\12\2\0\1\11\22\0\1\11\4\0\1\20\1\16"+
    "\1\0\1\22\1\23\1\14\1\2\1\27\1\3\1\7\1\15\12\1"+
    "\1\26\1\21\1\25\1\13\1\24\1\0\1\30\32\5\4\0\1\6"+
    "\1\0\1\36\1\46\1\35\1\37\1\10\1\41\1\51\1\52\1\40"+
    "\1\50\1\4\1\47\1\44\1\31\1\34\1\45\1\54\1\33\1\43"+
    "\1\32\1\42\1\55\3\4\1\53\1\0\1\17\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\17\5"+
    "\1\0\1\1\1\2\1\0\1\6\1\5\1\25\1\26"+
    "\1\0\3\5\1\27\1\30\1\31\1\32\25\5\1\33"+
    "\13\5\2\26\2\6\1\5\1\26\34\5\1\34\6\5"+
    "\1\35\4\5\1\36\2\5\1\6\1\0\1\5\1\26"+
    "\4\5\1\37\2\5\1\40\27\5\1\41\4\5\1\42"+
    "\1\5\1\43\4\5\1\6\1\0\1\5\1\26\6\5"+
    "\1\44\5\5\1\45\1\46\5\5\1\47\10\5\1\50"+
    "\4\5\1\51\1\5\1\52\1\53\1\5\1\54\1\0"+
    "\1\5\1\26\1\55\6\5\1\56\1\57\3\5\1\60"+
    "\2\5\1\61\11\5\1\62\4\5\1\63\1\5\1\26"+
    "\1\5\1\64\1\5\1\65\1\66\1\5\1\67\1\5"+
    "\1\70\2\5\1\71\1\72\1\73\2\5\1\74\2\5"+
    "\1\75\4\5\1\63\1\5\1\26\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\2\5\1\104\1\5\1\105\1\5"+
    "\1\106\1\5\1\63\1\5\1\26\2\5\1\107\1\110"+
    "\1\111\1\5\1\26\3\5\1\26\1\112\1\113\1\5"+
    "\1\26\1\5\1\26\1\5\1\26\1\5\1\26\1\5"+
    "\1\26\1\5\1\26\1\5\1\26\1\5\1\26\1\5"+
    "\1\26\1\5\1\26\1\5\1\26\1\5\1\26\1\5"+
    "\1\26\1\5\1\26\1\5\1\26\1\5\1\26\1\5"+
    "\1\26\1\5\1\26\1\5\1\26\1\5\1\26\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\56\0\u019e\0\56\0\56\0\56\0\56\0\56"+
    "\0\56\0\56\0\56\0\u01cc\0\u01fa\0\56\0\56\0\56"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u0142"+
    "\0\u04da\0\212\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee"+
    "\0\u061c\0\u064a\0\u0678\0\56\0\56\0\56\0\u0564\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0564\0\u0a6c\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u05ee\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a"+
    "\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea"+
    "\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a"+
    "\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca"+
    "\0\u11f8\0\u1226\0\u0cf0\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c"+
    "\0\u133a\0\u0cf0\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u0cf0\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590"+
    "\0\u15be\0\u14d8\0\u15ec\0\u161a\0\u14d8\0\u1648\0\u1676\0\u16a4"+
    "\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814"+
    "\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984"+
    "\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u14d8\0\u1a6a\0\u1a98\0\u1ac6"+
    "\0\u1af4\0\u1b22\0\u1b50\0\u14d8\0\u1b7e\0\u1bac\0\u1bda\0\u1c08"+
    "\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78"+
    "\0\u1da6\0\u1dd4\0\u1c92\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba"+
    "\0\u1c92\0\u1c92\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1c92"+
    "\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110"+
    "\0\u1c92\0\u213e\0\u216c\0\u219a\0\u21c8\0\u1c92\0\u21f6\0\u1c92"+
    "\0\u1c92\0\u2224\0\u1c92\0\u2252\0\u2280\0\u22ae\0\u2280\0\u22dc"+
    "\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2\0\u2280\0\u2280\0\u23f0"+
    "\0\u241e\0\u244c\0\u2280\0\u247a\0\u24a8\0\u2280\0\u24d6\0\u2504"+
    "\0\u2532\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2280"+
    "\0\u2674\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6"+
    "\0\u275a\0\u27e4\0\u275a\0\u275a\0\u2812\0\u275a\0\u2840\0\u275a"+
    "\0\u286e\0\u289c\0\u275a\0\u275a\0\u275a\0\u28ca\0\u28f8\0\u275a"+
    "\0\u2926\0\u2954\0\u275a\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a"+
    "\0\u2a68\0\u2a96\0\u2a68\0\u2a68\0\u2a68\0\u2a68\0\u2a68\0\u2a68"+
    "\0\u2ac4\0\u2af2\0\u2a68\0\u2b20\0\u2a68\0\u2b4e\0\u2a68\0\u2b7c"+
    "\0\56\0\u2baa\0\u2bd8\0\u2c06\0\u2c34\0\u2baa\0\u2baa\0\u2baa"+
    "\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d1a\0\u2d1a"+
    "\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8"+
    "\0\u2ee6\0\u2f14\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028"+
    "\0\u3056\0\u3084\0\u30b2\0\u30e0\0\u310e\0\u313c\0\u316a\0\u3198"+
    "\0\u31c6\0\u31f4\0\u3222\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308"+
    "\0\u3336\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u3478"+
    "\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\2\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\6\1\32\1\6\1\33\1\34\1\35\1\36\1\37"+
    "\1\6\1\40\1\41\1\42\1\43\1\44\1\6\1\45"+
    "\1\46\2\6\1\47\57\0\1\3\2\0\3\7\1\50"+
    "\1\51\20\0\25\7\1\0\1\52\5\0\1\50\1\53"+
    "\46\0\1\52\1\0\1\54\3\0\1\50\1\53\46\0"+
    "\1\55\2\0\1\55\1\7\1\55\1\0\1\55\20\0"+
    "\25\55\1\0\1\7\2\0\3\7\1\0\1\7\20\0"+
    "\25\7\1\0\1\56\55\0\1\57\2\60\1\55\1\7"+
    "\1\55\1\0\1\55\20\0\1\61\11\55\1\62\4\55"+
    "\1\63\5\55\13\0\1\64\55\0\1\65\55\0\1\66"+
    "\43\0\1\55\2\0\1\55\1\7\1\55\1\0\1\55"+
    "\20\0\3\55\1\67\5\55\1\70\13\55\1\0\1\55"+
    "\2\0\1\55\1\7\1\55\1\0\1\71\20\0\11\55"+
    "\1\72\13\55\1\0\1\55\2\0\1\55\1\7\1\55"+
    "\1\0\1\55\20\0\3\55\1\73\1\55\1\74\1\55"+
    "\1\75\15\55\1\0\1\55\2\0\1\55\1\7\1\55"+
    "\1\0\1\55\20\0\1\55\1\76\1\77\1\55\1\100"+
    "\1\55\1\101\5\55\1\102\1\103\7\55\1\0\1\55"+
    "\2\0\1\55\1\7\1\55\1\0\1\104\20\0\7\55"+
    "\1\105\15\55\1\0\1\55\2\0\1\55\1\7\1\55"+
    "\1\0\1\55\20\0\1\106\12\55\1\107\6\55\1\110"+
    "\2\55\1\0\1\55\2\0\1\55\1\7\1\55\1\0"+
    "\1\55\20\0\5\55\1\111\1\55\1\112\1\55\1\113"+
    "\13\55\1\0\1\55\2\0\1\55\1\7\1\55\1\0"+
    "\1\114\20\0\7\55\1\115\15\55\1\0\1\55\2\0"+
    "\1\55\1\7\1\55\1\0\1\55\20\0\7\55\1\116"+
    "\15\55\1\0\1\55\2\0\1\55\1\7\1\55\1\0"+
    "\1\55\20\0\2\55\1\117\2\55\1\120\1\55\1\121"+
    "\15\55\1\0\1\55\2\0\1\55\1\7\1\55\1\0"+
    "\1\55\20\0\3\55\1\122\21\55\1\0\1\55\2\0"+
    "\1\55\1\7\1\55\1\0\1\123\20\0\5\55\1\124"+
    "\17\55\1\0\1\55\2\0\1\55\1\7\1\55\1\0"+
    "\1\55\20\0\7\55\1\125\15\55\1\0\1\55\2\0"+
    "\1\55\1\7\1\55\1\0\1\55\20\0\5\55\1\126"+
    "\17\55\1\0\1\55\2\0\1\55\1\7\1\55\1\0"+
    "\1\127\20\0\7\55\1\130\15\55\1\0\1\131\2\60"+
    "\3\7\1\0\1\7\20\0\25\7\1\0\1\132\2\60"+
    "\52\0\3\133\1\134\6\133\1\0\43\133\1\0\1\135"+
    "\2\0\1\135\1\7\1\135\1\0\1\135\20\0\25\135"+
    "\1\0\1\56\6\0\1\53\46\0\1\136\2\0\1\135"+
    "\1\7\1\135\1\0\1\135\20\0\25\135\1\0\1\132"+
    "\55\0\1\135\2\0\1\135\1\7\1\135\1\0\1\135"+
    "\20\0\1\135\1\137\2\135\1\140\20\135\1\0\1\135"+
    "\2\0\1\135\1\7\1\135\1\0\1\135\20\0\14\135"+
    "\1\141\10\135\1\0\1\135\2\0\1\135\1\7\1\135"+
    "\1\0\1\142\20\0\25\135\1\0\1\135\2\0\1\135"+
    "\1\7\1\135\1\0\1\135\20\0\16\135\1\143\6\135"+
    "\1\0\1\135\2\0\1\135\1\7\1\135\1\0\1\135"+
    "\20\0\1\135\1\144\16\135\1\145\4\135\1\0\1\135"+
    "\2\0\1\135\1\7\1\135\1\0\1\135\20\0\1\135"+
    "\1\146\23\135\1\0\1\135\2\0\1\135\1\7\1\135"+
    "\1\0\1\135\20\0\2\135\1\147\22\135\1\0\1\135"+
    "\2\0\1\135\1\7\1\135\1\0\1\135\20\0\2\135"+
    "\1\150\3\135\1\151\5\135\1\152\1\135\1\153\6\135"+
    "\1\0\1\135\2\0\1\135\1\7\1\135\1\0\1\135"+
    "\20\0\4\135\1\154\20\135\1\0\1\135\2\0\1\135"+
    "\1\7\1\135\1\0\1\135\20\0\2\135\1\155\22\135"+
    "\1\0\1\135\2\0\1\135\1\7\1\135\1\0\1\135"+
    "\20\0\2\135\1\156\22\135\1\0\1\135\2\0\1\135"+
    "\1\7\1\135\1\0\1\157\20\0\25\135\1\0\1\135"+
    "\2\0\1\135\1\7\1\135\1\0\1\160\20\0\25\135"+
    "\1\0\1\135\2\0\1\135\1\7\1\135\1\0\1\135"+
    "\20\0\5\135\1\161\17\135\1\0\1\135\2\0\1\135"+
    "\1\7\1\135\1\0\1\135\20\0\5\135\1\162\17\135"+
    "\1\0\1\135\2\0\1\135\1\7\1\135\1\0\1\135"+
    "\20\0\1\135\1\163\1\164\1\135\1\165\20\135\1\0"+
    "\1\135\2\0\1\135\1\7\1\135\1\0\1\135\20\0"+
    "\2\135\1\166\22\135\1\0\1\135\2\0\1\135\1\7"+
    "\1\135\1\0\1\135\20\0\7\135\1\167\15\135\1\0"+
    "\1\135\2\0\1\135\1\7\1\135\1\0\1\135\20\0"+
    "\14\135\1\170\10\135\1\0\1\135\2\0\1\135\1\7"+
    "\1\135\1\0\1\135\20\0\23\135\1\171\1\135\1\0"+
    "\1\135\2\0\1\135\1\7\1\135\1\0\1\135\20\0"+
    "\16\135\1\172\6\135\1\0\1\135\2\0\1\135\1\7"+
    "\1\135\1\0\1\135\20\0\1\173\16\135\1\174\5\135"+
    "\1\0\1\135\2\0\1\135\1\7\1\135\1\0\1\135"+
    "\20\0\1\175\24\135\1\0\1\135\2\0\1\135\1\7"+
    "\1\135\1\0\1\135\20\0\20\135\1\176\4\135\1\0"+
    "\1\135\2\0\1\135\1\7\1\135\1\0\1\177\20\0"+
    "\25\135\1\0\1\135\2\0\1\135\1\7\1\135\1\0"+
    "\1\135\20\0\7\135\1\200\15\135\1\0\1\135\2\0"+
    "\1\135\1\7\1\135\1\0\1\135\20\0\2\135\1\201"+
    "\22\135\1\0\1\135\2\0\1\135\1\7\1\135\1\0"+
    "\1\135\20\0\1\202\24\135\1\0\1\135\2\0\1\135"+
    "\1\7\1\135\1\0\1\135\20\0\3\135\1\203\21\135"+
    "\1\0\1\135\2\0\1\135\1\7\1\135\1\0\1\204"+
    "\20\0\25\135\1\0\1\135\2\0\1\135\1\7\1\135"+
    "\1\0\1\135\20\0\2\135\1\205\22\135\1\0\1\135"+
    "\2\0\1\135\1\7\1\135\1\0\1\135\20\0\2\135"+
    "\1\206\22\135\1\0\1\135\2\0\1\135\1\7\1\135"+
    "\1\0\1\135\20\0\22\135\1\207\2\135\1\0\1\135"+
    "\2\0\1\135\1\7\1\135\1\0\1\135\20\0\2\135"+
    "\1\210\22\135\1\0\1\135\2\0\1\135\1\7\1\135"+
    "\1\0\1\135\20\0\6\135\1\211\16\135\1\0\1\131"+
    "\2\0\3\7\1\0\1\7\20\0\25\7\12\133\1\0"+
    "\43\133\3\134\1\212\6\134\1\213\43\134\1\0\1\214"+
    "\2\0\1\214\1\7\1\214\1\0\1\214\20\0\25\214"+
    "\1\0\1\215\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\25\214\1\0\1\214\2\0\1\214\1\7\1\214"+
    "\1\0\1\216\20\0\25\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\217\20\0\25\214\1\0\1\214"+
    "\2\0\1\214\1\7\1\214\1\0\1\220\20\0\25\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\4\214\1\221\20\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\3\214\1\222\21\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\3\214\1\223\21\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\2\214\1\224\22\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\5\214\1\225\17\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\1\214\1\226\23\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\5\214\1\227\12\214\1\230\4\214\1\0\1\214"+
    "\2\0\1\214\1\7\1\214\1\0\1\231\20\0\25\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\1\214\1\232\23\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\7\214\1\233\15\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\16\214\1\234\6\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\5\214\1\235\17\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\236"+
    "\20\0\7\214\1\237\15\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\16\214\1\240\6\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\16\214\1\241\6\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\20\214\1\242\4\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\17\214\1\243\5\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\244\20\0\25\214\1\0\1\214"+
    "\2\0\1\214\1\7\1\214\1\0\1\245\20\0\25\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\7\214\1\246\6\214\1\247\6\214\1\0\1\214"+
    "\2\0\1\214\1\7\1\214\1\0\1\250\20\0\25\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\4\214\1\251\20\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\2\214\1\252\22\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\11\214\1\253\13\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\12\214\1\254\12\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\3\214\1\255\21\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\4\214\1\256\20\214"+
    "\1\0\1\214\2\0\1\214\1\7\1\214\1\0\1\214"+
    "\20\0\11\214\1\257\13\214\1\0\1\214\2\0\1\214"+
    "\1\7\1\214\1\0\1\214\20\0\1\260\24\214\1\0"+
    "\1\214\2\0\1\214\1\7\1\214\1\0\1\214\20\0"+
    "\1\261\24\214\1\0\1\214\2\0\1\214\1\7\1\214"+
    "\1\0\1\214\20\0\5\214\1\262\17\214\1\0\1\214"+
    "\2\0\1\214\1\7\1\214\1\0\1\214\20\0\16\214"+
    "\1\263\6\214\1\0\1\214\2\0\1\214\1\7\1\214"+
    "\1\0\1\214\20\0\2\214\1\264\22\214\1\0\1\214"+
    "\2\0\1\214\1\7\1\214\1\0\1\214\20\0\20\214"+
    "\1\265\4\214\1\0\1\214\2\0\1\214\1\7\1\214"+
    "\1\0\1\214\20\0\5\214\1\266\17\214\1\0\1\214"+
    "\2\0\1\214\1\7\1\214\1\0\1\214\20\0\6\214"+
    "\1\267\16\214\1\0\1\214\2\0\1\214\1\7\1\214"+
    "\1\0\1\270\20\0\25\214\3\134\1\271\6\134\1\213"+
    "\43\134\3\213\1\272\52\213\1\0\1\273\2\0\1\273"+
    "\1\7\1\273\1\0\1\273\20\0\25\273\1\0\1\274"+
    "\2\0\1\273\1\7\1\273\1\0\1\273\20\0\25\273"+
    "\1\0\1\273\2\0\1\273\1\7\1\273\1\0\1\273"+
    "\20\0\2\273\1\275\22\273\1\0\1\273\2\0\1\273"+
    "\1\7\1\273\1\0\1\273\20\0\1\276\24\273\1\0"+
    "\1\273\2\0\1\273\1\7\1\273\1\0\1\273\20\0"+
    "\2\273\1\277\22\273\1\0\1\273\2\0\1\273\1\7"+
    "\1\273\1\0\1\273\20\0\11\273\1\300\13\273\1\0"+
    "\1\273\2\0\1\273\1\7\1\273\1\0\1\273\20\0"+
    "\2\273\1\301\22\273\1\0\1\273\2\0\1\273\1\7"+
    "\1\273\1\0\1\302\20\0\25\273\1\0\1\273\2\0"+
    "\1\273\1\7\1\273\1\0\1\273\20\0\3\273\1\303"+
    "\21\273\1\0\1\273\2\0\1\273\1\7\1\273\1\0"+
    "\1\273\20\0\4\273\1\304\20\273\1\0\1\273\2\0"+
    "\1\273\1\7\1\273\1\0\1\273\20\0\5\273\1\305"+
    "\17\273\1\0\1\273\2\0\1\273\1\7\1\273\1\0"+
    "\1\273\20\0\1\306\24\273\1\0\1\273\2\0\1\273"+
    "\1\7\1\273\1\0\1\273\20\0\11\273\1\307\13\273"+
    "\1\0\1\273\2\0\1\273\1\7\1\273\1\0\1\273"+
    "\20\0\15\273\1\310\7\273\1\0\1\273\2\0\1\273"+
    "\1\7\1\273\1\0\1\273\20\0\3\273\1\311\21\273"+
    "\1\0\1\273\2\0\1\273\1\7\1\273\1\0\1\273"+
    "\20\0\12\273\1\312\12\273\1\0\1\273\2\0\1\273"+
    "\1\7\1\273\1\0\1\273\20\0\20\273\1\313\4\273"+
    "\1\0\1\273\2\0\1\273\1\7\1\273\1\0\1\273"+
    "\20\0\15\273\1\314\7\273\1\0\1\273\2\0\1\273"+
    "\1\7\1\273\1\0\1\315\20\0\25\273\1\0\1\273"+
    "\2\0\1\273\1\7\1\273\1\0\1\273\20\0\5\273"+
    "\1\316\17\273\1\0\1\273\2\0\1\273\1\7\1\273"+
    "\1\0\1\273\20\0\5\273\1\317\17\273\1\0\1\273"+
    "\2\0\1\273\1\7\1\273\1\0\1\273\20\0\3\273"+
    "\1\320\21\273\1\0\1\273\2\0\1\273\1\7\1\273"+
    "\1\0\1\273\20\0\1\321\24\273\1\0\1\273\2\0"+
    "\1\273\1\7\1\273\1\0\1\273\20\0\4\273\1\322"+
    "\20\273\1\0\1\273\2\0\1\273\1\7\1\273\1\0"+
    "\1\273\20\0\13\273\1\323\11\273\1\0\1\273\2\0"+
    "\1\273\1\7\1\273\1\0\1\273\20\0\5\273\1\324"+
    "\17\273\1\0\1\273\2\0\1\273\1\7\1\273\1\0"+
    "\1\273\20\0\4\273\1\325\20\273\1\0\1\273\2\0"+
    "\1\273\1\7\1\273\1\0\1\273\20\0\7\273\1\326"+
    "\15\273\1\0\1\273\2\0\1\273\1\7\1\273\1\0"+
    "\1\273\20\0\7\273\1\327\15\273\1\0\1\273\2\0"+
    "\1\273\1\7\1\273\1\0\1\273\20\0\7\273\1\330"+
    "\15\273\1\0\1\273\2\0\1\273\1\7\1\273\1\0"+
    "\1\273\20\0\3\273\1\331\21\273\1\0\1\273\2\0"+
    "\1\273\1\7\1\273\1\0\1\273\20\0\7\273\1\332"+
    "\15\273\1\0\1\273\2\0\1\273\1\7\1\273\1\0"+
    "\1\273\20\0\7\273\1\333\15\273\1\0\1\273\2\0"+
    "\1\273\1\7\1\273\1\0\1\273\20\0\1\273\1\334"+
    "\23\273\1\0\1\273\2\0\1\273\1\7\1\273\1\0"+
    "\1\273\20\0\4\273\1\335\20\273\1\0\1\273\2\0"+
    "\1\273\1\7\1\273\1\0\1\273\20\0\24\273\1\336"+
    "\1\0\1\273\2\0\1\273\1\7\1\273\1\0\1\337"+
    "\20\0\25\273\1\0\1\273\2\0\1\273\1\7\1\273"+
    "\1\0\1\273\20\0\3\273\1\340\21\273\1\0\1\273"+
    "\2\0\1\273\1\7\1\273\1\0\1\273\20\0\2\273"+
    "\1\341\22\273\1\0\1\273\2\0\1\273\1\7\1\273"+
    "\1\0\1\273\20\0\5\273\1\342\17\273\1\0\1\273"+
    "\2\0\1\273\1\7\1\273\1\0\1\273\20\0\3\273"+
    "\1\343\21\273\3\134\1\133\6\134\1\213\43\134\3\213"+
    "\1\344\52\213\1\0\1\345\2\0\1\345\1\7\1\345"+
    "\1\0\1\345\20\0\25\345\1\0\1\346\2\0\1\345"+
    "\1\7\1\345\1\0\1\345\20\0\25\345\1\0\1\345"+
    "\2\0\1\345\1\7\1\345\1\0\1\345\20\0\3\345"+
    "\1\347\21\345\1\0\1\345\2\0\1\345\1\7\1\345"+
    "\1\0\1\345\20\0\6\345\1\350\16\345\1\0\1\345"+
    "\2\0\1\345\1\7\1\345\1\0\1\345\20\0\5\345"+
    "\1\351\17\345\1\0\1\345\2\0\1\345\1\7\1\345"+
    "\1\0\1\345\20\0\1\345\1\352\23\345\1\0\1\345"+
    "\2\0\1\345\1\7\1\345\1\0\1\345\20\0\1\353"+
    "\24\345\1\0\1\345\2\0\1\345\1\7\1\345\1\0"+
    "\1\345\20\0\12\345\1\354\12\345\1\0\1\345\2\0"+
    "\1\345\1\7\1\345\1\0\1\345\20\0\1\345\1\355"+
    "\23\345\1\0\1\345\2\0\1\345\1\7\1\345\1\0"+
    "\1\345\20\0\2\345\1\356\22\345\1\0\1\345\2\0"+
    "\1\345\1\7\1\345\1\0\1\345\20\0\5\345\1\357"+
    "\17\345\1\0\1\345\2\0\1\345\1\7\1\345\1\0"+
    "\1\345\20\0\2\345\1\360\22\345\1\0\1\345\2\0"+
    "\1\345\1\7\1\345\1\0\1\345\20\0\2\345\1\361"+
    "\22\345\1\0\1\345\2\0\1\345\1\7\1\345\1\0"+
    "\1\345\20\0\16\345\1\362\6\345\1\0\1\345\2\0"+
    "\1\345\1\7\1\345\1\0\1\345\20\0\5\345\1\363"+
    "\17\345\1\0\1\345\2\0\1\345\1\7\1\345\1\0"+
    "\1\345\20\0\2\345\1\364\22\345\1\0\1\345\2\0"+
    "\1\345\1\7\1\345\1\0\1\345\20\0\1\365\24\345"+
    "\1\0\1\345\2\0\1\345\1\7\1\345\1\0\1\345"+
    "\20\0\2\345\1\366\22\345\1\0\1\345\2\0\1\345"+
    "\1\7\1\345\1\0\1\367\20\0\25\345\1\0\1\345"+
    "\2\0\1\345\1\7\1\345\1\0\1\345\20\0\21\345"+
    "\1\370\3\345\1\0\1\345\2\0\1\345\1\7\1\345"+
    "\1\0\1\345\20\0\5\345\1\371\17\345\1\0\1\345"+
    "\2\0\1\345\1\7\1\345\1\0\1\345\20\0\2\345"+
    "\1\372\22\345\1\0\1\345\2\0\1\345\1\7\1\345"+
    "\1\0\1\345\20\0\4\345\1\373\20\345\1\0\1\345"+
    "\2\0\1\345\1\7\1\345\1\0\1\345\20\0\5\345"+
    "\1\374\17\345\1\0\1\345\2\0\1\345\1\7\1\345"+
    "\1\0\1\345\20\0\13\345\1\375\11\345\1\0\1\345"+
    "\2\0\1\345\1\7\1\345\1\0\1\376\20\0\25\345"+
    "\1\0\1\345\2\0\1\345\1\7\1\345\1\0\1\345"+
    "\20\0\3\345\1\377\21\345\1\0\1\345\2\0\1\345"+
    "\1\7\1\345\1\0\1\345\20\0\2\345\1\u0100\22\345"+
    "\1\0\1\345\2\0\1\345\1\7\1\345\1\0\1\345"+
    "\20\0\2\345\1\u0101\22\345\1\0\1\345\2\0\1\345"+
    "\1\7\1\345\1\0\1\345\20\0\7\345\1\u0102\15\345"+
    "\1\0\1\345\2\0\1\345\1\7\1\345\1\0\1\345"+
    "\20\0\5\345\1\u0103\17\345\1\0\1\345\2\0\1\345"+
    "\1\7\1\345\1\0\1\345\20\0\6\345\1\u0104\16\345"+
    "\3\213\1\u0105\52\213\1\0\1\u0106\2\0\1\u0106\1\7"+
    "\1\u0106\1\0\1\u0106\20\0\25\u0106\1\0\1\u0107\2\0"+
    "\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0\25\u0106\1\0"+
    "\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0\1\u0108\20\0"+
    "\25\u0106\1\0\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0"+
    "\1\u0106\20\0\2\u0106\1\u0109\22\u0106\1\0\1\u0106\2\0"+
    "\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0\5\u0106\1\u010a"+
    "\17\u0106\1\0\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0"+
    "\1\u0106\20\0\3\u0106\1\u010b\21\u0106\1\0\1\u0106\2\0"+
    "\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0\5\u0106\1\u010c"+
    "\17\u0106\1\0\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0"+
    "\1\u010d\20\0\25\u0106\1\0\1\u0106\2\0\1\u0106\1\7"+
    "\1\u0106\1\0\1\u0106\20\0\5\u0106\1\u010e\17\u0106\1\0"+
    "\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0"+
    "\5\u0106\1\u010f\17\u0106\1\0\1\u0106\2\0\1\u0106\1\7"+
    "\1\u0106\1\0\1\u0106\20\0\3\u0106\1\u0110\21\u0106\1\0"+
    "\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0"+
    "\5\u0106\1\u0111\17\u0106\1\0\1\u0106\2\0\1\u0106\1\7"+
    "\1\u0106\1\0\1\u0106\20\0\1\u0106\1\u0112\23\u0106\1\0"+
    "\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0"+
    "\2\u0106\1\u0113\22\u0106\1\0\1\u0106\2\0\1\u0106\1\7"+
    "\1\u0106\1\0\1\u0106\20\0\5\u0106\1\u0114\17\u0106\1\0"+
    "\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0"+
    "\16\u0106\1\u0115\6\u0106\1\0\1\u0106\2\0\1\u0106\1\7"+
    "\1\u0106\1\0\1\u0106\20\0\5\u0106\1\u0116\17\u0106\1\0"+
    "\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0"+
    "\7\u0106\1\u0117\15\u0106\1\0\1\u0106\2\0\1\u0106\1\7"+
    "\1\u0106\1\0\1\u0106\20\0\2\u0106\1\u0118\22\u0106\1\0"+
    "\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0"+
    "\7\u0106\1\u0119\15\u0106\1\0\1\u0106\2\0\1\u0106\1\7"+
    "\1\u0106\1\0\1\u0106\20\0\2\u0106\1\u011a\22\u0106\1\0"+
    "\1\u0106\2\0\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0"+
    "\1\u011b\24\u0106\1\0\1\u0106\2\0\1\u0106\1\7\1\u0106"+
    "\1\0\1\u0106\20\0\5\u0106\1\u011c\17\u0106\1\0\1\u0106"+
    "\2\0\1\u0106\1\7\1\u0106\1\0\1\u0106\20\0\14\u0106"+
    "\1\u011d\10\u0106\1\0\1\u0106\2\0\1\u0106\1\7\1\u0106"+
    "\1\0\1\u0106\20\0\1\u011e\24\u0106\1\0\1\u0106\2\0"+
    "\1\u0106\1\7\1\u0106\1\0\1\u011f\20\0\25\u0106\3\0"+
    "\1\u0120\53\0\1\u0121\2\0\1\u0121\1\7\1\u0121\1\0"+
    "\1\u0121\20\0\25\u0121\1\0\1\u0122\2\0\1\u0121\1\7"+
    "\1\u0121\1\0\1\u0121\20\0\25\u0121\1\0\1\u0121\2\0"+
    "\1\u0121\1\7\1\u0121\1\0\1\u0121\20\0\2\u0121\1\u0123"+
    "\22\u0121\1\0\1\u0121\2\0\1\u0121\1\7\1\u0121\1\0"+
    "\1\u0121\20\0\2\u0121\1\u0124\22\u0121\1\0\1\u0121\2\0"+
    "\1\u0121\1\7\1\u0121\1\0\1\u0121\20\0\2\u0121\1\u0125"+
    "\22\u0121\1\0\1\u0121\2\0\1\u0121\1\7\1\u0121\1\0"+
    "\1\u0121\20\0\2\u0121\1\u0126\22\u0121\1\0\1\u0121\2\0"+
    "\1\u0121\1\7\1\u0121\1\0\1\u0121\20\0\2\u0121\1\u0127"+
    "\22\u0121\1\0\1\u0121\2\0\1\u0121\1\7\1\u0121\1\0"+
    "\1\u0128\20\0\25\u0121\1\0\1\u0121\2\0\1\u0121\1\7"+
    "\1\u0121\1\0\1\u0121\20\0\4\u0121\1\u0129\20\u0121\1\0"+
    "\1\u0121\2\0\1\u0121\1\7\1\u0121\1\0\1\u0121\20\0"+
    "\3\u0121\1\u012a\21\u0121\1\0\1\u0121\2\0\1\u0121\1\7"+
    "\1\u0121\1\0\1\u0121\20\0\2\u0121\1\u012b\22\u0121\1\0"+
    "\1\u0121\2\0\1\u0121\1\7\1\u0121\1\0\1\u0121\20\0"+
    "\6\u0121\1\u012c\16\u0121\1\0\1\u0121\2\0\1\u0121\1\7"+
    "\1\u0121\1\0\1\u0121\20\0\12\u0121\1\u012d\12\u0121\1\0"+
    "\1\u0121\2\0\1\u0121\1\7\1\u0121\1\0\1\u0121\20\0"+
    "\5\u0121\1\u012e\17\u0121\1\0\1\u0121\2\0\1\u0121\1\7"+
    "\1\u0121\1\0\1\u0121\20\0\3\u0121\1\u012f\21\u0121\1\0"+
    "\1\u0121\2\0\1\u0121\1\7\1\u0121\1\0\1\u0121\20\0"+
    "\2\u0121\1\u0130\22\u0121\3\0\1\u0131\53\0\1\u0132\2\0"+
    "\1\u0132\1\7\1\u0132\1\0\1\u0132\20\0\25\u0132\1\0"+
    "\1\u0133\2\0\1\u0132\1\7\1\u0132\1\0\1\u0132\20\0"+
    "\25\u0132\1\0\1\u0132\2\0\1\u0132\1\7\1\u0132\1\0"+
    "\1\u0132\20\0\7\u0132\1\u0134\15\u0132\1\0\1\u0132\2\0"+
    "\1\u0132\1\7\1\u0132\1\0\1\u0132\20\0\1\u0135\24\u0132"+
    "\1\0\1\u0132\2\0\1\u0132\1\7\1\u0132\1\0\1\u0132"+
    "\20\0\5\u0132\1\u0136\17\u0132\1\0\1\u0132\2\0\1\u0132"+
    "\1\7\1\u0132\1\0\1\u0132\20\0\16\u0132\1\u0137\6\u0132"+
    "\1\0\1\u0132\2\0\1\u0132\1\7\1\u0132\1\0\1\u0132"+
    "\20\0\3\u0132\1\u0138\21\u0132\1\0\1\u0139\2\0\1\u0139"+
    "\1\7\1\u0139\1\0\1\u0139\20\0\25\u0139\1\0\1\u013a"+
    "\2\0\1\u0139\1\7\1\u0139\1\0\1\u0139\20\0\25\u0139"+
    "\1\0\1\u0139\2\0\1\u0139\1\7\1\u0139\1\0\1\u0139"+
    "\20\0\3\u0139\1\u013b\21\u0139\1\0\1\u0139\2\0\1\u0139"+
    "\1\7\1\u0139\1\0\1\u0139\20\0\5\u0139\1\u013c\17\u0139"+
    "\1\0\1\u013d\2\0\1\u013d\1\7\1\u013d\1\0\1\u013d"+
    "\20\0\25\u013d\1\0\1\u013e\2\0\1\u013d\1\7\1\u013d"+
    "\1\0\1\u013d\20\0\25\u013d\1\0\1\u013d\2\0\1\u013d"+
    "\1\7\1\u013d\1\0\1\u013d\20\0\1\u013f\24\u013d\1\0"+
    "\1\u013d\2\0\1\u013d\1\7\1\u013d\1\0\1\u013d\20\0"+
    "\2\u013d\1\u0140\22\u013d\1\0\1\u0141\2\0\1\u0141\1\7"+
    "\1\u0141\1\0\1\u0141\20\0\25\u0141\1\0\1\u0142\2\0"+
    "\1\u0141\1\7\1\u0141\1\0\1\u0141\20\0\25\u0141\1\0"+
    "\1\u0143\2\0\1\u0143\1\7\1\u0143\1\0\1\u0143\20\0"+
    "\25\u0143\1\0\1\u0144\2\0\1\u0143\1\7\1\u0143\1\0"+
    "\1\u0143\20\0\25\u0143\1\0\1\u0145\2\0\1\u0145\1\7"+
    "\1\u0145\1\0\1\u0145\20\0\25\u0145\1\0\1\u0146\2\0"+
    "\1\u0145\1\7\1\u0145\1\0\1\u0145\20\0\25\u0145\1\0"+
    "\1\u0147\2\0\1\u0147\1\7\1\u0147\1\0\1\u0147\20\0"+
    "\25\u0147\1\0\1\u0148\2\0\1\u0147\1\7\1\u0147\1\0"+
    "\1\u0147\20\0\25\u0147\1\0\1\u0149\2\0\1\u0149\1\7"+
    "\1\u0149\1\0\1\u0149\20\0\25\u0149\1\0\1\u014a\2\0"+
    "\1\u0149\1\7\1\u0149\1\0\1\u0149\20\0\25\u0149\1\0"+
    "\1\u014b\2\0\1\u014b\1\7\1\u014b\1\0\1\u014b\20\0"+
    "\25\u014b\1\0\1\u014c\2\0\1\u014b\1\7\1\u014b\1\0"+
    "\1\u014b\20\0\25\u014b\1\0\1\u014d\2\0\1\u014d\1\7"+
    "\1\u014d\1\0\1\u014d\20\0\25\u014d\1\0\1\u014e\2\0"+
    "\1\u014d\1\7\1\u014d\1\0\1\u014d\20\0\25\u014d\1\0"+
    "\1\u014f\2\0\1\u014f\1\7\1\u014f\1\0\1\u014f\20\0"+
    "\25\u014f\1\0\1\u0150\2\0\1\u014f\1\7\1\u014f\1\0"+
    "\1\u014f\20\0\25\u014f\1\0\1\u0151\2\0\1\u0151\1\7"+
    "\1\u0151\1\0\1\u0151\20\0\25\u0151\1\0\1\u0152\2\0"+
    "\1\u0151\1\7\1\u0151\1\0\1\u0151\20\0\25\u0151\1\0"+
    "\1\u0153\2\0\1\u0153\1\7\1\u0153\1\0\1\u0153\20\0"+
    "\25\u0153\1\0\1\u0154\2\0\1\u0153\1\7\1\u0153\1\0"+
    "\1\u0153\20\0\25\u0153\1\0\1\u0155\2\0\1\u0155\1\7"+
    "\1\u0155\1\0\1\u0155\20\0\25\u0155\1\0\1\u0156\2\0"+
    "\1\u0155\1\7\1\u0155\1\0\1\u0155\20\0\25\u0155\1\0"+
    "\1\u0157\2\0\1\u0157\1\7\1\u0157\1\0\1\u0157\20\0"+
    "\25\u0157\1\0\1\u0158\2\0\1\u0157\1\7\1\u0157\1\0"+
    "\1\u0157\20\0\25\u0157\1\0\1\u0159\2\0\1\u0159\1\7"+
    "\1\u0159\1\0\1\u0159\20\0\25\u0159\1\0\1\u015a\2\0"+
    "\1\u0159\1\7\1\u0159\1\0\1\u0159\20\0\25\u0159\1\0"+
    "\1\u015b\2\0\1\u015b\1\7\1\u015b\1\0\1\u015b\20\0"+
    "\25\u015b\1\0\1\u015c\2\0\1\u015b\1\7\1\u015b\1\0"+
    "\1\u015b\20\0\25\u015b\1\0\1\u015d\2\0\1\u015d\1\7"+
    "\1\u015d\1\0\1\u015d\20\0\25\u015d\1\0\1\u015e\2\0"+
    "\1\u015d\1\7\1\u015d\1\0\1\u015d\20\0\25\u015d\1\0"+
    "\1\u015f\2\0\1\u015f\1\7\1\u015f\1\0\1\u015f\20\0"+
    "\25\u015f\1\0\1\u0160\2\0\1\u015f\1\7\1\u015f\1\0"+
    "\1\u015f\20\0\25\u015f\1\0\1\u0161\2\0\1\u0161\1\7"+
    "\1\u0161\1\0\1\u0161\20\0\25\u0161\1\0\1\u0162\2\0"+
    "\1\u0161\1\7\1\u0161\1\0\1\u0161\20\0\25\u0161\1\0"+
    "\1\u0163\2\0\1\u0163\1\7\1\u0163\1\0\1\u0163\20\0"+
    "\25\u0163\1\0\1\u0164\2\0\1\u0163\1\7\1\u0163\1\0"+
    "\1\u0163\20\0\25\u0163\1\0\1\u0165\2\0\1\u0165\1\7"+
    "\1\u0165\1\0\1\u0165\20\0\25\u0165\1\0\1\u0166\2\0"+
    "\1\u0165\1\7\1\u0165\1\0\1\u0165\20\0\25\u0165\1\0"+
    "\1\u0167\2\0\1\u0167\1\7\1\u0167\1\0\1\u0167\20\0"+
    "\25\u0167\1\0\1\u0168\2\0\1\u0167\1\7\1\u0167\1\0"+
    "\1\u0167\20\0\25\u0167\1\0\1\u0169\2\0\1\u0169\1\7"+
    "\1\u0169\1\0\1\u0169\20\0\25\u0169\1\0\1\131\2\0"+
    "\1\u0169\1\7\1\u0169\1\0\1\u0169\20\0\25\u0169";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13478];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\1\1\10\11\2\1\3\11"+
    "\17\1\1\0\2\1\1\0\4\1\1\0\3\1\3\11"+
    "\124\1\1\0\56\1\1\0\51\1\1\0\114\1\1\11"+
    "\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;
    modelos.InformacionLexema c = new modelos.InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARRIBA;
          }
        case 76: break;
        case 11: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_O;
          }
        case 77: break;
        case 19: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMA;
          }
        case 78: break;
        case 35: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LEER;
          }
        case 79: break;
        case 2: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO;
          }
        case 80: break;
        case 60: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_INICIAR;
          }
        case 81: break;
        case 38: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ATRAS;
          }
        case 82: break;
        case 55: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CAPTURA;
          }
        case 83: break;
        case 5: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR;
          }
        case 84: break;
        case 49: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_APAGAR;
          }
        case 85: break;
        case 27: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SI;
          }
        case 86: break;
        case 50: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SEGUIR;
          }
        case 87: break;
        case 6: 
          { /*Ignore*/
          }
        case 88: break;
        case 47: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CADENA;
          }
        case 89: break;
        case 73: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VERDADERO;
          }
        case 90: break;
        case 43: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_GIRAR;
          }
        case 91: break;
        case 67: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ADELANTE;
          }
        case 92: break;
        case 17: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR;
          }
        case 93: break;
        case 28: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIN;
          }
        case 94: break;
        case 14: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_IZQ;
          }
        case 95: break;
        case 46: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARGAR;
          }
        case 96: break;
        case 16: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR;
          }
        case 97: break;
        case 9: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_DIVISION;
          }
        case 98: break;
        case 52: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ESPERAR;
          }
        case 99: break;
        case 31: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NULO;
          }
        case 100: break;
        case 59: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECIMAL;
          }
        case 101: break;
        case 40: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FALSO;
          }
        case 102: break;
        case 37: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CICLO;
          }
        case 103: break;
        case 69: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_MIENTRAS;
          }
        case 104: break;
        case 36: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CORTO;
          }
        case 105: break;
        case 39: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ABAJO;
          }
        case 106: break;
        case 26: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NO;
          }
        case 107: break;
        case 10: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_Y;
          }
        case 108: break;
        case 41: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARAV;
          }
        case 109: break;
        case 25: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR_QUE;
          }
        case 110: break;
        case 75: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DIRECCIONAR;
          }
        case 111: break;
        case 61: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FUNCION;
          }
        case 112: break;
        case 63: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_EJECUTAR;
          }
        case 113: break;
        case 45: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENTERO;
          }
        case 114: break;
        case 44: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VIDEO;
          }
        case 115: break;
        case 34: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARA;
          }
        case 116: break;
        case 29: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PIN;
          }
        case 117: break;
        case 65: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CALIBRAR;
          }
        case 118: break;
        case 70: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_BOOLEANO;
          }
        case 119: break;
        case 33: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIJO;
          }
        case 120: break;
        case 32: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RUTA;
          }
        case 121: break;
        case 4: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MENOS;
          }
        case 122: break;
        case 30: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_HAZ;
          }
        case 123: break;
        case 12: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MODULO;
          }
        case 124: break;
        case 22: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_EXPONENTE;
          }
        case 125: break;
        case 66: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ACELERAR;
          }
        case 126: break;
        case 1: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR;
          }
        case 127: break;
        case 15: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_DER;
          }
        case 128: break;
        case 57: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DETENER;
          }
        case 129: break;
        case 53: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RETORNO;
          }
        case 130: break;
        case 24: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR_QUE;
          }
        case 131: break;
        case 74: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECLARACION;
          }
        case 132: break;
        case 56: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARREGLO;
          }
        case 133: break;
        case 58: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DERECHA;
          }
        case 134: break;
        case 7: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ASIGNACION;
          }
        case 135: break;
        case 72: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PRINCIPAL;
          }
        case 136: break;
        case 71: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IZQUIERDA;
          }
        case 137: break;
        case 62: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENCENDER;
          }
        case 138: break;
        case 21: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_DECIMAL;
          }
        case 139: break;
        case 42: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LARGO;
          }
        case 140: break;
        case 54: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_REGRESA;
          }
        case 141: break;
        case 23: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_IGUALDAD;
          }
        case 142: break;
        case 18: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DOS_PUNTOS;
          }
        case 143: break;
        case 8: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_POR;
          }
        case 144: break;
        case 68: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IMPRIMIR;
          }
        case 145: break;
        case 3: 
          { c.linea=yyline;c.columna=yycolumn;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MAS;
          }
        case 146: break;
        case 13: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PUNTO_COMA;
          }
        case 147: break;
        case 64: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARACTER;
          }
        case 148: break;
        case 20: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ARROBA;
          }
        case 149: break;
        case 51: 
          { 
          }
        case 150: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
