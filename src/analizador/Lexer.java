/* The following code was generated by JFlex 1.4.3 on 07/06/21 19:57 */

package analizador;
import java.io.*;
import static analizador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 07/06/21 19:57 from the specification file
 * <tt>C:/analizador/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\13\2\0\1\11\22\0\1\11\1\21\3\0\1\22"+
    "\1\17\1\12\1\24\1\25\1\15\1\2\1\31\1\3\1\7\1\16"+
    "\12\1\1\30\1\23\1\27\1\14\1\26\1\0\1\32\3\5\1\5"+
    "\26\5\1\0\1\0\1\0\1\0\1\6\1\0\1\40\1\50\1\37"+
    "\1\41\1\10\1\43\1\53\1\54\1\42\1\52\1\4\1\51\1\46"+
    "\1\33\1\36\1\47\1\56\1\35\1\45\1\34\1\44\1\57\3\4"+
    "\1\55\1\0\1\20\u1f9c\0\1\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\1"+
    "\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\13\6\2\31\1\3\2\0\1\10\2\6"+
    "\1\0\1\32\1\1\1\33\1\0\1\6\1\0\1\34"+
    "\1\35\1\36\1\37\1\40\1\0\1\41\1\42\15\41"+
    "\1\43\12\6\1\44\5\6\1\33\1\32\1\33\2\10"+
    "\2\6\1\45\1\33\1\6\1\46\33\41\11\6\1\47"+
    "\6\6\1\10\1\0\2\6\1\33\1\6\31\41\1\50"+
    "\3\41\1\51\1\41\1\52\14\6\1\53\2\6\1\10"+
    "\1\0\2\6\1\33\1\6\7\41\1\54\16\41\1\55"+
    "\2\41\1\56\3\41\1\57\2\6\1\60\4\6\1\61"+
    "\5\6\1\0\2\6\1\33\1\62\12\41\1\63\4\41"+
    "\1\64\6\41\1\65\1\66\1\67\1\70\1\6\1\71"+
    "\11\6\1\72\2\6\1\33\7\41\1\73\2\41\1\74"+
    "\2\41\1\75\5\41\1\76\1\6\1\77\1\100\1\6"+
    "\1\101\1\102\4\6\1\72\2\6\1\33\3\41\1\103"+
    "\1\41\1\104\1\105\1\106\3\41\1\107\1\110\3\41"+
    "\1\111\1\6\1\112\1\6\1\113\1\6\1\72\2\6"+
    "\1\33\2\41\1\114\1\115\1\116\1\117\1\120\1\41"+
    "\1\121\1\41\1\6\1\122\1\123\2\6\1\33\3\41"+
    "\1\124\3\6\1\33\3\41\1\125\2\6\1\33\2\41"+
    "\1\126\2\6\1\33\2\41\2\6\1\33\2\41\2\6"+
    "\1\33\2\41\2\6\1\33\2\41\2\6\1\33\2\41"+
    "\2\6\1\33\2\41\2\6\1\33\2\41\2\6\1\33"+
    "\2\41\2\6\1\33\2\41\2\6\1\33\2\41\2\6"+
    "\1\33\2\41\2\6\1\33\2\41\2\6\1\33\2\41"+
    "\2\6\1\33\2\41\2\6\1\33\2\41\2\6\1\33"+
    "\2\41\2\6\1\33\2\41\2\6\1\33\2\41\2\6"+
    "\1\33\2\41\2\6\1\33\4\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\60\0\u01b0\0\u01e0\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\u0210\0\u0240\0\60"+
    "\0\60\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390"+
    "\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\220"+
    "\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660"+
    "\0\u0690\0\u06c0\0\u06f0\0\u01b0\0\60\0\60\0\60\0\60"+
    "\0\60\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"+
    "\0\u09f0\0\u05d0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u05d0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u06c0\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\60\0\u0e10\0\u0e40\0\u0720\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0"+
    "\0\u1500\0\u0de0\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0"+
    "\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u17a0"+
    "\0\u1c20\0\u1c50\0\u1c80\0\u17a0\0\u1cb0\0\u16e0\0\u1ce0\0\u1d10"+
    "\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90"+
    "\0\u1ec0\0\u1ef0\0\u16e0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0"+
    "\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160"+
    "\0\u2190\0\u21c0\0\u20d0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430"+
    "\0\u2460\0\u20d0\0\u2490\0\u24c0\0\u20d0\0\u24f0\0\u2520\0\u2550"+
    "\0\u2010\0\u2580\0\u25b0\0\u2010\0\u25e0\0\u2610\0\u2640\0\u2670"+
    "\0\u2010\0\u26a0\0\u26d0\0\u2700\0\u2730\0\u2760\0\u2790\0\u27c0"+
    "\0\u27f0\0\u2820\0\u27f0\0\u2850\0\u2880\0\u28b0\0\u28e0\0\u2910"+
    "\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2880\0\u2a30\0\u2a60"+
    "\0\u2a90\0\u2ac0\0\u2880\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0"+
    "\0\u2be0\0\u2880\0\u2880\0\u2880\0\u2880\0\u2c10\0\u27f0\0\u2c40"+
    "\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30\0\u2d60\0\u2d90\0\u2dc0"+
    "\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\u2eb0\0\u2ee0\0\u2f10\0\u2f40"+
    "\0\u2f70\0\u2fa0\0\u2fd0\0\u2ee0\0\u3000\0\u3030\0\u2ee0\0\u3060"+
    "\0\u3090\0\u2ee0\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180\0\u2ee0"+
    "\0\u31b0\0\u2e50\0\u2e50\0\u31e0\0\u2e50\0\u2e50\0\u3210\0\u3240"+
    "\0\u3270\0\u32a0\0\u32d0\0\u3300\0\u3330\0\u3360\0\u3390\0\u33c0"+
    "\0\u33f0\0\u33c0\0\u3420\0\u33c0\0\u33c0\0\u33c0\0\u3450\0\u3480"+
    "\0\u34b0\0\u33c0\0\u33c0\0\u34e0\0\u3510\0\u3540\0\u3330\0\u3570"+
    "\0\u3330\0\u35a0\0\u3330\0\u35d0\0\60\0\u3600\0\u3630\0\u3660"+
    "\0\u3690\0\u36c0\0\u36c0\0\u36c0\0\u36c0\0\u36c0\0\u36c0\0\u36f0"+
    "\0\u36c0\0\u3720\0\u3750\0\u3630\0\u3630\0\u3780\0\u37b0\0\u37e0"+
    "\0\u3810\0\u3840\0\u3870\0\u3840\0\u38a0\0\u38d0\0\u3900\0\u3930"+
    "\0\u3960\0\u3990\0\u39c0\0\u3900\0\u39f0\0\u3a20\0\u3a50\0\u3a80"+
    "\0\u3ab0\0\u3ab0\0\u3ae0\0\u3b10\0\u3b40\0\u3b70\0\u3ba0\0\u3bd0"+
    "\0\u3c00\0\u3c30\0\u3c60\0\u3c90\0\u3cc0\0\u3cf0\0\u3d20\0\u3d50"+
    "\0\u3d80\0\u3db0\0\u3de0\0\u3e10\0\u3e40\0\u3e70\0\u3ea0\0\u3ed0"+
    "\0\u3f00\0\u3f30\0\u3f60\0\u3f90\0\u3fc0\0\u3ff0\0\u4020\0\u4050"+
    "\0\u4080\0\u40b0\0\u40e0\0\u4110\0\u4140\0\u4170\0\u41a0\0\u41d0"+
    "\0\u4200\0\u4230\0\u4260\0\u4290\0\u42c0\0\u42f0\0\u4320\0\u4350"+
    "\0\u4380\0\u43b0\0\u43e0\0\u4410\0\u4440\0\u4470\0\u44a0\0\u44d0"+
    "\0\u4500\0\u4530\0\u4560\0\u4590\0\u45c0\0\u45f0\0\u4620\0\u4650"+
    "\0\u4680\0\u46b0\0\u46e0\0\u4710\0\u4740\0\u4770\0\u47a0\0\u47d0"+
    "\0\u4800\0\u4830\0\u4860\0\u4890\0\u48c0\0\u48f0\0\u4920\0\u4950"+
    "\0\u4980\0\u49b0\0\u49e0\0\u4a10\0\u4a40\0\u4a70\0\u4aa0\0\u4ad0"+
    "\0\u4b00\0\u4b30\0\u4b60\0\u4b90\0\u4bc0\0\u4bf0\0\u4c20\0\u4c50"+
    "\0\u4c80\0\u4cb0\0\u4ce0\0\u4d10\0\u4d40\0\u4d70\0\60\0\u0780";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\1\12\1\13\1\12\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\3\6\1\34\1\35\1\36\1\37"+
    "\1\40\1\6\1\41\1\42\1\43\1\44\6\6\1\45"+
    "\61\0\1\3\2\0\3\46\1\10\1\47\22\0\25\46"+
    "\1\0\1\50\5\0\1\51\1\52\50\0\1\50\1\0"+
    "\1\53\3\0\1\51\1\52\50\0\1\54\2\0\1\55"+
    "\1\7\1\55\1\0\1\55\13\0\1\56\6\0\25\55"+
    "\4\0\3\7\1\0\1\7\22\0\25\7\1\0\1\57"+
    "\5\0\1\60\51\0\1\61\2\62\1\55\1\7\1\55"+
    "\1\0\1\55\13\0\1\56\6\0\1\63\24\55\12\64"+
    "\1\65\45\64\14\0\1\66\57\0\1\67\57\0\1\70"+
    "\11\0\1\71\32\0\1\72\2\0\1\73\2\74\1\0"+
    "\1\75\22\0\2\73\1\76\1\73\1\77\1\100\1\101"+
    "\1\102\1\103\1\73\1\104\1\73\1\105\1\73\1\106"+
    "\1\73\1\107\1\110\2\73\1\111\1\0\1\54\2\0"+
    "\1\55\1\7\1\55\1\0\1\55\13\0\1\56\6\0"+
    "\3\55\1\112\5\55\1\113\13\55\1\0\1\54\2\0"+
    "\1\55\1\7\1\55\1\0\1\55\13\0\1\56\6\0"+
    "\3\55\1\114\1\55\1\115\1\55\1\116\15\55\1\0"+
    "\1\54\2\0\1\55\1\7\1\55\1\0\1\55\13\0"+
    "\1\56\6\0\2\55\1\117\22\55\1\0\1\54\2\0"+
    "\1\55\1\7\1\55\1\0\1\120\13\0\1\56\6\0"+
    "\25\55\1\0\1\54\2\0\1\55\1\7\1\55\1\0"+
    "\1\55\13\0\1\56\6\0\1\121\24\55\1\0\1\54"+
    "\2\0\1\55\1\7\1\55\1\0\1\55\13\0\1\56"+
    "\6\0\5\55\1\122\1\55\1\123\1\55\1\124\13\55"+
    "\1\0\1\54\2\0\1\55\1\7\1\55\1\0\1\55"+
    "\13\0\1\56\6\0\7\55\1\125\15\55\1\0\1\54"+
    "\2\0\1\55\1\7\1\55\1\0\1\55\13\0\1\56"+
    "\6\0\7\55\1\126\15\55\1\0\1\54\2\0\1\55"+
    "\1\7\1\55\1\0\1\55\13\0\1\56\6\0\2\55"+
    "\1\127\2\55\1\130\17\55\1\0\1\54\2\0\1\55"+
    "\1\7\1\55\1\0\1\55\13\0\1\56\6\0\3\55"+
    "\1\131\21\55\1\0\1\54\2\0\1\55\1\7\1\55"+
    "\1\0\1\132\13\0\1\56\6\0\25\55\1\0\1\46"+
    "\2\0\3\46\1\0\1\46\22\0\25\46\1\0\1\133"+
    "\2\62\3\46\1\0\1\46\22\0\25\46\1\0\1\134"+
    "\57\0\1\135\2\62\54\0\3\136\1\137\7\136\1\0"+
    "\44\136\1\0\1\140\2\0\1\140\1\0\1\140\1\0"+
    "\1\140\13\0\1\56\6\0\25\140\1\0\1\140\2\0"+
    "\1\141\1\7\1\141\1\0\1\141\13\0\1\56\6\0"+
    "\25\141\25\0\1\142\33\0\1\57\5\0\1\60\1\52"+
    "\50\0\1\60\5\0\1\60\51\0\1\143\2\0\1\140"+
    "\1\0\1\140\1\0\1\140\13\0\1\56\6\0\25\140"+
    "\1\0\1\135\57\0\1\140\2\0\1\141\1\7\1\141"+
    "\1\0\1\141\13\0\1\56\6\0\1\141\1\144\23\141"+
    "\1\0\1\145\2\0\3\145\1\0\1\145\22\0\25\145"+
    "\1\0\1\146\2\0\1\147\1\74\1\147\1\0\1\147"+
    "\22\0\25\147\4\0\3\74\1\0\1\74\22\0\25\74"+
    "\1\0\1\146\2\0\1\147\1\74\1\147\1\0\1\147"+
    "\22\0\1\150\11\147\1\151\4\147\1\152\5\147\1\0"+
    "\1\146\2\0\1\147\1\74\1\147\1\0\1\153\22\0"+
    "\11\147\1\154\13\147\1\0\1\146\2\0\1\147\1\74"+
    "\1\147\1\0\1\147\22\0\5\147\1\155\17\147\1\0"+
    "\1\146\2\0\1\147\1\74\1\147\1\0\1\147\22\0"+
    "\1\147\1\156\1\157\1\147\1\160\1\147\1\161\5\147"+
    "\1\162\1\163\7\147\1\0\1\146\2\0\1\147\1\74"+
    "\1\147\1\0\1\164\22\0\7\147\1\165\15\147\1\0"+
    "\1\146\2\0\1\147\1\74\1\147\1\0\1\147\22\0"+
    "\13\147\1\166\6\147\1\167\2\147\1\0\1\146\2\0"+
    "\1\147\1\74\1\147\1\0\1\147\22\0\7\147\1\170"+
    "\15\147\1\0\1\146\2\0\1\147\1\74\1\147\1\0"+
    "\1\171\22\0\25\147\1\0\1\146\2\0\1\147\1\74"+
    "\1\147\1\0\1\147\22\0\5\147\1\172\1\147\1\173"+
    "\15\147\1\0\1\146\2\0\1\147\1\74\1\147\1\0"+
    "\1\174\22\0\5\147\1\175\17\147\1\0\1\146\2\0"+
    "\1\147\1\74\1\147\1\0\1\147\22\0\7\147\1\176"+
    "\15\147\1\0\1\146\2\0\1\147\1\74\1\147\1\0"+
    "\1\147\22\0\5\147\1\177\17\147\1\0\1\146\2\0"+
    "\1\147\1\74\1\147\1\0\1\147\22\0\7\147\1\200"+
    "\15\147\1\0\1\140\2\0\1\141\1\7\1\141\1\0"+
    "\1\141\13\0\1\56\6\0\16\141\1\201\6\141\1\0"+
    "\1\140\2\0\1\141\1\7\1\141\1\0\1\141\13\0"+
    "\1\56\6\0\2\141\1\202\22\141\1\0\1\140\2\0"+
    "\1\141\1\7\1\141\1\0\1\141\13\0\1\56\6\0"+
    "\2\141\1\203\3\141\1\204\16\141\1\0\1\140\2\0"+
    "\1\141\1\7\1\141\1\0\1\141\13\0\1\56\6\0"+
    "\4\141\1\205\20\141\1\0\1\140\2\0\1\141\1\7"+
    "\1\141\1\0\1\141\13\0\1\56\6\0\2\141\1\206"+
    "\22\141\1\0\1\140\2\0\1\141\1\7\1\141\1\0"+
    "\1\141\13\0\1\56\6\0\4\141\1\207\20\141\1\0"+
    "\1\140\2\0\1\141\1\7\1\141\1\0\1\141\13\0"+
    "\1\56\6\0\7\141\1\210\15\141\1\0\1\140\2\0"+
    "\1\141\1\7\1\141\1\0\1\141\13\0\1\56\6\0"+
    "\16\141\1\211\6\141\1\0\1\140\2\0\1\141\1\7"+
    "\1\141\1\0\1\141\13\0\1\56\6\0\1\212\24\141"+
    "\1\0\1\140\2\0\1\141\1\7\1\141\1\0\1\141"+
    "\13\0\1\56\6\0\1\213\24\141\1\0\1\140\2\0"+
    "\1\141\1\7\1\141\1\0\1\214\13\0\1\56\6\0"+
    "\25\141\1\0\1\140\2\0\1\141\1\7\1\141\1\0"+
    "\1\141\13\0\1\56\6\0\7\141\1\215\15\141\1\0"+
    "\1\140\2\0\1\141\1\7\1\141\1\0\1\141\13\0"+
    "\1\56\6\0\2\141\1\216\22\141\1\0\1\140\2\0"+
    "\1\141\1\7\1\141\1\0\1\141\13\0\1\56\6\0"+
    "\3\141\1\217\21\141\1\0\1\140\2\0\1\141\1\7"+
    "\1\141\1\0\1\141\13\0\1\56\6\0\2\141\1\220"+
    "\22\141\1\0\1\133\2\0\3\46\1\0\1\46\22\0"+
    "\25\46\1\0\1\134\6\0\1\52\47\0\13\136\1\0"+
    "\44\136\3\137\1\221\7\137\1\222\44\137\1\0\1\223"+
    "\2\0\1\223\1\0\1\223\1\0\1\223\13\0\1\56"+
    "\6\0\25\223\1\0\1\223\2\0\1\224\1\7\1\224"+
    "\1\0\1\224\13\0\1\56\6\0\25\224\1\0\1\225"+
    "\2\0\1\223\1\0\1\223\1\0\1\223\13\0\1\56"+
    "\6\0\25\223\1\0\1\223\2\0\1\224\1\7\1\224"+
    "\1\0\1\226\13\0\1\56\6\0\25\224\1\0\1\227"+
    "\2\0\1\227\1\0\1\227\1\0\1\227\22\0\25\227"+
    "\1\0\1\227\2\0\1\230\1\74\1\230\1\0\1\230"+
    "\22\0\25\230\1\0\1\227\2\0\1\230\1\74\1\230"+
    "\1\0\1\230\22\0\4\230\1\231\20\230\1\0\1\227"+
    "\2\0\1\230\1\74\1\230\1\0\1\230\22\0\14\230"+
    "\1\232\10\230\1\0\1\227\2\0\1\230\1\74\1\230"+
    "\1\0\1\233\22\0\25\230\1\0\1\227\2\0\1\230"+
    "\1\74\1\230\1\0\1\230\22\0\1\230\1\234\16\230"+
    "\1\235\4\230\1\0\1\227\2\0\1\230\1\74\1\230"+
    "\1\0\1\230\22\0\1\230\1\236\23\230\1\0\1\227"+
    "\2\0\1\230\1\74\1\230\1\0\1\230\22\0\2\230"+
    "\1\237\11\230\1\240\1\230\1\241\6\230\1\0\1\227"+
    "\2\0\1\230\1\74\1\230\1\0\1\230\22\0\2\230"+
    "\1\242\22\230\1\0\1\227\2\0\1\230\1\74\1\230"+
    "\1\0\1\230\22\0\2\230\1\243\22\230\1\0\1\227"+
    "\2\0\1\230\1\74\1\230\1\0\1\244\22\0\25\230"+
    "\1\0\1\227\2\0\1\230\1\74\1\230\1\0\1\245"+
    "\22\0\25\230\1\0\1\227\2\0\1\230\1\74\1\230"+
    "\1\0\1\230\22\0\5\230\1\246\17\230\1\0\1\227"+
    "\2\0\1\230\1\74\1\230\1\0\1\230\22\0\5\230"+
    "\1\247\17\230\1\0\1\227\2\0\1\230\1\74\1\230"+
    "\1\0\1\230\22\0\1\230\1\250\1\251\22\230\1\0"+
    "\1\227\2\0\1\230\1\74\1\230\1\0\1\230\22\0"+
    "\2\230\1\252\22\230\1\0\1\227\2\0\1\230\1\74"+
    "\1\230\1\0\1\230\22\0\14\230\1\253\10\230\1\0"+
    "\1\227\2\0\1\230\1\74\1\230\1\0\1\230\22\0"+
    "\23\230\1\254\1\230\1\0\1\227\2\0\1\230\1\74"+
    "\1\230\1\0\1\230\22\0\17\230\1\255\5\230\1\0"+
    "\1\227\2\0\1\230\1\74\1\230\1\0\1\230\22\0"+
    "\20\230\1\256\4\230\1\0\1\227\2\0\1\230\1\74"+
    "\1\230\1\0\1\230\22\0\2\230\1\257\22\230\1\0"+
    "\1\227\2\0\1\230\1\74\1\230\1\0\1\230\22\0"+
    "\1\260\24\230\1\0\1\227\2\0\1\230\1\74\1\230"+
    "\1\0\1\261\22\0\25\230\1\0\1\227\2\0\1\230"+
    "\1\74\1\230\1\0\1\230\22\0\2\230\1\262\22\230"+
    "\1\0\1\227\2\0\1\230\1\74\1\230\1\0\1\230"+
    "\22\0\2\230\1\263\22\230\1\0\1\227\2\0\1\230"+
    "\1\74\1\230\1\0\1\230\22\0\22\230\1\264\2\230"+
    "\1\0\1\227\2\0\1\230\1\74\1\230\1\0\1\230"+
    "\22\0\6\230\1\265\16\230\1\0\1\223\2\0\1\224"+
    "\1\7\1\224\1\0\1\224\13\0\1\56\6\0\3\224"+
    "\1\266\21\224\1\0\1\223\2\0\1\224\1\7\1\224"+
    "\1\0\1\224\13\0\1\56\6\0\1\224\1\267\23\224"+
    "\1\0\1\223\2\0\1\224\1\7\1\224\1\0\1\224"+
    "\13\0\1\56\6\0\5\224\1\270\17\224\1\0\1\223"+
    "\2\0\1\224\1\7\1\224\1\0\1\271\13\0\1\56"+
    "\6\0\25\224\1\0\1\223\2\0\1\224\1\7\1\224"+
    "\1\0\1\224\13\0\1\56\6\0\16\224\1\272\6\224"+
    "\1\0\1\223\2\0\1\224\1\7\1\224\1\0\1\273"+
    "\13\0\1\56\6\0\25\224\1\0\1\223\2\0\1\224"+
    "\1\7\1\224\1\0\1\224\13\0\1\56\6\0\7\224"+
    "\1\274\6\224\1\275\6\224\1\0\1\223\2\0\1\224"+
    "\1\7\1\224\1\0\1\224\13\0\1\56\6\0\4\224"+
    "\1\276\20\224\1\0\1\223\2\0\1\224\1\7\1\224"+
    "\1\0\1\224\13\0\1\56\6\0\12\224\1\277\12\224"+
    "\1\0\1\223\2\0\1\224\1\7\1\224\1\0\1\224"+
    "\13\0\1\56\6\0\4\224\1\300\20\224\1\0\1\223"+
    "\2\0\1\224\1\7\1\224\1\0\1\224\13\0\1\56"+
    "\6\0\1\301\24\224\1\0\1\223\2\0\1\224\1\7"+
    "\1\224\1\0\1\224\13\0\1\56\6\0\1\302\24\224"+
    "\1\0\1\223\2\0\1\224\1\7\1\224\1\0\1\224"+
    "\13\0\1\56\6\0\5\224\1\303\17\224\1\0\1\223"+
    "\2\0\1\224\1\7\1\224\1\0\1\224\13\0\1\56"+
    "\6\0\16\224\1\304\6\224\1\0\1\223\2\0\1\224"+
    "\1\7\1\224\1\0\1\224\13\0\1\56\6\0\6\224"+
    "\1\305\16\224\3\137\1\306\7\137\1\222\44\137\3\222"+
    "\1\307\54\222\1\0\1\310\2\0\1\310\1\0\1\310"+
    "\1\0\1\310\13\0\1\56\6\0\25\310\1\0\1\310"+
    "\2\0\1\311\1\7\1\311\1\0\1\311\13\0\1\56"+
    "\6\0\25\311\1\0\1\312\2\0\1\310\1\0\1\310"+
    "\1\0\1\310\13\0\1\56\6\0\25\310\1\0\1\310"+
    "\2\0\1\311\1\7\1\311\1\0\1\311\13\0\1\56"+
    "\6\0\2\311\1\313\22\311\1\0\1\314\2\0\1\314"+
    "\1\0\1\314\1\0\1\314\22\0\25\314\1\0\1\314"+
    "\2\0\1\315\1\74\1\315\1\0\1\315\22\0\25\315"+
    "\1\0\1\314\2\0\1\315\1\74\1\315\1\0\1\316"+
    "\22\0\25\315\1\0\1\314\2\0\1\315\1\74\1\315"+
    "\1\0\1\317\22\0\25\315\1\0\1\314\2\0\1\315"+
    "\1\74\1\315\1\0\1\315\22\0\4\315\1\320\20\315"+
    "\1\0\1\314\2\0\1\315\1\74\1\315\1\0\1\315"+
    "\22\0\3\315\1\321\21\315\1\0\1\314\2\0\1\315"+
    "\1\74\1\315\1\0\1\315\22\0\2\315\1\322\22\315"+
    "\1\0\1\314\2\0\1\315\1\74\1\315\1\0\1\315"+
    "\22\0\5\315\1\323\17\315\1\0\1\314\2\0\1\315"+
    "\1\74\1\315\1\0\1\315\22\0\20\315\1\324\4\315"+
    "\1\0\1\314\2\0\1\315\1\74\1\315\1\0\1\315"+
    "\22\0\1\315\1\325\23\315\1\0\1\314\2\0\1\315"+
    "\1\74\1\315\1\0\1\315\22\0\7\315\1\326\15\315"+
    "\1\0\1\314\2\0\1\315\1\74\1\315\1\0\1\315"+
    "\22\0\5\315\1\327\17\315\1\0\1\314\2\0\1\315"+
    "\1\74\1\315\1\0\1\315\22\0\7\315\1\330\15\315"+
    "\1\0\1\314\2\0\1\315\1\74\1\315\1\0\1\315"+
    "\22\0\16\315\1\331\6\315\1\0\1\314\2\0\1\315"+
    "\1\74\1\315\1\0\1\315\22\0\16\315\1\332\6\315"+
    "\1\0\1\314\2\0\1\315\1\74\1\315\1\0\1\315"+
    "\22\0\20\315\1\333\4\315\1\0\1\314\2\0\1\315"+
    "\1\74\1\315\1\0\1\315\22\0\17\315\1\334\5\315"+
    "\1\0\1\314\2\0\1\315\1\74\1\315\1\0\1\335"+
    "\22\0\25\315\1\0\1\314\2\0\1\315\1\74\1\315"+
    "\1\0\1\336\22\0\25\315\1\0\1\314\2\0\1\315"+
    "\1\74\1\315\1\0\1\337\22\0\25\315\1\0\1\314"+
    "\2\0\1\315\1\74\1\315\1\0\1\315\22\0\2\315"+
    "\1\340\22\315\1\0\1\314\2\0\1\315\1\74\1\315"+
    "\1\0\1\315\22\0\11\315\1\341\13\315\1\0\1\314"+
    "\2\0\1\315\1\74\1\315\1\0\1\315\22\0\3\315"+
    "\1\342\21\315\1\0\1\314\2\0\1\315\1\74\1\315"+
    "\1\0\1\315\22\0\11\315\1\343\13\315\1\0\1\314"+
    "\2\0\1\315\1\74\1\315\1\0\1\315\22\0\5\315"+
    "\1\344\17\315\1\0\1\314\2\0\1\315\1\74\1\315"+
    "\1\0\1\315\22\0\2\315\1\345\22\315\1\0\1\314"+
    "\2\0\1\315\1\74\1\315\1\0\1\315\22\0\20\315"+
    "\1\346\4\315\1\0\1\314\2\0\1\315\1\74\1\315"+
    "\1\0\1\315\22\0\5\315\1\347\17\315\1\0\1\314"+
    "\2\0\1\315\1\74\1\315\1\0\1\350\22\0\25\315"+
    "\1\0\1\310\2\0\1\311\1\7\1\311\1\0\1\311"+
    "\13\0\1\56\6\0\3\311\1\351\21\311\1\0\1\310"+
    "\2\0\1\311\1\7\1\311\1\0\1\311\13\0\1\56"+
    "\6\0\4\311\1\352\20\311\1\0\1\310\2\0\1\311"+
    "\1\7\1\311\1\0\1\311\13\0\1\56\6\0\1\353"+
    "\24\311\1\0\1\310\2\0\1\311\1\7\1\311\1\0"+
    "\1\311\13\0\1\56\6\0\3\311\1\354\21\311\1\0"+
    "\1\310\2\0\1\311\1\7\1\311\1\0\1\311\13\0"+
    "\1\56\6\0\20\311\1\355\4\311\1\0\1\310\2\0"+
    "\1\311\1\7\1\311\1\0\1\311\13\0\1\56\6\0"+
    "\13\311\1\356\11\311\1\0\1\310\2\0\1\311\1\7"+
    "\1\311\1\0\1\311\13\0\1\56\6\0\5\311\1\357"+
    "\17\311\1\0\1\310\2\0\1\311\1\7\1\311\1\0"+
    "\1\311\13\0\1\56\6\0\7\311\1\360\15\311\1\0"+
    "\1\310\2\0\1\311\1\7\1\311\1\0\1\311\13\0"+
    "\1\56\6\0\3\311\1\361\21\311\1\0\1\310\2\0"+
    "\1\311\1\7\1\311\1\0\1\311\13\0\1\56\6\0"+
    "\7\311\1\362\15\311\1\0\1\310\2\0\1\311\1\7"+
    "\1\311\1\0\1\311\13\0\1\56\6\0\1\311\1\363"+
    "\23\311\1\0\1\310\2\0\1\311\1\7\1\311\1\0"+
    "\1\311\13\0\1\56\6\0\4\311\1\364\20\311\1\0"+
    "\1\310\2\0\1\311\1\7\1\311\1\0\1\365\13\0"+
    "\1\56\6\0\25\311\1\0\1\310\2\0\1\311\1\7"+
    "\1\311\1\0\1\311\13\0\1\56\6\0\5\311\1\366"+
    "\17\311\3\137\1\136\7\137\1\222\44\137\3\222\1\367"+
    "\54\222\1\0\1\370\2\0\1\370\1\0\1\370\1\0"+
    "\1\370\13\0\1\56\6\0\25\370\1\0\1\370\2\0"+
    "\1\371\1\7\1\371\1\0\1\371\13\0\1\56\6\0"+
    "\25\371\1\0\1\372\2\0\1\370\1\0\1\370\1\0"+
    "\1\370\13\0\1\56\6\0\25\370\1\0\1\370\2\0"+
    "\1\371\1\7\1\371\1\0\1\371\13\0\1\56\6\0"+
    "\3\371\1\373\21\371\1\0\1\374\2\0\1\374\1\0"+
    "\1\374\1\0\1\374\22\0\25\374\1\0\1\374\2\0"+
    "\1\375\1\74\1\375\1\0\1\375\22\0\25\375\1\0"+
    "\1\374\2\0\1\375\1\74\1\375\1\0\1\375\22\0"+
    "\1\376\24\375\1\0\1\374\2\0\1\375\1\74\1\375"+
    "\1\0\1\375\22\0\2\375\1\377\22\375\1\0\1\374"+
    "\2\0\1\375\1\74\1\375\1\0\1\375\22\0\11\375"+
    "\1\u0100\13\375\1\0\1\374\2\0\1\375\1\74\1\375"+
    "\1\0\1\375\22\0\2\375\1\u0101\22\375\1\0\1\374"+
    "\2\0\1\375\1\74\1\375\1\0\1\u0102\22\0\25\375"+
    "\1\0\1\374\2\0\1\375\1\74\1\375\1\0\1\375"+
    "\22\0\5\375\1\u0103\17\375\1\0\1\374\2\0\1\375"+
    "\1\74\1\375\1\0\1\375\22\0\11\375\1\u0104\13\375"+
    "\1\0\1\374\2\0\1\375\1\74\1\375\1\0\1\375"+
    "\22\0\15\375\1\u0105\7\375\1\0\1\374\2\0\1\375"+
    "\1\74\1\375\1\0\1\375\22\0\12\375\1\u0106\12\375"+
    "\1\0\1\374\2\0\1\375\1\74\1\375\1\0\1\375"+
    "\22\0\15\375\1\u0107\7\375\1\0\1\374\2\0\1\375"+
    "\1\74\1\375\1\0\1\u0108\22\0\25\375\1\0\1\374"+
    "\2\0\1\375\1\74\1\375\1\0\1\375\22\0\5\375"+
    "\1\u0109\17\375\1\0\1\374\2\0\1\375\1\74\1\375"+
    "\1\0\1\375\22\0\5\375\1\u010a\17\375\1\0\1\374"+
    "\2\0\1\375\1\74\1\375\1\0\1\375\22\0\3\375"+
    "\1\u010b\21\375\1\0\1\374\2\0\1\375\1\74\1\375"+
    "\1\0\1\375\22\0\1\u010c\24\375\1\0\1\374\2\0"+
    "\1\375\1\74\1\375\1\0\1\375\22\0\4\375\1\u010d"+
    "\20\375\1\0\1\374\2\0\1\375\1\74\1\375\1\0"+
    "\1\375\22\0\4\375\1\u010e\20\375\1\0\1\374\2\0"+
    "\1\375\1\74\1\375\1\0\1\375\22\0\7\375\1\u010f"+
    "\15\375\1\0\1\374\2\0\1\375\1\74\1\375\1\0"+
    "\1\375\22\0\7\375\1\u0110\15\375\1\0\1\374\2\0"+
    "\1\375\1\74\1\375\1\0\1\375\22\0\7\375\1\u0111"+
    "\15\375\1\0\1\374\2\0\1\375\1\74\1\375\1\0"+
    "\1\375\22\0\24\375\1\u0112\1\0\1\374\2\0\1\375"+
    "\1\74\1\375\1\0\1\375\22\0\3\375\1\u0113\21\375"+
    "\1\0\1\374\2\0\1\375\1\74\1\375\1\0\1\375"+
    "\22\0\2\375\1\u0114\22\375\1\0\1\374\2\0\1\375"+
    "\1\74\1\375\1\0\1\375\22\0\3\375\1\u0115\21\375"+
    "\1\0\1\370\2\0\1\371\1\7\1\371\1\0\1\371"+
    "\13\0\1\56\6\0\1\371\1\u0116\23\371\1\0\1\370"+
    "\2\0\1\371\1\7\1\371\1\0\1\371\13\0\1\56"+
    "\6\0\5\371\1\u0117\17\371\1\0\1\370\2\0\1\371"+
    "\1\7\1\371\1\0\1\371\13\0\1\56\6\0\16\371"+
    "\1\u0118\6\371\1\0\1\370\2\0\1\371\1\7\1\371"+
    "\1\0\1\371\13\0\1\56\6\0\5\371\1\u0119\17\371"+
    "\1\0\1\370\2\0\1\371\1\7\1\371\1\0\1\371"+
    "\13\0\1\56\6\0\2\371\1\u011a\22\371\1\0\1\370"+
    "\2\0\1\371\1\7\1\371\1\0\1\371\13\0\1\56"+
    "\6\0\5\371\1\u011b\17\371\1\0\1\370\2\0\1\371"+
    "\1\7\1\371\1\0\1\371\13\0\1\56\6\0\3\371"+
    "\1\u011c\21\371\1\0\1\370\2\0\1\371\1\7\1\371"+
    "\1\0\1\371\13\0\1\56\6\0\2\371\1\u011d\22\371"+
    "\1\0\1\370\2\0\1\371\1\7\1\371\1\0\1\371"+
    "\13\0\1\56\6\0\7\371\1\u011e\15\371\1\0\1\370"+
    "\2\0\1\371\1\7\1\371\1\0\1\371\13\0\1\56"+
    "\6\0\5\371\1\u011f\17\371\1\0\1\370\2\0\1\371"+
    "\1\7\1\371\1\0\1\371\13\0\1\56\6\0\6\371"+
    "\1\u0120\16\371\3\222\1\u0121\54\222\1\0\1\u0122\2\0"+
    "\1\u0122\1\0\1\u0122\1\0\1\u0122\13\0\1\56\6\0"+
    "\25\u0122\1\0\1\u0122\2\0\1\u0123\1\7\1\u0123\1\0"+
    "\1\u0123\13\0\1\56\6\0\25\u0123\1\0\1\u0124\2\0"+
    "\1\u0122\1\0\1\u0122\1\0\1\u0122\13\0\1\56\6\0"+
    "\25\u0122\1\0\1\u0125\2\0\1\u0125\1\0\1\u0125\1\0"+
    "\1\u0125\22\0\25\u0125\1\0\1\u0125\2\0\1\u0126\1\74"+
    "\1\u0126\1\0\1\u0126\22\0\25\u0126\1\0\1\u0125\2\0"+
    "\1\u0126\1\74\1\u0126\1\0\1\u0126\22\0\6\u0126\1\u0127"+
    "\16\u0126\1\0\1\u0125\2\0\1\u0126\1\74\1\u0126\1\0"+
    "\1\u0126\22\0\5\u0126\1\u0128\17\u0126\1\0\1\u0125\2\0"+
    "\1\u0126\1\74\1\u0126\1\0\1\u0126\22\0\1\u0126\1\u0129"+
    "\23\u0126\1\0\1\u0125\2\0\1\u0126\1\74\1\u0126\1\0"+
    "\1\u0126\22\0\1\u012a\24\u0126\1\0\1\u0125\2\0\1\u0126"+
    "\1\74\1\u0126\1\0\1\u0126\22\0\12\u0126\1\u012b\12\u0126"+
    "\1\0\1\u0125\2\0\1\u0126\1\74\1\u0126\1\0\1\u0126"+
    "\22\0\2\u0126\1\u012c\22\u0126\1\0\1\u0125\2\0\1\u0126"+
    "\1\74\1\u0126\1\0\1\u0126\22\0\2\u0126\1\u012d\22\u0126"+
    "\1\0\1\u0125\2\0\1\u0126\1\74\1\u0126\1\0\1\u0126"+
    "\22\0\2\u0126\1\u012e\22\u0126\1\0\1\u0125\2\0\1\u0126"+
    "\1\74\1\u0126\1\0\1\u0126\22\0\5\u0126\1\u012f\17\u0126"+
    "\1\0\1\u0125\2\0\1\u0126\1\74\1\u0126\1\0\1\u0126"+
    "\22\0\2\u0126\1\u0130\22\u0126\1\0\1\u0125\2\0\1\u0126"+
    "\1\74\1\u0126\1\0\1\u0126\22\0\1\u0131\24\u0126\1\0"+
    "\1\u0125\2\0\1\u0126\1\74\1\u0126\1\0\1\u0126\22\0"+
    "\2\u0126\1\u0132\22\u0126\1\0\1\u0125\2\0\1\u0126\1\74"+
    "\1\u0126\1\0\1\u0133\22\0\25\u0126\1\0\1\u0125\2\0"+
    "\1\u0126\1\74\1\u0126\1\0\1\u0126\22\0\21\u0126\1\u0134"+
    "\3\u0126\1\0\1\u0125\2\0\1\u0126\1\74\1\u0126\1\0"+
    "\1\u0126\22\0\4\u0126\1\u0135\20\u0126\1\0\1\u0125\2\0"+
    "\1\u0126\1\74\1\u0126\1\0\1\u0126\22\0\13\u0126\1\u0136"+
    "\11\u0126\1\0\1\u0125\2\0\1\u0126\1\74\1\u0126\1\0"+
    "\1\u0137\22\0\25\u0126\1\0\1\u0125\2\0\1\u0126\1\74"+
    "\1\u0126\1\0\1\u0126\22\0\2\u0126\1\u0138\22\u0126\1\0"+
    "\1\u0122\2\0\1\u0123\1\7\1\u0123\1\0\1\u0139\13\0"+
    "\1\56\6\0\25\u0123\1\0\1\u0122\2\0\1\u0123\1\7"+
    "\1\u0123\1\0\1\u0123\13\0\1\56\6\0\3\u0123\1\u013a"+
    "\21\u0123\1\0\1\u0122\2\0\1\u0123\1\7\1\u0123\1\0"+
    "\1\u0123\13\0\1\56\6\0\16\u0123\1\u013b\6\u0123\1\0"+
    "\1\u0122\2\0\1\u0123\1\7\1\u0123\1\0\1\u0123\13\0"+
    "\1\56\6\0\5\u0123\1\u013c\17\u0123\1\0\1\u0122\2\0"+
    "\1\u0123\1\7\1\u0123\1\0\1\u0123\13\0\1\56\6\0"+
    "\2\u0123\1\u013d\22\u0123\1\0\1\u0122\2\0\1\u0123\1\7"+
    "\1\u0123\1\0\1\u0123\13\0\1\56\6\0\1\u013e\24\u0123"+
    "\1\0\1\u0122\2\0\1\u0123\1\7\1\u0123\1\0\1\u0123"+
    "\13\0\1\56\6\0\5\u0123\1\u013f\17\u0123\1\0\1\u0122"+
    "\2\0\1\u0123\1\7\1\u0123\1\0\1\u0123\13\0\1\56"+
    "\6\0\14\u0123\1\u0140\10\u0123\1\0\1\u0122\2\0\1\u0123"+
    "\1\7\1\u0123\1\0\1\u0123\13\0\1\56\6\0\1\u0141"+
    "\24\u0123\1\0\1\u0122\2\0\1\u0123\1\7\1\u0123\1\0"+
    "\1\u0142\13\0\1\56\6\0\25\u0123\3\0\1\u0143\55\0"+
    "\1\u0144\2\0\1\u0144\1\0\1\u0144\1\0\1\u0144\13\0"+
    "\1\56\6\0\25\u0144\1\0\1\u0144\2\0\1\u0145\1\7"+
    "\1\u0145\1\0\1\u0145\13\0\1\56\6\0\25\u0145\1\0"+
    "\1\u0146\2\0\1\u0144\1\0\1\u0144\1\0\1\u0144\13\0"+
    "\1\56\6\0\25\u0144\1\0\1\u0147\2\0\1\u0147\1\0"+
    "\1\u0147\1\0\1\u0147\22\0\25\u0147\1\0\1\u0147\2\0"+
    "\1\u0148\1\74\1\u0148\1\0\1\u0148\22\0\25\u0148\1\0"+
    "\1\u0147\2\0\1\u0148\1\74\1\u0148\1\0\1\u0149\22\0"+
    "\25\u0148\1\0\1\u0147\2\0\1\u0148\1\74\1\u0148\1\0"+
    "\1\u0148\22\0\2\u0148\1\u014a\22\u0148\1\0\1\u0147\2\0"+
    "\1\u0148\1\74\1\u0148\1\0\1\u0148\22\0\5\u0148\1\u014b"+
    "\17\u0148\1\0\1\u0147\2\0\1\u0148\1\74\1\u0148\1\0"+
    "\1\u0148\22\0\3\u0148\1\u014c\21\u0148\1\0\1\u0147\2\0"+
    "\1\u0148\1\74\1\u0148\1\0\1\u0148\22\0\5\u0148\1\u014d"+
    "\17\u0148\1\0\1\u0147\2\0\1\u0148\1\74\1\u0148\1\0"+
    "\1\u0148\22\0\5\u0148\1\u014e\17\u0148\1\0\1\u0147\2\0"+
    "\1\u0148\1\74\1\u0148\1\0\1\u0148\22\0\5\u0148\1\u014f"+
    "\17\u0148\1\0\1\u0147\2\0\1\u0148\1\74\1\u0148\1\0"+
    "\1\u0148\22\0\5\u0148\1\u0150\17\u0148\1\0\1\u0147\2\0"+
    "\1\u0148\1\74\1\u0148\1\0\1\u0148\22\0\1\u0148\1\u0151"+
    "\23\u0148\1\0\1\u0147\2\0\1\u0148\1\74\1\u0148\1\0"+
    "\1\u0148\22\0\2\u0148\1\u0152\22\u0148\1\0\1\u0147\2\0"+
    "\1\u0148\1\74\1\u0148\1\0\1\u0148\22\0\5\u0148\1\u0153"+
    "\17\u0148\1\0\1\u0147\2\0\1\u0148\1\74\1\u0148\1\0"+
    "\1\u0148\22\0\7\u0148\1\u0154\15\u0148\1\0\1\u0147\2\0"+
    "\1\u0148\1\74\1\u0148\1\0\1\u0148\22\0\7\u0148\1\u0155"+
    "\15\u0148\1\0\1\u0147\2\0\1\u0148\1\74\1\u0148\1\0"+
    "\1\u0148\22\0\2\u0148\1\u0156\22\u0148\1\0\1\u0144\2\0"+
    "\1\u0145\1\7\1\u0145\1\0\1\u0145\13\0\1\56\6\0"+
    "\2\u0145\1\u0157\22\u0145\1\0\1\u0144\2\0\1\u0145\1\7"+
    "\1\u0145\1\0\1\u0145\13\0\1\56\6\0\4\u0145\1\u0158"+
    "\20\u0145\1\0\1\u0144\2\0\1\u0145\1\7\1\u0145\1\0"+
    "\1\u0145\13\0\1\56\6\0\12\u0145\1\u0159\12\u0145\1\0"+
    "\1\u0144\2\0\1\u0145\1\7\1\u0145\1\0\1\u0145\13\0"+
    "\1\56\6\0\5\u0145\1\u015a\17\u0145\1\0\1\u0144\2\0"+
    "\1\u0145\1\7\1\u0145\1\0\1\u0145\13\0\1\56\6\0"+
    "\3\u0145\1\u015b\21\u0145\1\0\1\u0144\2\0\1\u0145\1\7"+
    "\1\u0145\1\0\1\u0145\13\0\1\56\6\0\2\u0145\1\u015c"+
    "\22\u0145\3\0\1\u015d\55\0\1\u015e\2\0\1\u015e\1\0"+
    "\1\u015e\1\0\1\u015e\13\0\1\56\6\0\25\u015e\1\0"+
    "\1\u015e\2\0\1\u015f\1\7\1\u015f\1\0\1\u015f\13\0"+
    "\1\56\6\0\25\u015f\1\0\1\u0160\2\0\1\u015e\1\0"+
    "\1\u015e\1\0\1\u015e\13\0\1\56\6\0\25\u015e\1\0"+
    "\1\u0161\2\0\1\u0161\1\0\1\u0161\1\0\1\u0161\22\0"+
    "\25\u0161\1\0\1\u0161\2\0\1\u0162\1\74\1\u0162\1\0"+
    "\1\u0162\22\0\25\u0162\1\0\1\u0161\2\0\1\u0162\1\74"+
    "\1\u0162\1\0\1\u0162\22\0\2\u0162\1\u0163\22\u0162\1\0"+
    "\1\u0161\2\0\1\u0162\1\74\1\u0162\1\0\1\u0162\22\0"+
    "\2\u0162\1\u0164\22\u0162\1\0\1\u0161\2\0\1\u0162\1\74"+
    "\1\u0162\1\0\1\u0162\22\0\2\u0162\1\u0165\22\u0162\1\0"+
    "\1\u0161\2\0\1\u0162\1\74\1\u0162\1\0\1\u0162\22\0"+
    "\2\u0162\1\u0166\22\u0162\1\0\1\u0161\2\0\1\u0162\1\74"+
    "\1\u0162\1\0\1\u0167\22\0\25\u0162\1\0\1\u0161\2\0"+
    "\1\u0162\1\74\1\u0162\1\0\1\u0162\22\0\3\u0162\1\u0168"+
    "\21\u0162\1\0\1\u0161\2\0\1\u0162\1\74\1\u0162\1\0"+
    "\1\u0162\22\0\2\u0162\1\u0169\22\u0162\1\0\1\u0161\2\0"+
    "\1\u0162\1\74\1\u0162\1\0\1\u0162\22\0\6\u0162\1\u016a"+
    "\16\u0162\1\0\1\u015e\2\0\1\u015f\1\7\1\u015f\1\0"+
    "\1\u015f\13\0\1\56\6\0\7\u015f\1\u016b\15\u015f\1\0"+
    "\1\u015e\2\0\1\u015f\1\7\1\u015f\1\0\1\u015f\13\0"+
    "\1\56\6\0\16\u015f\1\u016c\6\u015f\1\0\1\u015e\2\0"+
    "\1\u015f\1\7\1\u015f\1\0\1\u015f\13\0\1\56\6\0"+
    "\3\u015f\1\u016d\21\u015f\1\0\1\u016e\2\0\1\u016e\1\0"+
    "\1\u016e\1\0\1\u016e\13\0\1\56\6\0\25\u016e\1\0"+
    "\1\u016e\2\0\1\u016f\1\7\1\u016f\1\0\1\u016f\13\0"+
    "\1\56\6\0\25\u016f\1\0\1\u0170\2\0\1\u016e\1\0"+
    "\1\u016e\1\0\1\u016e\13\0\1\56\6\0\25\u016e\1\0"+
    "\1\u0171\2\0\1\u0171\1\0\1\u0171\1\0\1\u0171\22\0"+
    "\25\u0171\1\0\1\u0171\2\0\1\u0172\1\74\1\u0172\1\0"+
    "\1\u0172\22\0\25\u0172\1\0\1\u0171\2\0\1\u0172\1\74"+
    "\1\u0172\1\0\1\u0172\22\0\1\u0173\24\u0172\1\0\1\u0171"+
    "\2\0\1\u0172\1\74\1\u0172\1\0\1\u0172\22\0\5\u0172"+
    "\1\u0174\17\u0172\1\0\1\u016e\2\0\1\u016f\1\7\1\u016f"+
    "\1\0\1\u016f\13\0\1\56\6\0\3\u016f\1\u0175\21\u016f"+
    "\1\0\1\u0176\2\0\1\u0176\1\0\1\u0176\1\0\1\u0176"+
    "\13\0\1\56\6\0\25\u0176\1\0\1\u0176\2\0\1\u0177"+
    "\1\7\1\u0177\1\0\1\u0177\13\0\1\56\6\0\25\u0177"+
    "\1\0\1\u0178\2\0\1\u0176\1\0\1\u0176\1\0\1\u0176"+
    "\13\0\1\56\6\0\25\u0176\1\0\1\u0179\2\0\1\u0179"+
    "\1\0\1\u0179\1\0\1\u0179\22\0\25\u0179\1\0\1\u0179"+
    "\2\0\1\u017a\1\74\1\u017a\1\0\1\u017a\22\0\25\u017a"+
    "\1\0\1\u0179\2\0\1\u017a\1\74\1\u017a\1\0\1\u017a"+
    "\22\0\5\u017a\1\u017b\17\u017a\1\0\1\u0176\2\0\1\u0177"+
    "\1\7\1\u0177\1\0\1\u0177\13\0\1\56\6\0\1\u017c"+
    "\24\u0177\1\0\1\u017d\2\0\1\u017d\1\0\1\u017d\1\0"+
    "\1\u017d\13\0\1\56\6\0\25\u017d\1\0\1\u017d\2\0"+
    "\1\u017e\1\7\1\u017e\1\0\1\u017e\13\0\1\56\6\0"+
    "\25\u017e\1\0\1\u017f\2\0\1\u017d\1\0\1\u017d\1\0"+
    "\1\u017d\13\0\1\56\6\0\25\u017d\1\0\1\u0180\2\0"+
    "\1\u0180\1\0\1\u0180\1\0\1\u0180\22\0\25\u0180\1\0"+
    "\1\u0180\2\0\1\u0181\1\74\1\u0181\1\0\1\u0181\22\0"+
    "\25\u0181\1\0\1\u0180\2\0\1\u0181\1\74\1\u0181\1\0"+
    "\1\u0181\22\0\2\u0181\1\u0182\22\u0181\1\0\1\u0183\2\0"+
    "\1\u0183\1\0\1\u0183\1\0\1\u0183\13\0\1\56\6\0"+
    "\25\u0183\1\0\1\u0183\2\0\1\u0184\1\7\1\u0184\1\0"+
    "\1\u0184\13\0\1\56\6\0\25\u0184\1\0\1\u0185\2\0"+
    "\1\u0183\1\0\1\u0183\1\0\1\u0183\13\0\1\56\6\0"+
    "\25\u0183\1\0\1\u0186\2\0\1\u0186\1\0\1\u0186\1\0"+
    "\1\u0186\22\0\25\u0186\1\0\1\u0186\2\0\1\u0187\1\74"+
    "\1\u0187\1\0\1\u0187\22\0\25\u0187\1\0\1\u0188\2\0"+
    "\1\u0188\1\0\1\u0188\1\0\1\u0188\13\0\1\56\6\0"+
    "\25\u0188\1\0\1\u0188\2\0\1\u0189\1\7\1\u0189\1\0"+
    "\1\u0189\13\0\1\56\6\0\25\u0189\1\0\1\u018a\2\0"+
    "\1\u0188\1\0\1\u0188\1\0\1\u0188\13\0\1\56\6\0"+
    "\25\u0188\1\0\1\u018b\2\0\1\u018b\1\0\1\u018b\1\0"+
    "\1\u018b\22\0\25\u018b\1\0\1\u018b\2\0\1\u018c\1\74"+
    "\1\u018c\1\0\1\u018c\22\0\25\u018c\1\0\1\u018d\2\0"+
    "\1\u018d\1\0\1\u018d\1\0\1\u018d\13\0\1\56\6\0"+
    "\25\u018d\1\0\1\u018d\2\0\1\u018e\1\7\1\u018e\1\0"+
    "\1\u018e\13\0\1\56\6\0\25\u018e\1\0\1\u018f\2\0"+
    "\1\u018d\1\0\1\u018d\1\0\1\u018d\13\0\1\56\6\0"+
    "\25\u018d\1\0\1\u0190\2\0\1\u0190\1\0\1\u0190\1\0"+
    "\1\u0190\22\0\25\u0190\1\0\1\u0190\2\0\1\u0191\1\74"+
    "\1\u0191\1\0\1\u0191\22\0\25\u0191\1\0\1\u0192\2\0"+
    "\1\u0192\1\0\1\u0192\1\0\1\u0192\13\0\1\56\6\0"+
    "\25\u0192\1\0\1\u0192\2\0\1\u0193\1\7\1\u0193\1\0"+
    "\1\u0193\13\0\1\56\6\0\25\u0193\1\0\1\u0194\2\0"+
    "\1\u0192\1\0\1\u0192\1\0\1\u0192\13\0\1\56\6\0"+
    "\25\u0192\1\0\1\u0195\2\0\1\u0195\1\0\1\u0195\1\0"+
    "\1\u0195\22\0\25\u0195\1\0\1\u0195\2\0\1\u0196\1\74"+
    "\1\u0196\1\0\1\u0196\22\0\25\u0196\1\0\1\u0197\2\0"+
    "\1\u0197\1\0\1\u0197\1\0\1\u0197\13\0\1\56\6\0"+
    "\25\u0197\1\0\1\u0197\2\0\1\u0198\1\7\1\u0198\1\0"+
    "\1\u0198\13\0\1\56\6\0\25\u0198\1\0\1\u0199\2\0"+
    "\1\u0197\1\0\1\u0197\1\0\1\u0197\13\0\1\56\6\0"+
    "\25\u0197\1\0\1\u019a\2\0\1\u019a\1\0\1\u019a\1\0"+
    "\1\u019a\22\0\25\u019a\1\0\1\u019a\2\0\1\u019b\1\74"+
    "\1\u019b\1\0\1\u019b\22\0\25\u019b\1\0\1\u019c\2\0"+
    "\1\u019c\1\0\1\u019c\1\0\1\u019c\13\0\1\56\6\0"+
    "\25\u019c\1\0\1\u019c\2\0\1\u019d\1\7\1\u019d\1\0"+
    "\1\u019d\13\0\1\56\6\0\25\u019d\1\0\1\u019e\2\0"+
    "\1\u019c\1\0\1\u019c\1\0\1\u019c\13\0\1\56\6\0"+
    "\25\u019c\1\0\1\u019f\2\0\1\u019f\1\0\1\u019f\1\0"+
    "\1\u019f\22\0\25\u019f\1\0\1\u019f\2\0\1\u01a0\1\74"+
    "\1\u01a0\1\0\1\u01a0\22\0\25\u01a0\1\0\1\u01a1\2\0"+
    "\1\u01a1\1\0\1\u01a1\1\0\1\u01a1\13\0\1\56\6\0"+
    "\25\u01a1\1\0\1\u01a1\2\0\1\u01a2\1\7\1\u01a2\1\0"+
    "\1\u01a2\13\0\1\56\6\0\25\u01a2\1\0\1\u01a3\2\0"+
    "\1\u01a1\1\0\1\u01a1\1\0\1\u01a1\13\0\1\56\6\0"+
    "\25\u01a1\1\0\1\u01a4\2\0\1\u01a4\1\0\1\u01a4\1\0"+
    "\1\u01a4\22\0\25\u01a4\1\0\1\u01a4\2\0\1\u01a5\1\74"+
    "\1\u01a5\1\0\1\u01a5\22\0\25\u01a5\1\0\1\u01a6\2\0"+
    "\1\u01a6\1\0\1\u01a6\1\0\1\u01a6\13\0\1\56\6\0"+
    "\25\u01a6\1\0\1\u01a6\2\0\1\u01a7\1\7\1\u01a7\1\0"+
    "\1\u01a7\13\0\1\56\6\0\25\u01a7\1\0\1\u01a8\2\0"+
    "\1\u01a6\1\0\1\u01a6\1\0\1\u01a6\13\0\1\56\6\0"+
    "\25\u01a6\1\0\1\u01a9\2\0\1\u01a9\1\0\1\u01a9\1\0"+
    "\1\u01a9\22\0\25\u01a9\1\0\1\u01a9\2\0\1\u01aa\1\74"+
    "\1\u01aa\1\0\1\u01aa\22\0\25\u01aa\1\0\1\u01ab\2\0"+
    "\1\u01ab\1\0\1\u01ab\1\0\1\u01ab\13\0\1\56\6\0"+
    "\25\u01ab\1\0\1\u01ab\2\0\1\u01ac\1\7\1\u01ac\1\0"+
    "\1\u01ac\13\0\1\56\6\0\25\u01ac\1\0\1\u01ad\2\0"+
    "\1\u01ab\1\0\1\u01ab\1\0\1\u01ab\13\0\1\56\6\0"+
    "\25\u01ab\1\0\1\u01ae\2\0\1\u01ae\1\0\1\u01ae\1\0"+
    "\1\u01ae\22\0\25\u01ae\1\0\1\u01ae\2\0\1\u01af\1\74"+
    "\1\u01af\1\0\1\u01af\22\0\25\u01af\1\0\1\u01b0\2\0"+
    "\1\u01b0\1\0\1\u01b0\1\0\1\u01b0\13\0\1\56\6\0"+
    "\25\u01b0\1\0\1\u01b0\2\0\1\u01b1\1\7\1\u01b1\1\0"+
    "\1\u01b1\13\0\1\56\6\0\25\u01b1\1\0\1\u01b2\2\0"+
    "\1\u01b0\1\0\1\u01b0\1\0\1\u01b0\13\0\1\56\6\0"+
    "\25\u01b0\1\0\1\u01b3\2\0\1\u01b3\1\0\1\u01b3\1\0"+
    "\1\u01b3\22\0\25\u01b3\1\0\1\u01b3\2\0\1\u01b4\1\74"+
    "\1\u01b4\1\0\1\u01b4\22\0\25\u01b4\1\0\1\u01b5\2\0"+
    "\1\u01b5\1\0\1\u01b5\1\0\1\u01b5\13\0\1\56\6\0"+
    "\25\u01b5\1\0\1\u01b5\2\0\1\u01b6\1\7\1\u01b6\1\0"+
    "\1\u01b6\13\0\1\56\6\0\25\u01b6\1\0\1\u01b7\2\0"+
    "\1\u01b5\1\0\1\u01b5\1\0\1\u01b5\13\0\1\56\6\0"+
    "\25\u01b5\1\0\1\u01b8\2\0\1\u01b8\1\0\1\u01b8\1\0"+
    "\1\u01b8\22\0\25\u01b8\1\0\1\u01b8\2\0\1\u01b9\1\74"+
    "\1\u01b9\1\0\1\u01b9\22\0\25\u01b9\1\0\1\u01ba\2\0"+
    "\1\u01ba\1\0\1\u01ba\1\0\1\u01ba\13\0\1\56\6\0"+
    "\25\u01ba\1\0\1\u01ba\2\0\1\u01bb\1\7\1\u01bb\1\0"+
    "\1\u01bb\13\0\1\56\6\0\25\u01bb\1\0\1\u01bc\2\0"+
    "\1\u01ba\1\0\1\u01ba\1\0\1\u01ba\13\0\1\56\6\0"+
    "\25\u01ba\1\0\1\u01bd\2\0\1\u01bd\1\0\1\u01bd\1\0"+
    "\1\u01bd\22\0\25\u01bd\1\0\1\u01bd\2\0\1\u01be\1\74"+
    "\1\u01be\1\0\1\u01be\22\0\25\u01be\1\0\1\u01bf\2\0"+
    "\1\u01bf\1\0\1\u01bf\1\0\1\u01bf\13\0\1\56\6\0"+
    "\25\u01bf\1\0\1\u01bf\2\0\1\u01c0\1\7\1\u01c0\1\0"+
    "\1\u01c0\13\0\1\56\6\0\25\u01c0\1\0\1\u01c1\2\0"+
    "\1\u01bf\1\0\1\u01bf\1\0\1\u01bf\13\0\1\56\6\0"+
    "\25\u01bf\1\0\1\u01c2\2\0\1\u01c2\1\0\1\u01c2\1\0"+
    "\1\u01c2\22\0\25\u01c2\1\0\1\u01c2\2\0\1\u01c3\1\74"+
    "\1\u01c3\1\0\1\u01c3\22\0\25\u01c3\1\0\1\u01c4\2\0"+
    "\1\u01c4\1\0\1\u01c4\1\0\1\u01c4\13\0\1\56\6\0"+
    "\25\u01c4\1\0\1\u01c4\2\0\1\u01c5\1\7\1\u01c5\1\0"+
    "\1\u01c5\13\0\1\56\6\0\25\u01c5\1\0\1\u01c6\2\0"+
    "\1\u01c4\1\0\1\u01c4\1\0\1\u01c4\13\0\1\56\6\0"+
    "\25\u01c4\1\0\1\u01c7\2\0\1\u01c7\1\0\1\u01c7\1\0"+
    "\1\u01c7\22\0\25\u01c7\1\0\1\u01c7\2\0\1\u01c8\1\74"+
    "\1\u01c8\1\0\1\u01c8\22\0\25\u01c8\1\0\1\u01c9\2\0"+
    "\1\u01c9\1\0\1\u01c9\1\0\1\u01c9\13\0\1\56\6\0"+
    "\25\u01c9\1\0\1\u01c9\2\0\1\u01ca\1\7\1\u01ca\1\0"+
    "\1\u01ca\13\0\1\56\6\0\25\u01ca\1\0\1\u01cb\2\0"+
    "\1\u01c9\1\0\1\u01c9\1\0\1\u01c9\13\0\1\56\6\0"+
    "\25\u01c9\1\0\1\u01cc\2\0\1\u01cc\1\0\1\u01cc\1\0"+
    "\1\u01cc\22\0\25\u01cc\1\0\1\u01cc\2\0\1\u01cd\1\74"+
    "\1\u01cd\1\0\1\u01cd\22\0\25\u01cd\1\0\1\u01ce\2\0"+
    "\1\u01ce\1\0\1\u01ce\1\0\1\u01ce\13\0\1\56\6\0"+
    "\25\u01ce\1\0\1\u01ce\2\0\1\u01cf\1\7\1\u01cf\1\0"+
    "\1\u01cf\13\0\1\56\6\0\25\u01cf\1\0\1\u01d0\2\0"+
    "\1\u01ce\1\0\1\u01ce\1\0\1\u01ce\13\0\1\56\6\0"+
    "\25\u01ce\1\0\1\u01d1\2\0\1\u01d1\1\0\1\u01d1\1\0"+
    "\1\u01d1\22\0\25\u01d1\1\0\1\u01d1\2\0\1\u01d2\1\74"+
    "\1\u01d2\1\0\1\u01d2\22\0\25\u01d2\1\0\1\u01d3\2\0"+
    "\1\u01d3\1\0\1\u01d3\1\0\1\u01d3\13\0\1\56\6\0"+
    "\25\u01d3\1\0\1\u01d3\2\0\1\u01d4\1\7\1\u01d4\1\0"+
    "\1\u01d4\13\0\1\56\6\0\25\u01d4\1\0\1\u01d5\2\0"+
    "\1\u01d3\1\0\1\u01d3\1\0\1\u01d3\13\0\1\56\6\0"+
    "\25\u01d3\1\0\1\u01d6\2\0\1\u01d6\1\0\1\u01d6\1\0"+
    "\1\u01d6\22\0\25\u01d6\1\0\1\u01d6\2\0\1\u01d7\1\74"+
    "\1\u01d7\1\0\1\u01d7\22\0\25\u01d7\1\0\1\u01d8\2\0"+
    "\1\u01d8\1\0\1\u01d8\1\0\1\u01d8\13\0\1\56\6\0"+
    "\25\u01d8\1\0\1\u01d8\2\0\1\u01d9\1\7\1\u01d9\1\0"+
    "\1\u01d9\13\0\1\56\6\0\25\u01d9\1\0\1\u01da\2\0"+
    "\1\u01d8\1\0\1\u01d8\1\0\1\u01d8\13\0\1\56\6\0"+
    "\25\u01d8\1\0\1\u01db\2\0\1\u01db\1\0\1\u01db\1\0"+
    "\1\u01db\22\0\25\u01db\1\0\1\u01db\2\0\1\u01dc\1\74"+
    "\1\u01dc\1\0\1\u01dc\22\0\25\u01dc\1\0\1\u01dd\2\0"+
    "\1\u01dd\1\0\1\u01dd\1\0\1\u01dd\13\0\1\56\6\0"+
    "\25\u01dd\1\0\1\u01dd\2\0\1\u01de\1\7\1\u01de\1\0"+
    "\1\u01de\13\0\1\56\6\0\25\u01de\1\0\1\u01df\2\0"+
    "\1\u01dd\1\0\1\u01dd\1\0\1\u01dd\13\0\1\56\6\0"+
    "\25\u01dd\1\0\1\u01e0\2\0\1\u01e0\1\0\1\u01e0\1\0"+
    "\1\u01e0\22\0\25\u01e0\1\0\1\u01e0\2\0\1\u01e1\1\74"+
    "\1\u01e1\1\0\1\u01e1\22\0\25\u01e1\1\0\1\u01e2\2\0"+
    "\1\u01e2\1\0\1\u01e2\1\0\1\u01e2\13\0\1\56\6\0"+
    "\25\u01e2\1\0\1\u01e2\2\0\1\u01e3\1\7\1\u01e3\1\0"+
    "\1\u01e3\13\0\1\56\6\0\25\u01e3\1\0\1\u01e4\2\0"+
    "\1\u01e2\1\0\1\u01e2\1\0\1\u01e2\13\0\1\56\6\0"+
    "\25\u01e2\1\0\1\u01e5\2\0\1\u01e5\1\0\1\u01e5\1\0"+
    "\1\u01e5\22\0\25\u01e5\1\0\1\u01e5\2\0\1\u01e6\1\74"+
    "\1\u01e6\1\0\1\u01e6\22\0\25\u01e6\24\0\1\56\37\0"+
    "\3\7\1\0\1\7\13\0\1\56\6\0\25\7\1\0"+
    "\1\135\22\0\1\56\34\0\1\u01e7\2\0\1\u01e7\1\0"+
    "\1\u01e7\1\0\1\u01e7\22\0\25\u01e7\1\0\1\u01e7\2\0"+
    "\1\u01e8\1\74\1\u01e8\1\0\1\u01e8\22\0\25\u01e8";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19872];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\7\1\1\11\2\1\11\11\2\1\2\11"+
    "\17\1\2\0\3\1\1\0\3\1\1\0\1\1\1\0"+
    "\5\11\1\0\47\1\1\11\57\1\1\0\64\1\1\0"+
    "\57\1\1\0\145\1\1\11\211\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;
    modelos.InformacionLexema c = new modelos.InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARRIBA;
          }
        case 87: break;
        case 14: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_O;
          }
        case 88: break;
        case 23: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMA;
          }
        case 89: break;
        case 46: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LEER;
          }
        case 90: break;
        case 3: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO;
          }
        case 91: break;
        case 65: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_INICIAR;
          }
        case 92: break;
        case 7: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_MAYUS;
          }
        case 93: break;
        case 51: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ATRAS;
          }
        case 94: break;
        case 70: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CAPTURA;
          }
        case 95: break;
        case 37: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR_ARREGLO;
          }
        case 96: break;
        case 4: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MAS;
          }
        case 97: break;
        case 6: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR;
          }
        case 98: break;
        case 61: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_APAGAR;
          }
        case 99: break;
        case 32: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DESIGUAL;
          }
        case 100: break;
        case 36: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SI;
          }
        case 101: break;
        case 62: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SEGUIR;
          }
        case 102: break;
        case 8: 
          { /*Ignore*/
          }
        case 103: break;
        case 57: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CADENA;
          }
        case 104: break;
        case 83: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VERDADERO;
          }
        case 105: break;
        case 55: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_GIRAR;
          }
        case 106: break;
        case 80: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ADELANTE;
          }
        case 107: break;
        case 21: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR;
          }
        case 108: break;
        case 39: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIN;
          }
        case 109: break;
        case 18: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_IZQ;
          }
        case 110: break;
        case 59: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARGAR;
          }
        case 111: break;
        case 20: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR;
          }
        case 112: break;
        case 12: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_DIVISION;
          }
        case 113: break;
        case 67: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ESPERAR;
          }
        case 114: break;
        case 42: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NULO;
          }
        case 115: break;
        case 64: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECIMAL;
          }
        case 116: break;
        case 49: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FALSO;
          }
        case 117: break;
        case 48: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CICLO;
          }
        case 118: break;
        case 74: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_MIENTRAS;
          }
        case 119: break;
        case 47: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CORTO;
          }
        case 120: break;
        case 52: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ABAJO;
          }
        case 121: break;
        case 35: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NO;
          }
        case 122: break;
        case 13: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_Y;
          }
        case 123: break;
        case 9: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMILLA_SIMPLE;
          }
        case 124: break;
        case 53: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARAV;
          }
        case 125: break;
        case 33: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA;
          }
        case 126: break;
        case 31: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR_QUE;
          }
        case 127: break;
        case 86: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DIRECCIONAR;
          }
        case 128: break;
        case 66: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FUNCION;
          }
        case 129: break;
        case 77: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_EJECUTAR;
          }
        case 130: break;
        case 50: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENTERO;
          }
        case 131: break;
        case 56: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VIDEO;
          }
        case 132: break;
        case 43: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARA;
          }
        case 133: break;
        case 40: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PIN;
          }
        case 134: break;
        case 78: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CALIBRAR;
          }
        case 135: break;
        case 75: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_BOOLEANO;
          }
        case 136: break;
        case 45: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIJO;
          }
        case 137: break;
        case 15: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_NEGACION;
          }
        case 138: break;
        case 44: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RUTA;
          }
        case 139: break;
        case 5: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MENOS;
          }
        case 140: break;
        case 41: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_HAZ;
          }
        case 141: break;
        case 16: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MODULO;
          }
        case 142: break;
        case 27: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_EXPONENTE;
          }
        case 143: break;
        case 79: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ACELERAR;
          }
        case 144: break;
        case 2: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR;
          }
        case 145: break;
        case 19: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_DER;
          }
        case 146: break;
        case 28: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return CADENA_TEXTO;
          }
        case 147: break;
        case 71: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DETENER;
          }
        case 148: break;
        case 68: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RETORNO;
          }
        case 149: break;
        case 30: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR_QUE;
          }
        case 150: break;
        case 85: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECLARACION;
          }
        case 151: break;
        case 34: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA_MAYUS;
          }
        case 152: break;
        case 63: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARREGLO;
          }
        case 153: break;
        case 72: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DERECHA;
          }
        case 154: break;
        case 10: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ASIGNACION;
          }
        case 155: break;
        case 82: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PRINCIPAL;
          }
        case 156: break;
        case 1: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_PUNTOS;
          }
        case 157: break;
        case 84: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IZQUIERDA;
          }
        case 158: break;
        case 25: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ID_NUM;
          }
        case 159: break;
        case 76: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENCENDER;
          }
        case 160: break;
        case 26: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_DECIMAL;
          }
        case 161: break;
        case 54: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LARGO;
          }
        case 162: break;
        case 69: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_REGRESA;
          }
        case 163: break;
        case 29: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_IGUALDAD;
          }
        case 164: break;
        case 22: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DOS_PUNTOS;
          }
        case 165: break;
        case 81: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IMPRIMIR;
          }
        case 166: break;
        case 11: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_POR;
          }
        case 167: break;
        case 73: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARACTER;
          }
        case 168: break;
        case 17: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PUNTO_COMA;
          }
        case 169: break;
        case 38: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR_ARROBA_NUM;
          }
        case 170: break;
        case 24: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ARROBA;
          }
        case 171: break;
        case 58: 
          { 
          }
        case 172: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
