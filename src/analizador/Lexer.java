/* The following code was generated by JFlex 1.4.3 on 25/05/21 10:52 */

package analizador;
import java.io.*;
import static analizador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25/05/21 10:52 from the specification file
 * <tt>C:/analizador/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\13\2\0\1\11\22\0\1\11\1\21\3\0\1\22"+
    "\1\17\1\12\1\24\1\25\1\15\1\2\1\31\1\3\1\7\1\16"+
    "\12\1\1\30\1\23\1\27\1\14\1\26\1\0\1\32\32\5\4\0"+
    "\1\6\1\0\1\40\1\50\1\37\1\41\1\10\1\43\1\53\1\54"+
    "\1\42\1\52\1\4\1\51\1\46\1\33\1\36\1\47\1\56\1\35"+
    "\1\45\1\34\1\44\1\57\3\4\1\55\1\0\1\20\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\17\5\1\0\1\1\1\2\1\0\1\6\1\5"+
    "\1\27\1\30\1\0\3\5\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\25\5\1\37\13\5\2\30\2\6"+
    "\1\5\1\30\34\5\1\40\6\5\1\41\4\5\1\42"+
    "\2\5\1\6\1\0\1\5\1\30\4\5\1\43\2\5"+
    "\1\44\27\5\1\45\4\5\1\46\1\5\1\47\4\5"+
    "\1\6\1\0\1\5\1\30\6\5\1\50\5\5\1\51"+
    "\1\52\5\5\1\53\10\5\1\54\4\5\1\55\1\5"+
    "\1\56\1\57\1\5\1\60\1\0\1\5\1\30\1\61"+
    "\6\5\1\62\1\63\3\5\1\64\2\5\1\65\11\5"+
    "\1\66\4\5\1\67\1\5\1\30\1\5\1\70\1\5"+
    "\1\71\1\72\1\5\1\73\1\5\1\74\2\5\1\75"+
    "\1\76\1\77\2\5\1\100\2\5\1\101\4\5\1\67"+
    "\1\5\1\30\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\2\5\1\110\1\5\1\111\1\5\1\112\1\5\1\67"+
    "\1\5\1\30\2\5\1\113\1\114\1\115\1\5\1\30"+
    "\3\5\1\30\1\116\1\117\1\5\1\30\1\5\1\30"+
    "\1\5\1\30\1\5\1\30\1\5\1\30\1\5\1\30"+
    "\1\5\1\30\1\5\1\30\1\5\1\30\1\5\1\30"+
    "\1\5\1\30\1\5\1\30\1\5\1\30\1\5\1\30"+
    "\1\5\1\30\1\5\1\30\1\5\1\30\1\5\1\30"+
    "\1\5\1\30\1\5\1\30\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\60\0\u01b0\0\u01e0\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\u0210\0\u0240\0\60"+
    "\0\60\0\60\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0150\0\u0540\0\220\0\u0570\0\u05a0\0\u05d0\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u01b0\0\60\0\60"+
    "\0\60\0\60\0\60\0\u05d0\0\u0720\0\u0750\0\u0780\0\u07b0"+
    "\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930"+
    "\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0"+
    "\0\u0ae0\0\u05d0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0660\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u0db0"+
    "\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u0db0\0\u1470"+
    "\0\u14a0\0\u14d0\0\u1500\0\u0db0\0\u1530\0\u1560\0\u1590\0\u15c0"+
    "\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u15f0\0\u1710"+
    "\0\u1740\0\u15f0\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860"+
    "\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u15f0\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0"+
    "\0\u15f0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00"+
    "\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1e00"+
    "\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u1e00\0\u1e00\0\u2070"+
    "\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u1e00\0\u2160\0\u2190\0\u21c0"+
    "\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0\0\u1e00\0\u22e0\0\u2310"+
    "\0\u2340\0\u2370\0\u1e00\0\u23a0\0\u1e00\0\u1e00\0\u23d0\0\u1e00"+
    "\0\u2400\0\u2430\0\u2460\0\u2430\0\u2490\0\u24c0\0\u24f0\0\u2520"+
    "\0\u2550\0\u2580\0\u2430\0\u2430\0\u25b0\0\u25e0\0\u2610\0\u2430"+
    "\0\u2640\0\u2670\0\u2430\0\u26a0\0\u26d0\0\u2700\0\u2730\0\u2760"+
    "\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2430\0\u2850\0\u2880\0\u28b0"+
    "\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0\0\u2940\0\u29d0\0\u2940"+
    "\0\u2940\0\u2a00\0\u2940\0\u2a30\0\u2940\0\u2a60\0\u2a90\0\u2940"+
    "\0\u2940\0\u2940\0\u2ac0\0\u2af0\0\u2940\0\u2b20\0\u2b50\0\u2940"+
    "\0\u2b80\0\u2bb0\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2c70"+
    "\0\u2c70\0\u2c70\0\u2c70\0\u2c70\0\u2c70\0\u2cd0\0\u2d00\0\u2c70"+
    "\0\u2d30\0\u2c70\0\u2d60\0\u2c70\0\u2d90\0\60\0\u2dc0\0\u2df0"+
    "\0\u2e20\0\u2e50\0\u2dc0\0\u2dc0\0\u2dc0\0\u2e80\0\u2eb0\0\u2ee0"+
    "\0\u2f10\0\u2f40\0\u2f70\0\u2f40\0\u2f40\0\u2fa0\0\u2fd0\0\u3000"+
    "\0\u3030\0\u3060\0\u3090\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180"+
    "\0\u31b0\0\u31e0\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300"+
    "\0\u3330\0\u3360\0\u3390\0\u33c0\0\u33f0\0\u3420\0\u3450\0\u3480"+
    "\0\u34b0\0\u34e0\0\u3510\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600"+
    "\0\u3630\0\u3660\0\u3690\0\u36c0\0\u36f0\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\1\12\1\13\1\12\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\6\1\34\1\6\1\35\1\36"+
    "\1\37\1\40\1\41\1\6\1\42\1\43\1\44\1\45"+
    "\1\46\1\6\1\47\1\50\2\6\1\51\61\0\1\3"+
    "\2\0\3\7\1\52\1\53\22\0\25\7\1\0\1\54"+
    "\5\0\1\52\1\55\50\0\1\54\1\0\1\56\3\0"+
    "\1\52\1\55\50\0\1\57\2\0\1\57\1\7\1\57"+
    "\1\0\1\57\22\0\25\57\1\0\1\7\2\0\3\7"+
    "\1\0\1\7\22\0\25\7\1\0\1\60\57\0\1\61"+
    "\2\62\1\57\1\7\1\57\1\0\1\57\22\0\1\63"+
    "\11\57\1\64\4\57\1\65\5\57\12\66\1\67\45\66"+
    "\14\0\1\70\57\0\1\71\57\0\1\72\11\0\1\73"+
    "\32\0\1\57\2\0\1\57\1\7\1\57\1\0\1\57"+
    "\22\0\3\57\1\74\5\57\1\75\13\57\1\0\1\57"+
    "\2\0\1\57\1\7\1\57\1\0\1\76\22\0\11\57"+
    "\1\77\13\57\1\0\1\57\2\0\1\57\1\7\1\57"+
    "\1\0\1\57\22\0\3\57\1\100\1\57\1\101\1\57"+
    "\1\102\15\57\1\0\1\57\2\0\1\57\1\7\1\57"+
    "\1\0\1\57\22\0\1\57\1\103\1\104\1\57\1\105"+
    "\1\57\1\106\5\57\1\107\1\110\7\57\1\0\1\57"+
    "\2\0\1\57\1\7\1\57\1\0\1\111\22\0\7\57"+
    "\1\112\15\57\1\0\1\57\2\0\1\57\1\7\1\57"+
    "\1\0\1\57\22\0\1\113\12\57\1\114\6\57\1\115"+
    "\2\57\1\0\1\57\2\0\1\57\1\7\1\57\1\0"+
    "\1\57\22\0\5\57\1\116\1\57\1\117\1\57\1\120"+
    "\13\57\1\0\1\57\2\0\1\57\1\7\1\57\1\0"+
    "\1\121\22\0\7\57\1\122\15\57\1\0\1\57\2\0"+
    "\1\57\1\7\1\57\1\0\1\57\22\0\7\57\1\123"+
    "\15\57\1\0\1\57\2\0\1\57\1\7\1\57\1\0"+
    "\1\57\22\0\2\57\1\124\2\57\1\125\1\57\1\126"+
    "\15\57\1\0\1\57\2\0\1\57\1\7\1\57\1\0"+
    "\1\57\22\0\3\57\1\127\21\57\1\0\1\57\2\0"+
    "\1\57\1\7\1\57\1\0\1\130\22\0\5\57\1\131"+
    "\17\57\1\0\1\57\2\0\1\57\1\7\1\57\1\0"+
    "\1\57\22\0\7\57\1\132\15\57\1\0\1\57\2\0"+
    "\1\57\1\7\1\57\1\0\1\57\22\0\5\57\1\133"+
    "\17\57\1\0\1\57\2\0\1\57\1\7\1\57\1\0"+
    "\1\134\22\0\7\57\1\135\15\57\1\0\1\136\2\62"+
    "\3\7\1\0\1\7\22\0\25\7\1\0\1\137\2\62"+
    "\54\0\3\140\1\141\7\140\1\0\44\140\1\0\1\142"+
    "\2\0\1\142\1\7\1\142\1\0\1\142\22\0\25\142"+
    "\1\0\1\60\6\0\1\55\50\0\1\143\2\0\1\142"+
    "\1\7\1\142\1\0\1\142\22\0\25\142\1\0\1\137"+
    "\57\0\1\142\2\0\1\142\1\7\1\142\1\0\1\142"+
    "\22\0\1\142\1\144\2\142\1\145\20\142\1\0\1\142"+
    "\2\0\1\142\1\7\1\142\1\0\1\142\22\0\14\142"+
    "\1\146\10\142\1\0\1\142\2\0\1\142\1\7\1\142"+
    "\1\0\1\147\22\0\25\142\1\0\1\142\2\0\1\142"+
    "\1\7\1\142\1\0\1\142\22\0\16\142\1\150\6\142"+
    "\1\0\1\142\2\0\1\142\1\7\1\142\1\0\1\142"+
    "\22\0\1\142\1\151\16\142\1\152\4\142\1\0\1\142"+
    "\2\0\1\142\1\7\1\142\1\0\1\142\22\0\1\142"+
    "\1\153\23\142\1\0\1\142\2\0\1\142\1\7\1\142"+
    "\1\0\1\142\22\0\2\142\1\154\22\142\1\0\1\142"+
    "\2\0\1\142\1\7\1\142\1\0\1\142\22\0\2\142"+
    "\1\155\3\142\1\156\5\142\1\157\1\142\1\160\6\142"+
    "\1\0\1\142\2\0\1\142\1\7\1\142\1\0\1\142"+
    "\22\0\4\142\1\161\20\142\1\0\1\142\2\0\1\142"+
    "\1\7\1\142\1\0\1\142\22\0\2\142\1\162\22\142"+
    "\1\0\1\142\2\0\1\142\1\7\1\142\1\0\1\142"+
    "\22\0\2\142\1\163\22\142\1\0\1\142\2\0\1\142"+
    "\1\7\1\142\1\0\1\164\22\0\25\142\1\0\1\142"+
    "\2\0\1\142\1\7\1\142\1\0\1\165\22\0\25\142"+
    "\1\0\1\142\2\0\1\142\1\7\1\142\1\0\1\142"+
    "\22\0\5\142\1\166\17\142\1\0\1\142\2\0\1\142"+
    "\1\7\1\142\1\0\1\142\22\0\5\142\1\167\17\142"+
    "\1\0\1\142\2\0\1\142\1\7\1\142\1\0\1\142"+
    "\22\0\1\142\1\170\1\171\1\142\1\172\20\142\1\0"+
    "\1\142\2\0\1\142\1\7\1\142\1\0\1\142\22\0"+
    "\2\142\1\173\22\142\1\0\1\142\2\0\1\142\1\7"+
    "\1\142\1\0\1\142\22\0\7\142\1\174\15\142\1\0"+
    "\1\142\2\0\1\142\1\7\1\142\1\0\1\142\22\0"+
    "\14\142\1\175\10\142\1\0\1\142\2\0\1\142\1\7"+
    "\1\142\1\0\1\142\22\0\23\142\1\176\1\142\1\0"+
    "\1\142\2\0\1\142\1\7\1\142\1\0\1\142\22\0"+
    "\16\142\1\177\6\142\1\0\1\142\2\0\1\142\1\7"+
    "\1\142\1\0\1\142\22\0\1\200\16\142\1\201\5\142"+
    "\1\0\1\142\2\0\1\142\1\7\1\142\1\0\1\142"+
    "\22\0\1\202\24\142\1\0\1\142\2\0\1\142\1\7"+
    "\1\142\1\0\1\142\22\0\20\142\1\203\4\142\1\0"+
    "\1\142\2\0\1\142\1\7\1\142\1\0\1\204\22\0"+
    "\25\142\1\0\1\142\2\0\1\142\1\7\1\142\1\0"+
    "\1\142\22\0\7\142\1\205\15\142\1\0\1\142\2\0"+
    "\1\142\1\7\1\142\1\0\1\142\22\0\2\142\1\206"+
    "\22\142\1\0\1\142\2\0\1\142\1\7\1\142\1\0"+
    "\1\142\22\0\1\207\24\142\1\0\1\142\2\0\1\142"+
    "\1\7\1\142\1\0\1\142\22\0\3\142\1\210\21\142"+
    "\1\0\1\142\2\0\1\142\1\7\1\142\1\0\1\211"+
    "\22\0\25\142\1\0\1\142\2\0\1\142\1\7\1\142"+
    "\1\0\1\142\22\0\2\142\1\212\22\142\1\0\1\142"+
    "\2\0\1\142\1\7\1\142\1\0\1\142\22\0\2\142"+
    "\1\213\22\142\1\0\1\142\2\0\1\142\1\7\1\142"+
    "\1\0\1\142\22\0\22\142\1\214\2\142\1\0\1\142"+
    "\2\0\1\142\1\7\1\142\1\0\1\142\22\0\2\142"+
    "\1\215\22\142\1\0\1\142\2\0\1\142\1\7\1\142"+
    "\1\0\1\142\22\0\6\142\1\216\16\142\1\0\1\136"+
    "\2\0\3\7\1\0\1\7\22\0\25\7\13\140\1\0"+
    "\44\140\3\141\1\217\7\141\1\220\44\141\1\0\1\221"+
    "\2\0\1\221\1\7\1\221\1\0\1\221\22\0\25\221"+
    "\1\0\1\222\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\25\221\1\0\1\221\2\0\1\221\1\7\1\221"+
    "\1\0\1\223\22\0\25\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\224\22\0\25\221\1\0\1\221"+
    "\2\0\1\221\1\7\1\221\1\0\1\225\22\0\25\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\4\221\1\226\20\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\3\221\1\227\21\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\3\221\1\230\21\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\2\221\1\231\22\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\5\221\1\232\17\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\1\221\1\233\23\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\5\221\1\234\12\221\1\235\4\221\1\0\1\221"+
    "\2\0\1\221\1\7\1\221\1\0\1\236\22\0\25\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\1\221\1\237\23\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\7\221\1\240\15\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\16\221\1\241\6\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\5\221\1\242\17\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\243"+
    "\22\0\7\221\1\244\15\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\16\221\1\245\6\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\16\221\1\246\6\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\20\221\1\247\4\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\17\221\1\250\5\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\251\22\0\25\221\1\0\1\221"+
    "\2\0\1\221\1\7\1\221\1\0\1\252\22\0\25\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\7\221\1\253\6\221\1\254\6\221\1\0\1\221"+
    "\2\0\1\221\1\7\1\221\1\0\1\255\22\0\25\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\4\221\1\256\20\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\2\221\1\257\22\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\11\221\1\260\13\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\12\221\1\261\12\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\3\221\1\262\21\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\4\221\1\263\20\221"+
    "\1\0\1\221\2\0\1\221\1\7\1\221\1\0\1\221"+
    "\22\0\11\221\1\264\13\221\1\0\1\221\2\0\1\221"+
    "\1\7\1\221\1\0\1\221\22\0\1\265\24\221\1\0"+
    "\1\221\2\0\1\221\1\7\1\221\1\0\1\221\22\0"+
    "\1\266\24\221\1\0\1\221\2\0\1\221\1\7\1\221"+
    "\1\0\1\221\22\0\5\221\1\267\17\221\1\0\1\221"+
    "\2\0\1\221\1\7\1\221\1\0\1\221\22\0\16\221"+
    "\1\270\6\221\1\0\1\221\2\0\1\221\1\7\1\221"+
    "\1\0\1\221\22\0\2\221\1\271\22\221\1\0\1\221"+
    "\2\0\1\221\1\7\1\221\1\0\1\221\22\0\20\221"+
    "\1\272\4\221\1\0\1\221\2\0\1\221\1\7\1\221"+
    "\1\0\1\221\22\0\5\221\1\273\17\221\1\0\1\221"+
    "\2\0\1\221\1\7\1\221\1\0\1\221\22\0\6\221"+
    "\1\274\16\221\1\0\1\221\2\0\1\221\1\7\1\221"+
    "\1\0\1\275\22\0\25\221\3\141\1\276\7\141\1\220"+
    "\44\141\3\220\1\277\54\220\1\0\1\300\2\0\1\300"+
    "\1\7\1\300\1\0\1\300\22\0\25\300\1\0\1\301"+
    "\2\0\1\300\1\7\1\300\1\0\1\300\22\0\25\300"+
    "\1\0\1\300\2\0\1\300\1\7\1\300\1\0\1\300"+
    "\22\0\2\300\1\302\22\300\1\0\1\300\2\0\1\300"+
    "\1\7\1\300\1\0\1\300\22\0\1\303\24\300\1\0"+
    "\1\300\2\0\1\300\1\7\1\300\1\0\1\300\22\0"+
    "\2\300\1\304\22\300\1\0\1\300\2\0\1\300\1\7"+
    "\1\300\1\0\1\300\22\0\11\300\1\305\13\300\1\0"+
    "\1\300\2\0\1\300\1\7\1\300\1\0\1\300\22\0"+
    "\2\300\1\306\22\300\1\0\1\300\2\0\1\300\1\7"+
    "\1\300\1\0\1\307\22\0\25\300\1\0\1\300\2\0"+
    "\1\300\1\7\1\300\1\0\1\300\22\0\3\300\1\310"+
    "\21\300\1\0\1\300\2\0\1\300\1\7\1\300\1\0"+
    "\1\300\22\0\4\300\1\311\20\300\1\0\1\300\2\0"+
    "\1\300\1\7\1\300\1\0\1\300\22\0\5\300\1\312"+
    "\17\300\1\0\1\300\2\0\1\300\1\7\1\300\1\0"+
    "\1\300\22\0\1\313\24\300\1\0\1\300\2\0\1\300"+
    "\1\7\1\300\1\0\1\300\22\0\11\300\1\314\13\300"+
    "\1\0\1\300\2\0\1\300\1\7\1\300\1\0\1\300"+
    "\22\0\15\300\1\315\7\300\1\0\1\300\2\0\1\300"+
    "\1\7\1\300\1\0\1\300\22\0\3\300\1\316\21\300"+
    "\1\0\1\300\2\0\1\300\1\7\1\300\1\0\1\300"+
    "\22\0\12\300\1\317\12\300\1\0\1\300\2\0\1\300"+
    "\1\7\1\300\1\0\1\300\22\0\20\300\1\320\4\300"+
    "\1\0\1\300\2\0\1\300\1\7\1\300\1\0\1\300"+
    "\22\0\15\300\1\321\7\300\1\0\1\300\2\0\1\300"+
    "\1\7\1\300\1\0\1\322\22\0\25\300\1\0\1\300"+
    "\2\0\1\300\1\7\1\300\1\0\1\300\22\0\5\300"+
    "\1\323\17\300\1\0\1\300\2\0\1\300\1\7\1\300"+
    "\1\0\1\300\22\0\5\300\1\324\17\300\1\0\1\300"+
    "\2\0\1\300\1\7\1\300\1\0\1\300\22\0\3\300"+
    "\1\325\21\300\1\0\1\300\2\0\1\300\1\7\1\300"+
    "\1\0\1\300\22\0\1\326\24\300\1\0\1\300\2\0"+
    "\1\300\1\7\1\300\1\0\1\300\22\0\4\300\1\327"+
    "\20\300\1\0\1\300\2\0\1\300\1\7\1\300\1\0"+
    "\1\300\22\0\13\300\1\330\11\300\1\0\1\300\2\0"+
    "\1\300\1\7\1\300\1\0\1\300\22\0\5\300\1\331"+
    "\17\300\1\0\1\300\2\0\1\300\1\7\1\300\1\0"+
    "\1\300\22\0\4\300\1\332\20\300\1\0\1\300\2\0"+
    "\1\300\1\7\1\300\1\0\1\300\22\0\7\300\1\333"+
    "\15\300\1\0\1\300\2\0\1\300\1\7\1\300\1\0"+
    "\1\300\22\0\7\300\1\334\15\300\1\0\1\300\2\0"+
    "\1\300\1\7\1\300\1\0\1\300\22\0\7\300\1\335"+
    "\15\300\1\0\1\300\2\0\1\300\1\7\1\300\1\0"+
    "\1\300\22\0\3\300\1\336\21\300\1\0\1\300\2\0"+
    "\1\300\1\7\1\300\1\0\1\300\22\0\7\300\1\337"+
    "\15\300\1\0\1\300\2\0\1\300\1\7\1\300\1\0"+
    "\1\300\22\0\7\300\1\340\15\300\1\0\1\300\2\0"+
    "\1\300\1\7\1\300\1\0\1\300\22\0\1\300\1\341"+
    "\23\300\1\0\1\300\2\0\1\300\1\7\1\300\1\0"+
    "\1\300\22\0\4\300\1\342\20\300\1\0\1\300\2\0"+
    "\1\300\1\7\1\300\1\0\1\300\22\0\24\300\1\343"+
    "\1\0\1\300\2\0\1\300\1\7\1\300\1\0\1\344"+
    "\22\0\25\300\1\0\1\300\2\0\1\300\1\7\1\300"+
    "\1\0\1\300\22\0\3\300\1\345\21\300\1\0\1\300"+
    "\2\0\1\300\1\7\1\300\1\0\1\300\22\0\2\300"+
    "\1\346\22\300\1\0\1\300\2\0\1\300\1\7\1\300"+
    "\1\0\1\300\22\0\5\300\1\347\17\300\1\0\1\300"+
    "\2\0\1\300\1\7\1\300\1\0\1\300\22\0\3\300"+
    "\1\350\21\300\3\141\1\140\7\141\1\220\44\141\3\220"+
    "\1\351\54\220\1\0\1\352\2\0\1\352\1\7\1\352"+
    "\1\0\1\352\22\0\25\352\1\0\1\353\2\0\1\352"+
    "\1\7\1\352\1\0\1\352\22\0\25\352\1\0\1\352"+
    "\2\0\1\352\1\7\1\352\1\0\1\352\22\0\3\352"+
    "\1\354\21\352\1\0\1\352\2\0\1\352\1\7\1\352"+
    "\1\0\1\352\22\0\6\352\1\355\16\352\1\0\1\352"+
    "\2\0\1\352\1\7\1\352\1\0\1\352\22\0\5\352"+
    "\1\356\17\352\1\0\1\352\2\0\1\352\1\7\1\352"+
    "\1\0\1\352\22\0\1\352\1\357\23\352\1\0\1\352"+
    "\2\0\1\352\1\7\1\352\1\0\1\352\22\0\1\360"+
    "\24\352\1\0\1\352\2\0\1\352\1\7\1\352\1\0"+
    "\1\352\22\0\12\352\1\361\12\352\1\0\1\352\2\0"+
    "\1\352\1\7\1\352\1\0\1\352\22\0\1\352\1\362"+
    "\23\352\1\0\1\352\2\0\1\352\1\7\1\352\1\0"+
    "\1\352\22\0\2\352\1\363\22\352\1\0\1\352\2\0"+
    "\1\352\1\7\1\352\1\0\1\352\22\0\5\352\1\364"+
    "\17\352\1\0\1\352\2\0\1\352\1\7\1\352\1\0"+
    "\1\352\22\0\2\352\1\365\22\352\1\0\1\352\2\0"+
    "\1\352\1\7\1\352\1\0\1\352\22\0\2\352\1\366"+
    "\22\352\1\0\1\352\2\0\1\352\1\7\1\352\1\0"+
    "\1\352\22\0\16\352\1\367\6\352\1\0\1\352\2\0"+
    "\1\352\1\7\1\352\1\0\1\352\22\0\5\352\1\370"+
    "\17\352\1\0\1\352\2\0\1\352\1\7\1\352\1\0"+
    "\1\352\22\0\2\352\1\371\22\352\1\0\1\352\2\0"+
    "\1\352\1\7\1\352\1\0\1\352\22\0\1\372\24\352"+
    "\1\0\1\352\2\0\1\352\1\7\1\352\1\0\1\352"+
    "\22\0\2\352\1\373\22\352\1\0\1\352\2\0\1\352"+
    "\1\7\1\352\1\0\1\374\22\0\25\352\1\0\1\352"+
    "\2\0\1\352\1\7\1\352\1\0\1\352\22\0\21\352"+
    "\1\375\3\352\1\0\1\352\2\0\1\352\1\7\1\352"+
    "\1\0\1\352\22\0\5\352\1\376\17\352\1\0\1\352"+
    "\2\0\1\352\1\7\1\352\1\0\1\352\22\0\2\352"+
    "\1\377\22\352\1\0\1\352\2\0\1\352\1\7\1\352"+
    "\1\0\1\352\22\0\4\352\1\u0100\20\352\1\0\1\352"+
    "\2\0\1\352\1\7\1\352\1\0\1\352\22\0\5\352"+
    "\1\u0101\17\352\1\0\1\352\2\0\1\352\1\7\1\352"+
    "\1\0\1\352\22\0\13\352\1\u0102\11\352\1\0\1\352"+
    "\2\0\1\352\1\7\1\352\1\0\1\u0103\22\0\25\352"+
    "\1\0\1\352\2\0\1\352\1\7\1\352\1\0\1\352"+
    "\22\0\3\352\1\u0104\21\352\1\0\1\352\2\0\1\352"+
    "\1\7\1\352\1\0\1\352\22\0\2\352\1\u0105\22\352"+
    "\1\0\1\352\2\0\1\352\1\7\1\352\1\0\1\352"+
    "\22\0\2\352\1\u0106\22\352\1\0\1\352\2\0\1\352"+
    "\1\7\1\352\1\0\1\352\22\0\7\352\1\u0107\15\352"+
    "\1\0\1\352\2\0\1\352\1\7\1\352\1\0\1\352"+
    "\22\0\5\352\1\u0108\17\352\1\0\1\352\2\0\1\352"+
    "\1\7\1\352\1\0\1\352\22\0\6\352\1\u0109\16\352"+
    "\3\220\1\u010a\54\220\1\0\1\u010b\2\0\1\u010b\1\7"+
    "\1\u010b\1\0\1\u010b\22\0\25\u010b\1\0\1\u010c\2\0"+
    "\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0\25\u010b\1\0"+
    "\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0\1\u010d\22\0"+
    "\25\u010b\1\0\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0"+
    "\1\u010b\22\0\2\u010b\1\u010e\22\u010b\1\0\1\u010b\2\0"+
    "\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0\5\u010b\1\u010f"+
    "\17\u010b\1\0\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0"+
    "\1\u010b\22\0\3\u010b\1\u0110\21\u010b\1\0\1\u010b\2\0"+
    "\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0\5\u010b\1\u0111"+
    "\17\u010b\1\0\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0"+
    "\1\u0112\22\0\25\u010b\1\0\1\u010b\2\0\1\u010b\1\7"+
    "\1\u010b\1\0\1\u010b\22\0\5\u010b\1\u0113\17\u010b\1\0"+
    "\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0"+
    "\5\u010b\1\u0114\17\u010b\1\0\1\u010b\2\0\1\u010b\1\7"+
    "\1\u010b\1\0\1\u010b\22\0\3\u010b\1\u0115\21\u010b\1\0"+
    "\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0"+
    "\5\u010b\1\u0116\17\u010b\1\0\1\u010b\2\0\1\u010b\1\7"+
    "\1\u010b\1\0\1\u010b\22\0\1\u010b\1\u0117\23\u010b\1\0"+
    "\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0"+
    "\2\u010b\1\u0118\22\u010b\1\0\1\u010b\2\0\1\u010b\1\7"+
    "\1\u010b\1\0\1\u010b\22\0\5\u010b\1\u0119\17\u010b\1\0"+
    "\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0"+
    "\16\u010b\1\u011a\6\u010b\1\0\1\u010b\2\0\1\u010b\1\7"+
    "\1\u010b\1\0\1\u010b\22\0\5\u010b\1\u011b\17\u010b\1\0"+
    "\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0"+
    "\7\u010b\1\u011c\15\u010b\1\0\1\u010b\2\0\1\u010b\1\7"+
    "\1\u010b\1\0\1\u010b\22\0\2\u010b\1\u011d\22\u010b\1\0"+
    "\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0"+
    "\7\u010b\1\u011e\15\u010b\1\0\1\u010b\2\0\1\u010b\1\7"+
    "\1\u010b\1\0\1\u010b\22\0\2\u010b\1\u011f\22\u010b\1\0"+
    "\1\u010b\2\0\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0"+
    "\1\u0120\24\u010b\1\0\1\u010b\2\0\1\u010b\1\7\1\u010b"+
    "\1\0\1\u010b\22\0\5\u010b\1\u0121\17\u010b\1\0\1\u010b"+
    "\2\0\1\u010b\1\7\1\u010b\1\0\1\u010b\22\0\14\u010b"+
    "\1\u0122\10\u010b\1\0\1\u010b\2\0\1\u010b\1\7\1\u010b"+
    "\1\0\1\u010b\22\0\1\u0123\24\u010b\1\0\1\u010b\2\0"+
    "\1\u010b\1\7\1\u010b\1\0\1\u0124\22\0\25\u010b\3\0"+
    "\1\u0125\55\0\1\u0126\2\0\1\u0126\1\7\1\u0126\1\0"+
    "\1\u0126\22\0\25\u0126\1\0\1\u0127\2\0\1\u0126\1\7"+
    "\1\u0126\1\0\1\u0126\22\0\25\u0126\1\0\1\u0126\2\0"+
    "\1\u0126\1\7\1\u0126\1\0\1\u0126\22\0\2\u0126\1\u0128"+
    "\22\u0126\1\0\1\u0126\2\0\1\u0126\1\7\1\u0126\1\0"+
    "\1\u0126\22\0\2\u0126\1\u0129\22\u0126\1\0\1\u0126\2\0"+
    "\1\u0126\1\7\1\u0126\1\0\1\u0126\22\0\2\u0126\1\u012a"+
    "\22\u0126\1\0\1\u0126\2\0\1\u0126\1\7\1\u0126\1\0"+
    "\1\u0126\22\0\2\u0126\1\u012b\22\u0126\1\0\1\u0126\2\0"+
    "\1\u0126\1\7\1\u0126\1\0\1\u0126\22\0\2\u0126\1\u012c"+
    "\22\u0126\1\0\1\u0126\2\0\1\u0126\1\7\1\u0126\1\0"+
    "\1\u012d\22\0\25\u0126\1\0\1\u0126\2\0\1\u0126\1\7"+
    "\1\u0126\1\0\1\u0126\22\0\4\u0126\1\u012e\20\u0126\1\0"+
    "\1\u0126\2\0\1\u0126\1\7\1\u0126\1\0\1\u0126\22\0"+
    "\3\u0126\1\u012f\21\u0126\1\0\1\u0126\2\0\1\u0126\1\7"+
    "\1\u0126\1\0\1\u0126\22\0\2\u0126\1\u0130\22\u0126\1\0"+
    "\1\u0126\2\0\1\u0126\1\7\1\u0126\1\0\1\u0126\22\0"+
    "\6\u0126\1\u0131\16\u0126\1\0\1\u0126\2\0\1\u0126\1\7"+
    "\1\u0126\1\0\1\u0126\22\0\12\u0126\1\u0132\12\u0126\1\0"+
    "\1\u0126\2\0\1\u0126\1\7\1\u0126\1\0\1\u0126\22\0"+
    "\5\u0126\1\u0133\17\u0126\1\0\1\u0126\2\0\1\u0126\1\7"+
    "\1\u0126\1\0\1\u0126\22\0\3\u0126\1\u0134\21\u0126\1\0"+
    "\1\u0126\2\0\1\u0126\1\7\1\u0126\1\0\1\u0126\22\0"+
    "\2\u0126\1\u0135\22\u0126\3\0\1\u0136\55\0\1\u0137\2\0"+
    "\1\u0137\1\7\1\u0137\1\0\1\u0137\22\0\25\u0137\1\0"+
    "\1\u0138\2\0\1\u0137\1\7\1\u0137\1\0\1\u0137\22\0"+
    "\25\u0137\1\0\1\u0137\2\0\1\u0137\1\7\1\u0137\1\0"+
    "\1\u0137\22\0\7\u0137\1\u0139\15\u0137\1\0\1\u0137\2\0"+
    "\1\u0137\1\7\1\u0137\1\0\1\u0137\22\0\1\u013a\24\u0137"+
    "\1\0\1\u0137\2\0\1\u0137\1\7\1\u0137\1\0\1\u0137"+
    "\22\0\5\u0137\1\u013b\17\u0137\1\0\1\u0137\2\0\1\u0137"+
    "\1\7\1\u0137\1\0\1\u0137\22\0\16\u0137\1\u013c\6\u0137"+
    "\1\0\1\u0137\2\0\1\u0137\1\7\1\u0137\1\0\1\u0137"+
    "\22\0\3\u0137\1\u013d\21\u0137\1\0\1\u013e\2\0\1\u013e"+
    "\1\7\1\u013e\1\0\1\u013e\22\0\25\u013e\1\0\1\u013f"+
    "\2\0\1\u013e\1\7\1\u013e\1\0\1\u013e\22\0\25\u013e"+
    "\1\0\1\u013e\2\0\1\u013e\1\7\1\u013e\1\0\1\u013e"+
    "\22\0\3\u013e\1\u0140\21\u013e\1\0\1\u013e\2\0\1\u013e"+
    "\1\7\1\u013e\1\0\1\u013e\22\0\5\u013e\1\u0141\17\u013e"+
    "\1\0\1\u0142\2\0\1\u0142\1\7\1\u0142\1\0\1\u0142"+
    "\22\0\25\u0142\1\0\1\u0143\2\0\1\u0142\1\7\1\u0142"+
    "\1\0\1\u0142\22\0\25\u0142\1\0\1\u0142\2\0\1\u0142"+
    "\1\7\1\u0142\1\0\1\u0142\22\0\1\u0144\24\u0142\1\0"+
    "\1\u0142\2\0\1\u0142\1\7\1\u0142\1\0\1\u0142\22\0"+
    "\2\u0142\1\u0145\22\u0142\1\0\1\u0146\2\0\1\u0146\1\7"+
    "\1\u0146\1\0\1\u0146\22\0\25\u0146\1\0\1\u0147\2\0"+
    "\1\u0146\1\7\1\u0146\1\0\1\u0146\22\0\25\u0146\1\0"+
    "\1\u0148\2\0\1\u0148\1\7\1\u0148\1\0\1\u0148\22\0"+
    "\25\u0148\1\0\1\u0149\2\0\1\u0148\1\7\1\u0148\1\0"+
    "\1\u0148\22\0\25\u0148\1\0\1\u014a\2\0\1\u014a\1\7"+
    "\1\u014a\1\0\1\u014a\22\0\25\u014a\1\0\1\u014b\2\0"+
    "\1\u014a\1\7\1\u014a\1\0\1\u014a\22\0\25\u014a\1\0"+
    "\1\u014c\2\0\1\u014c\1\7\1\u014c\1\0\1\u014c\22\0"+
    "\25\u014c\1\0\1\u014d\2\0\1\u014c\1\7\1\u014c\1\0"+
    "\1\u014c\22\0\25\u014c\1\0\1\u014e\2\0\1\u014e\1\7"+
    "\1\u014e\1\0\1\u014e\22\0\25\u014e\1\0\1\u014f\2\0"+
    "\1\u014e\1\7\1\u014e\1\0\1\u014e\22\0\25\u014e\1\0"+
    "\1\u0150\2\0\1\u0150\1\7\1\u0150\1\0\1\u0150\22\0"+
    "\25\u0150\1\0\1\u0151\2\0\1\u0150\1\7\1\u0150\1\0"+
    "\1\u0150\22\0\25\u0150\1\0\1\u0152\2\0\1\u0152\1\7"+
    "\1\u0152\1\0\1\u0152\22\0\25\u0152\1\0\1\u0153\2\0"+
    "\1\u0152\1\7\1\u0152\1\0\1\u0152\22\0\25\u0152\1\0"+
    "\1\u0154\2\0\1\u0154\1\7\1\u0154\1\0\1\u0154\22\0"+
    "\25\u0154\1\0\1\u0155\2\0\1\u0154\1\7\1\u0154\1\0"+
    "\1\u0154\22\0\25\u0154\1\0\1\u0156\2\0\1\u0156\1\7"+
    "\1\u0156\1\0\1\u0156\22\0\25\u0156\1\0\1\u0157\2\0"+
    "\1\u0156\1\7\1\u0156\1\0\1\u0156\22\0\25\u0156\1\0"+
    "\1\u0158\2\0\1\u0158\1\7\1\u0158\1\0\1\u0158\22\0"+
    "\25\u0158\1\0\1\u0159\2\0\1\u0158\1\7\1\u0158\1\0"+
    "\1\u0158\22\0\25\u0158\1\0\1\u015a\2\0\1\u015a\1\7"+
    "\1\u015a\1\0\1\u015a\22\0\25\u015a\1\0\1\u015b\2\0"+
    "\1\u015a\1\7\1\u015a\1\0\1\u015a\22\0\25\u015a\1\0"+
    "\1\u015c\2\0\1\u015c\1\7\1\u015c\1\0\1\u015c\22\0"+
    "\25\u015c\1\0\1\u015d\2\0\1\u015c\1\7\1\u015c\1\0"+
    "\1\u015c\22\0\25\u015c\1\0\1\u015e\2\0\1\u015e\1\7"+
    "\1\u015e\1\0\1\u015e\22\0\25\u015e\1\0\1\u015f\2\0"+
    "\1\u015e\1\7\1\u015e\1\0\1\u015e\22\0\25\u015e\1\0"+
    "\1\u0160\2\0\1\u0160\1\7\1\u0160\1\0\1\u0160\22\0"+
    "\25\u0160\1\0\1\u0161\2\0\1\u0160\1\7\1\u0160\1\0"+
    "\1\u0160\22\0\25\u0160\1\0\1\u0162\2\0\1\u0162\1\7"+
    "\1\u0162\1\0\1\u0162\22\0\25\u0162\1\0\1\u0163\2\0"+
    "\1\u0162\1\7\1\u0162\1\0\1\u0162\22\0\25\u0162\1\0"+
    "\1\u0164\2\0\1\u0164\1\7\1\u0164\1\0\1\u0164\22\0"+
    "\25\u0164\1\0\1\u0165\2\0\1\u0164\1\7\1\u0164\1\0"+
    "\1\u0164\22\0\25\u0164\1\0\1\u0166\2\0\1\u0166\1\7"+
    "\1\u0166\1\0\1\u0166\22\0\25\u0166\1\0\1\u0167\2\0"+
    "\1\u0166\1\7\1\u0166\1\0\1\u0166\22\0\25\u0166\1\0"+
    "\1\u0168\2\0\1\u0168\1\7\1\u0168\1\0\1\u0168\22\0"+
    "\25\u0168\1\0\1\u0169\2\0\1\u0168\1\7\1\u0168\1\0"+
    "\1\u0168\22\0\25\u0168\1\0\1\u016a\2\0\1\u016a\1\7"+
    "\1\u016a\1\0\1\u016a\22\0\25\u016a\1\0\1\u016b\2\0"+
    "\1\u016a\1\7\1\u016a\1\0\1\u016a\22\0\25\u016a\1\0"+
    "\1\u016c\2\0\1\u016c\1\7\1\u016c\1\0\1\u016c\22\0"+
    "\25\u016c\1\0\1\u016d\2\0\1\u016c\1\7\1\u016c\1\0"+
    "\1\u016c\22\0\25\u016c\1\0\1\u016e\2\0\1\u016e\1\7"+
    "\1\u016e\1\0\1\u016e\22\0\25\u016e\1\0\1\136\2\0"+
    "\1\u016e\1\7\1\u016e\1\0\1\u016e\22\0\25\u016e";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\2\1\11\11\2\1\3\11"+
    "\17\1\1\0\2\1\1\0\4\1\1\0\3\1\1\0"+
    "\5\11\124\1\1\0\56\1\1\0\51\1\1\0\114\1"+
    "\1\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexema;
    modelos.InformacionLexema c = new modelos.InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARRIBA;
          }
        case 80: break;
        case 12: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_O;
          }
        case 81: break;
        case 21: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMA;
          }
        case 82: break;
        case 39: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LEER;
          }
        case 83: break;
        case 2: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO;
          }
        case 84: break;
        case 64: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_INICIAR;
          }
        case 85: break;
        case 42: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ATRAS;
          }
        case 86: break;
        case 59: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CAPTURA;
          }
        case 87: break;
        case 5: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return IDENTIFICADOR;
          }
        case 88: break;
        case 53: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_APAGAR;
          }
        case 89: break;
        case 29: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DESIGUAL;
          }
        case 90: break;
        case 31: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SI;
          }
        case 91: break;
        case 54: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_SEGUIR;
          }
        case 92: break;
        case 6: 
          { /*Ignore*/
          }
        case 93: break;
        case 51: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CADENA;
          }
        case 94: break;
        case 77: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VERDADERO;
          }
        case 95: break;
        case 47: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_GIRAR;
          }
        case 96: break;
        case 71: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ADELANTE;
          }
        case 97: break;
        case 19: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR;
          }
        case 98: break;
        case 32: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIN;
          }
        case 99: break;
        case 16: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_IZQ;
          }
        case 100: break;
        case 50: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARGAR;
          }
        case 101: break;
        case 18: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR;
          }
        case 102: break;
        case 10: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_DIVISION;
          }
        case 103: break;
        case 56: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ESPERAR;
          }
        case 104: break;
        case 35: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NULO;
          }
        case 105: break;
        case 63: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECIMAL;
          }
        case 106: break;
        case 44: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FALSO;
          }
        case 107: break;
        case 41: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CICLO;
          }
        case 108: break;
        case 73: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_MIENTRAS;
          }
        case 109: break;
        case 40: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CORTO;
          }
        case 110: break;
        case 43: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ABAJO;
          }
        case 111: break;
        case 30: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_NO;
          }
        case 112: break;
        case 11: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_Y;
          }
        case 113: break;
        case 7: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return COMILLA_SIMPLE;
          }
        case 114: break;
        case 45: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARAV;
          }
        case 115: break;
        case 28: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MENOR_QUE;
          }
        case 116: break;
        case 79: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DIRECCIONAR;
          }
        case 117: break;
        case 65: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FUNCION;
          }
        case 118: break;
        case 67: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_EJECUTAR;
          }
        case 119: break;
        case 49: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENTERO;
          }
        case 120: break;
        case 48: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_VIDEO;
          }
        case 121: break;
        case 38: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PARA;
          }
        case 122: break;
        case 33: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PIN;
          }
        case 123: break;
        case 69: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CALIBRAR;
          }
        case 124: break;
        case 74: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_BOOLEANO;
          }
        case 125: break;
        case 37: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_FIJO;
          }
        case 126: break;
        case 13: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_NEGACION;
          }
        case 127: break;
        case 36: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RUTA;
          }
        case 128: break;
        case 4: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MENOS;
          }
        case 129: break;
        case 34: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_HAZ;
          }
        case 130: break;
        case 14: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MODULO;
          }
        case 131: break;
        case 24: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_EXPONENTE;
          }
        case 132: break;
        case 70: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ACELERAR;
          }
        case 133: break;
        case 1: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ERROR;
          }
        case 134: break;
        case 17: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PARENTESIS_DER;
          }
        case 135: break;
        case 25: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return CADENA_TEXTO;
          }
        case 136: break;
        case 61: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DETENER;
          }
        case 137: break;
        case 57: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_RETORNO;
          }
        case 138: break;
        case 27: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return MAYOR_QUE;
          }
        case 139: break;
        case 78: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DECLARACION;
          }
        case 140: break;
        case 60: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ARREGLO;
          }
        case 141: break;
        case 62: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_DERECHA;
          }
        case 142: break;
        case 8: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ASIGNACION;
          }
        case 143: break;
        case 76: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_PRINCIPAL;
          }
        case 144: break;
        case 75: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IZQUIERDA;
          }
        case 145: break;
        case 66: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_ENCENDER;
          }
        case 146: break;
        case 23: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return NUMERO_DECIMAL;
          }
        case 147: break;
        case 46: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_LARGO;
          }
        case 148: break;
        case 58: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_REGRESA;
          }
        case 149: break;
        case 26: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_IGUALDAD;
          }
        case 150: break;
        case 20: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return DOS_PUNTOS;
          }
        case 151: break;
        case 72: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_IMPRIMIR;
          }
        case 152: break;
        case 9: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return OPERADOR_POR;
          }
        case 153: break;
        case 3: 
          { c.linea=yyline;c.columna=yycolumn;c.columna=yycolumn; lexema=yytext(); return OPERADOR_MAS;
          }
        case 154: break;
        case 15: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return PUNTO_COMA;
          }
        case 155: break;
        case 68: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return RESERVADA_CARACTER;
          }
        case 156: break;
        case 22: 
          { c.linea=yyline;c.columna=yycolumn; lexema=yytext(); return ARROBA;
          }
        case 157: break;
        case 55: 
          { 
          }
        case 158: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
